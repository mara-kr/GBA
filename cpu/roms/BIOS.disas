

;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2014 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3057-7374-2C			    |
; |	Zhou Tao, Jiangsu Australia Sinuo Network Technology Co., Ltd.	    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	A860E8C0B6D573D191E4EC7DB1B1E4F6
; Input	CRC32 :	81977335

; ---------------------------------------------------------------------------
; File Name   :	C:\Users\socta\Desktop\265111740499005636\GBA.BIOS
; Format      :	Binary file
; Base Address:	0000h Range: 0000h - 4000h Loaded length: 4000h

; Processor	  : ARM
; ARM architecture: metaarm
; Target assembler: Generic assembler for ARM
; Byte sex	  : Little endian

; ===========================================================================

; Segment type:	Pure code
		AREA ROM, CODE,	READWRITE, ALIGN=0
; START	OF FUNCTION CHUNK FOR sub_E0
		CODE32

loc_0					; CODE XREF: sub_E0+46j
					; DATA XREF: ROM:00000384o
		B		loc_68	; Branch
; END OF FUNCTION CHUNK	FOR sub_E0
; ---------------------------------------------------------------------------
		B		sub_1C	; Branch
; ---------------------------------------------------------------------------
		B		loc_140	; Branch
; ---------------------------------------------------------------------------
		B		sub_1C	; Branch
; ---------------------------------------------------------------------------
		B		sub_1C	; Branch
; ---------------------------------------------------------------------------
		B		sub_1C	; Branch
; ---------------------------------------------------------------------------
		B		loc_128	; Branch

; =============== S U B	R O U T	I N E =======================================


sub_1C					; CODE XREF: ROM:00000004j
					; ROM:0000000Cj ...
		LDR		SP, =0x3007FF0 ; Load from Memory
		STMFD		SP!, {R12,LR} ;	Store Block to Memory
		MRS		R12, SPSR ; Transfer PSR to Register
		MRS		LR, CPSR ; Transfer PSR	to Register
		STMFD		SP!, {R12,LR} ;	Store Block to Memory
		MOV		R12, #0x8000000	; Rd = Op2
		LDRB		LR, [R12,#0x9C]	; Load from Memory
		CMP		LR, #0xA5 ; '•'	; Set cond. codes on Op1 - Op2
		BNE		loc_54	; Branch
		LDREQB		LR, [R12,#0xB4]	; Load from Memory
		ANDEQS		LR, LR,	#0x80 ;	Rd = Op1 & Op2
		ADR		LR, loc_54 ; Load address
		LDRNE		PC, =0x9FE2000 ; Indirect Jump
		LDREQ		PC, =0x9FFC000 ; Indirect Jump

loc_54					; CODE XREF: sub_1C+20j
					; DATA XREF: sub_1C+2Co
		LDR		SP, =0x3007FE0 ; Load from Memory
		LDMFD		SP!, {R12,LR} ;	Load Block from	Memory
		MSR		SPSR_cf, R12 ; Transfer	Register to PSR
		LDMFD		SP!, {R12,LR} ;	Load Block from	Memory
		SUBS		PC, LR,	#4 ; Rd	= Op1 -	Op2
; End of function sub_1C

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_E0

loc_68					; CODE XREF: sub_E0:loc_0j
		CMP		LR, #0	; Set cond. codes on Op1 - Op2
		MOVEQ		LR, #4	; Rd = Op2
		MOV		R12, #0x4000000	; Rd = Op2
		LDRB		R12, [R12,#0x300] ; Load from Memory
		TEQ		R12, #1	; Set cond. codes on Op1 ^ Op2
		MRSEQ		R12, CPSR ; Transfer PSR to Register
		ORREQ		R12, R12, #0xC0	; Rd = Op1 | Op2
		MSREQ		CPSR_cf, R12 ; Transfer	Register to PSR
		BEQ		sub_1C	; Branch
		MOV		R0, #0xDF ; 'ﬂ'	; Rd = Op2
		MSR		CPSR_cf, R0 ; Transfer Register	to PSR
		MOV		R4, #0x4000000 ; Rd = Op2
		STRB		R4, [R4,#0x208]	; Store	to Memory
		BL		sub_E0	; Branch with Link
		ADR		R0, loc_300 ; Load address
		STR		R0, [SP,#arg_FC] ; Store to Memory
		LDR		R0, =(sub_1928+1) ; Load from Memory
		ADR		LR, loc_B4 ; Load address
		BX		R0 ; sub_1928 ;	Branch to/from Thumb mode

loc_B4					; DATA XREF: sub_E0-34o
		MOV		R4, #0x4000000 ; Rd = Op2
		LDRB		R2, [R4,#-6] ; Load from Memory
		BL		sub_E0	; Branch with Link
		CMP		R2, #0	; Set cond. codes on Op1 - Op2
		LDMDB		R4, {R0-R12} ; Load Block from Memory
		MOVNE		LR, #0x2000000 ; Rd = Op2
		MOVEQ		LR, #0x8000000 ; Rd = Op2
		MOV		R0, #0x1F ; Rd = Op2
		MSR		CPSR_cf, R0 ; Transfer Register	to PSR
		MOV		R0, #0	; Rd = Op2
		BX		LR	; Branch to/from Thumb mode
; END OF FUNCTION CHUNK	FOR sub_E0

; =============== S U B	R O U T	I N E =======================================


sub_E0					; CODE XREF: sub_E0-44p sub_E0-24p

arg_FC		=  0xFC

; FUNCTION CHUNK AT 00000000 SIZE 00000004 BYTES
; FUNCTION CHUNK AT 00000068 SIZE 00000078 BYTES

		MOV		R0, #0xD3 ; '”'	; Rd = Op2
		MSR		CPSR_cf, R0 ; Transfer Register	to PSR
		LDR		SP, =0x3007FE0 ; Load from Memory
		MOV		LR, #0	; Rd = Op2
		MSR		SPSR_cf, LR ; Transfer Register	to PSR
		MOV		R0, #0xD2 ; '“'	; Rd = Op2
		MSR		CPSR_cf, R0 ; Transfer Register	to PSR
		LDR		SP, =0x3007FA0 ; Load from Memory
		MOV		LR, #0	; Rd = Op2
		MSR		SPSR_cf, LR ; Transfer Register	to PSR
		MOV		R0, #0x5F ; '_'	; Rd = Op2
		MSR		CPSR_cf, R0 ; Transfer Register	to PSR
		LDR		SP, =0x3007F00 ; Load from Memory
		ADR		R0, (loc_11C+1)	; Load address
		BX		R0 ; loc_11C ; Branch to/from Thumb mode
; ---------------------------------------------------------------------------
		CODE16

loc_11C					; CODE XREF: sub_E0+38j
					; DATA XREF: sub_E0+34o
		MOVS		R0, #0	; Rd = Op2
		LDR		R1, =0xFFFFFE00	; Load from Memory

loc_120					; CODE XREF: sub_E0+44j
		STR		R0, [R4,R1] ; Store to Memory
		ADDS		R1, R1,	#4 ; Rd	= Op1 +	Op2
		BLT		loc_120	; Branch
		BX		LR ; loc_0 ; Branch to/from Thumb mode
; End of function sub_E0

; ---------------------------------------------------------------------------
		CODE32

loc_128					; CODE XREF: ROM:00000018j
		STMFD		SP!, {R0-R3,R12,LR} ; Store Block to Memory
		MOV		R0, #0x4000000 ; Rd = Op2
		ADR		LR, loc_138 ; Load address
		LDR		PC, [R0,#-4] ; Indirect	Jump

loc_138					; DATA XREF: ROM:00000130o
		LDMFD		SP!, {R0-R3,R12,LR} ; Load Block from Memory
		SUBS		PC, LR,	#4 ; Rd	= Op1 -	Op2
; ---------------------------------------------------------------------------

loc_140					; CODE XREF: ROM:00000008j
		STMFD		SP!, {R11,R12,LR} ; Store Block	to Memory
		LDRB		R12, [LR,#-2] ;	Load from Memory
		ADR		R11, dword_1C8 ; Load address
		LDR		R12, [R11,R12,LSL#2] ; Load from Memory
		MRS		R11, SPSR ; Transfer PSR to Register
		STMFD		SP!, {R11} ; Store Block to Memory
		AND		R11, R11, #0x80	; Rd = Op1 & Op2
		ORR		R11, R11, #0x1F	; Rd = Op1 | Op2
		MSR		CPSR_cf, R11 ; Transfer	Register to PSR
		STMFD		SP!, {R2,LR} ; Store Block to Memory
		ADR		LR, loc_170 ; Load address
		BX		R12	; Branch to/from Thumb mode

loc_170					; DATA XREF: ROM:00000168o
		LDMFD		SP!, {R2,LR} ; Load Block from Memory
		MOV		R12, #0xD3 ; '”' ; Rd =	Op2
		MSR		CPSR_cf, R12 ; Transfer	Register to PSR
		LDMFD		SP!, {R11} ; Load Block	from Memory
		MSR		SPSR_cf, R11 ; Transfer	Register to PSR
		LDMFD		SP!, {R11,R12,LR} ; Load Block from Memory
		MOVS		PC, LR	; Rd = Op2

; =============== S U B	R O U T	I N E =======================================


sub_18C					; CODE XREF: sub_3718:loc_371Cj
		MOV		R12, #0x4000000	; Rd = Op2
		MOV		R2, #4	; Rd = Op2
		STRB		R2, [R12,#1] ; Store to	Memory
		MOV		R2, #8	; Rd = Op2
		STRB		R2, [R12] ; Store to Memory

loc_1A0					; CODE XREF: sub_3710:loc_3714j
		MOV		R2, #0	; Rd = Op2
		B		loc_1AC	; Branch
; ---------------------------------------------------------------------------
		MOV		R2, #0x80 ; 'Ä'	; Rd = Op2

loc_1AC					; CODE XREF: sub_18C+18j
		MOV		R12, #0x4000000	; Rd = Op2
		STRB		R2, [R12,#0x301] ; Store to Memory
		BX		LR	; Branch to/from Thumb mode
; End of function sub_18C

; ---------------------------------------------------------------------------
dword_1B8	DCD 0x3007F00		; DATA XREF: sub_E0+30r
dword_1BC	DCD 0x3007FA0		; DATA XREF: sub_E0+1Cr
dword_1C0	DCD 0x3007FE0		; DATA XREF: sub_1C:loc_54r sub_E0+8r
dword_1C4	DCD 0x3007FF0		; DATA XREF: sub_1Cr
dword_1C8	DCD 0xB4, 0x9C3, 0x1A0,	0x1A8, 0x330, 0x328, 0x3B4, 0x3A8
					; DATA XREF: ROM:00000148o
		DCD 0x404, 0x474, 0x4FD, 0xB4D,	0xBC4, 0x378, 0xC2C, 0xCE0
		DCD 0xF60, 0x10FC, 0x1194, 0x1014, 0x1279, 0x12C1, 0x1333
		DCD 0x135D, 0x1399, 0x801, 0x1665, 0x179D, 0x1DC5, 0x210D
		DCD 0x1825, 0x18D9, 0x13C5, 0x1435, 0x14C1, 0x14FD, 0x1515
		DCD 0x28CF, 0x8C, 0x1AC, 0x1879, 0x18C9, 0x2693
off_274		DCD 0x9FE2000		; DATA XREF: sub_1C+30r
off_278		DCD 0x9FFC000		; DATA XREF: sub_1C+34r
off_27C		DCD sub_1928+1		; DATA XREF: sub_E0-38r
dword_280	DCD 0xFFFFFE00		; DATA XREF: sub_E0+3Er
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_1928
		CODE16

loc_284					; CODE XREF: sub_1928+36j
		MOVS		R4, #0x4000000
		MOVS		R5, #0x5000000
		MOVS		R6, #0x6000000
		MOVS		R1, #0	; Rd = Op2
		MOVS		R0, #0xC2 ; '¬'	; Rd = Op2
		MOVS		R2, R4	; Rd = Op2
		ADDS		R2, #0x80 ; 'Ä'	; Rd = Op1 + Op2
		STRB		R0, [R2,#2] ; Store to Memory
		STRB		R0, [R2,#9] ; Store to Memory
		MOVS		R0, #0x101
		MOVS		R2, #0xA0 ; '†'	; Rd = Op2
		MOVS		R3, #0x90 ; 'ê'	; Rd = Op2
		STR		R6, [SP,#arg_0]	; Store	to Memory
		MOVS		R7, #0xF0 ; ''	; Rd = Op2
		STR		R7, [SP,#arg_4]	; Store	to Memory
		BL		sub_79E	; Branch with Link
		MOVS		R0, #0x4180
		STRH		R0, [R4,#0xC] ;	Store to Memory
		LDR		R0, =0xFFFFD800	; Load from Memory
		STR		R0, [R4,#0x28] ; Store to Memory
		ASRS		R0, R0,	#0x10 ;	Arithmetic Shift Right
		LSLS		R0, R0,	#0xB ; Logical Shift Left
		STR		R0, [R4,#0x2C] ; Store to Memory
		LDR		R3, =0x7FFF7BDE	; Load from Memory
		STR		R3, [R5] ; Store to Memory
		LDRH		R3, [R5] ; Load	from Memory
		LDR		R7, =0xC63 ; Load from Memory

loc_2C6					; CODE XREF: sub_1928-164Ej
		LSRS		R2, R4,	#0x11 ;	Logical	Shift Right
		ADDS		R2, R2,	R4 ; Rd	= Op1 +	Op2
		STRH		R7, [R2,#2] ; Store to Memory
		BL		sub_3710 ; Branch with Link
		MOVS		R0, #4	; Rd = Op2
		STRB		R0, [R4,#1] ; Store to Memory
		STRB		R0, [R4] ; Store to Memory
		SUBS		R3, R3,	R7 ; Rd	= Op1 -	Op2
		STRH		R3, [R5] ; Store to Memory
		BGT		loc_2C6	; Branch
		MVNS		R0, R1	; Rd = ~Op2
		STR		R0, [SP,#arg_8]	; Store	to Memory
		ADDS		R4, #0xD4 ; '‘'	; Rd = Op1 + Op2
		ADD		R1, SP,	#arg_8 ; Rd = Op1 + Op2
		STR		R1, [R4] ; Store to Memory
		STR		R6, [R4,#4] ; Store to Memory
		LDR		R1, =0x85006000	; Load from Memory
		STR		R1, [R4,#8] ; Store to Memory
		BL		sub_3718 ; Branch with Link
; END OF FUNCTION CHUNK	FOR sub_1928
; ---------------------------------------------------------------------------
dword_2F0	DCD 0x85006000		; DATA XREF: sub_1928-1640r
dword_2F4	DCD 0xFFFFD800		; DATA XREF: sub_1928-1674r
dword_2F8	DCD 0x7FFF7BDE		; DATA XREF: sub_1928-166Ar
dword_2FC	DCD 0xC63		; DATA XREF: sub_1928-1664r
; ---------------------------------------------------------------------------
		CODE32

loc_300					; DATA XREF: sub_E0-40o
		MOV		R3, #0x4000000 ; Rd = Op2
		LDR		R2, [R3,#0x200]	; Load from Memory
		AND		R2, R2,	R2,LSR#16 ; Rd = Op1 & Op2
		ANDS		R1, R2,	#0x80 ;	Rd = Op1 & Op2
		LDRNE		R0, =(sub_2D70+1) ; Load from Memory
		ANDEQ		R1, R2,	#1 ; Rd	= Op1 &	Op2
		LDREQ		R0, =(loc_210C+1) ; Load from Memory
		STREQH		R2, [R3,#-8] ; Store to	Memory
		STRB		R1, [R3,#0x202]	; Store	to Memory
		BX		R0 ; loc_210C ;	Branch to/from Thumb mode

; =============== S U B	R O U T	I N E =======================================


sub_328					; CODE XREF: sub_3728:loc_372Cj
		MOV		R0, #1	; Rd = Op2
		MOV		R1, #1	; Rd = Op2
		STMFD		SP!, {R4,LR} ; Store Block to Memory
		MOV		R3, #0	; Rd = Op2
		MOV		R4, #1	; Rd = Op2
		CMP		R0, #0	; Set cond. codes on Op1 - Op2
		BLNE		sub_358	; Branch with Link

loc_344					; CODE XREF: sub_328+24j
		STRB		R3, [R12,#0x301] ; Store to Memory
		BL		sub_358	; Branch with Link
		BEQ		loc_344	; Branch
		LDMFD		SP!, {R4,LR} ; Load Block from Memory
		BX		LR	; Branch to/from Thumb mode
; End of function sub_328


; =============== S U B	R O U T	I N E =======================================


sub_358					; CODE XREF: sub_328+18p sub_328+20p
		MOV		R12, #0x4000000	; Rd = Op2
		STRB		R3, [R12,#0x208] ; Store to Memory
		LDRH		R2, [R12,#-8] ;	Load from Memory
		ANDS		R0, R1,	R2 ; Rd	= Op1 &	Op2
		EORNE		R2, R2,	R0 ; Rd	= Op1 ^	Op2
		STRNEH		R2, [R12,#-8] ;	Store to Memory
		STRB		R4, [R12,#0x208] ; Store to Memory
		BX		LR	; Branch to/from Thumb mode
; End of function sub_358

; ---------------------------------------------------------------------------
		MOV		R0, #0	; Rd = Op2
		MOV		R3, #0	; Rd = Op2

loc_380					; CODE XREF: ROM:00000394j
		MOV		R12, #0xDF ; 'ﬂ' ; Rd =	Op2
		LDMIA		R3!, {R2} ; Load Block from Memory
		MSR		CPSR_cf, R12 ; Transfer	Register to PSR
		ADD		R0, R0,	R2 ; Rd	= Op1 +	Op2
		MOVS		R1, R3,LSR#14 ;	Rd = Op2
		BEQ		loc_380	; Branch
		BX		LR	; Branch to/from Thumb mode
		CODE16

; =============== S U B	R O U T	I N E =======================================


sub_39C					; CODE XREF: sub_1928+1D0p
		CMP		R0, #0	; Set cond. codes on Op1 - Op2
		BGT		locret_3A2 ; Branch
		NEGS		R0, R0	; Negate

locret_3A2				; CODE XREF: sub_39C+2j
		BX		LR	; Branch to/from Thumb mode
; End of function sub_39C


; =============== S U B	R O U T	I N E =======================================


sub_3A4					; CODE XREF: sub_768+Ep
		ADR		R3, loc_3B4 ; Load address
		BX		R3 ; loc_3B4 ; Branch to/from Thumb mode
; ---------------------------------------------------------------------------
		CODE32

loc_3A8					; CODE XREF: sub_3720:loc_3724j
		MOV		R3, R0	; Rd = Op2
		MOV		R0, R1	; Rd = Op2
		MOV		R1, R3	; Rd = Op2

loc_3B4					; CODE XREF: sub_3A4+2j
					; DATA XREF: sub_3A4o
		ANDS		R3, R1,	#0x80000000 ; Rd = Op1 & Op2
		RSBMI		R1, R1,	#0 ; Rd	= Op2 -	Op1
		EORS		R12, R3, R0,ASR#32 ; Rd	= Op1 ^	Op2
		RSBCS		R0, R0,	#0 ; Rd	= Op2 -	Op1
		MOVS		R2, R1	; Rd = Op2

loc_3C8					; CODE XREF: sub_3A4+2Cj
		CMP		R2, R0,LSR#1 ; Set cond. codes on Op1 -	Op2
		MOVLS		R2, R2,LSL#1 ; Rd = Op2
		BCC		loc_3C8	; Branch

loc_3D4					; CODE XREF: sub_3A4+44j
		CMP		R0, R2	; Set cond. codes on Op1 - Op2
		ADC		R3, R3,	R3 ; Rd	= Op1 +	Op2 + C
		SUBCS		R0, R0,	R2 ; Rd	= Op1 -	Op2
		TEQ		R2, R1	; Set cond. codes on Op1 ^ Op2
		MOVNE		R2, R2,LSR#1 ; Rd = Op2
		BNE		loc_3D4	; Branch
		MOV		R1, R0	; Rd = Op2
		MOV		R0, R3	; Rd = Op2
		MOVS		R12, R12,LSL#1 ; Rd = Op2
		RSBCS		R0, R0,	#0 ; Rd	= Op2 -	Op1
		RSBMI		R1, R1,	#0 ; Rd	= Op2 -	Op1
		BX		LR	; Branch to/from Thumb mode
; End of function sub_3A4

; ---------------------------------------------------------------------------
		STMFD		SP!, {R4} ; Store Block	to Memory
		MOV		R12, R0	; Rd = Op2
		MOV		R1, #1	; Rd = Op2

loc_410					; CODE XREF: ROM:0000041Cj
		CMP		R0, R1	; Set cond. codes on Op1 - Op2
		MOVHI		R0, R0,LSR#1 ; Rd = Op2
		MOVHI		R1, R1,LSL#1 ; Rd = Op2
		BHI		loc_410	; Branch

loc_420					; CODE XREF: ROM:00000460j
		MOV		R0, R12	; Rd = Op2
		MOV		R4, R1	; Rd = Op2
		MOV		R3, #0	; Rd = Op2
		MOV		R2, R1	; Rd = Op2

loc_430					; CODE XREF: ROM:00000438j
		CMP		R2, R0,LSR#1 ; Set cond. codes on Op1 -	Op2
		MOVLS		R2, R2,LSL#1 ; Rd = Op2
		BCC		loc_430	; Branch

loc_43C					; CODE XREF: ROM:00000450j
		CMP		R0, R2	; Set cond. codes on Op1 - Op2
		ADC		R3, R3,	R3 ; Rd	= Op1 +	Op2 + C
		SUBCS		R0, R0,	R2 ; Rd	= Op1 -	Op2
		TEQ		R2, R1	; Set cond. codes on Op1 ^ Op2
		MOVNE		R2, R2,LSR#1 ; Rd = Op2
		BNE		loc_43C	; Branch
		ADD		R1, R1,	R3 ; Rd	= Op1 +	Op2
		MOVS		R1, R1,LSR#1 ; Rd = Op2
		CMP		R1, R4	; Set cond. codes on Op1 - Op2
		BCC		loc_420	; Branch
		MOV		R0, R4	; Rd = Op2
		LDMFD		SP!, {R4} ; Load Block from Memory
		BX		LR	; Branch to/from Thumb mode
; ---------------------------------------------------------------------------
dword_470	DCD 0x4718A300,	0xE0010090, 0xE1A01741,	0xE2611000, 0xE3A030A9
		DCD 0xE0030391,	0xE1A03743, 0xE2833E39,	0xE0030391, 0xE1A03743
		DCD 0xE2833C09,	0xE283301C, 0xE0030391,	0xE1A03743, 0xE2833C0F
		DCD 0xE28330B6,	0xE0030391, 0xE1A03743,	0xE2833C16, 0xE28330AA
		DCD 0xE0030391,	0xE1A03743, 0xE2833A02,	0xE2833081, 0xE0030391
		DCD 0xE1A03743,	0xE2833C36, 0xE2833051,	0xE0030391, 0xE1A03743
		DCD 0xE2833CA2,	0xE28330F9, 0xE0000093,	0xE1A00840, 0xE12FFF1E
		DCD 0x2900B5F0,	0x2800D106, 0x2000DB01,	0x2080E049, 0xE0460200
		DCD 0xD1072800,	0xDB022900, 0x2002040, 0x20C0E03F, 0xE03C0200
		DCD 0x3921C02, 0x39B1C0B, 0x424D4244, 0x2362640, 0x29000077
		DCD 0x2800DB1B,	0x4288DB0F, 0x1C01DB06,	0xF7FF1C18, 0xF7FFFF2D
		DCD 0xE026FF91,	0xF7FF1C10, 0xF7FFFF27,	0x1A30FF8B, 0x428CE01F
		DCD 0x1C01DBF6,	0xF7FF1C18, 0xF7FFFF1D,	0x1838FF81, 0x2800E015
		DCD 0x42ACDC09,	0x1C10DCF3, 0xFF12F7FF,	0xFF76F7FF, 0x1A3019F6
		DCD 0x42A8E009,	0x1C01DBF5, 0xF7FF1C18,	0xF7FFFF07, 0x19FFFF6B
		DCD 0xBCF01838,	0x4718BC08
		CODE16

; =============== S U B	R O U T	I N E =======================================


sub_5A4					; CODE XREF: sub_874+20p
		PUSH		{R3-R6,LR} ; Push registers
		MOVS		R6, #0x8000000
		MOVS		R5, #0x9E ; 'û'	; Rd = Op2
		ADDS		R5, R5,	R6 ; Rd	= Op1 +	Op2
		SUBS		R0, R5,	#1 ; Rd	= Op1 -	Op2
		MOVS		R1, #0x1B ; Rd = Op2
		BL		sub_6AC	; Branch with Link
		MOVS		R4, #0xC ; Rd =	Op2
		MULS		R4, R0	; Multiply
		LDRB		R3, [R5] ; Load	from Memory
		LSLS		R3, R3,	#0x1E ;	Logical	Shift Left
		LSRS		R3, R3,	#0x1E ;	Logical	Shift Right
		MOVS		R2, #0x30 ; '0'	; Rd = Op2
		MULS		R2, R3	; Multiply
		ADDS		R4, R4,	R2 ; Rd	= Op1 +	Op2
		ADR		R5, sub_5EC ; Load address
		ADDS		R5, R5,	R4 ; Rd	= Op1 +	Op2
		MOVS		R4, #0	; Rd = Op2

loc_5CC					; CODE XREF: sub_5A4+44j
		MOVS		R0, R4	; Rd = Op2
		BL		sub_6CE	; Branch with Link
		CMP		R4, #3	; Set cond. codes on Op1 - Op2
		BLT		loc_5E4	; Branch
		CMP		R4, #9	; Set cond. codes on Op1 - Op2
		BGE		loc_5E4	; Branch
		LDRH		R1, [R5] ; Load	from Memory
		LSLS		R1, R1,	#1 ; Logical Shift Left
		ORRS		R1, R6	; Rd = Op1 | Op2
		LDRH		R0, [R1] ; Load	from Memory
		ADDS		R5, R5,	#2 ; Rd	= Op1 +	Op2

loc_5E4					; CODE XREF: sub_5A4+30j sub_5A4+34j
		ADDS		R4, R4,	#1 ; Rd	= Op1 +	Op2
		CMP		R4, #0xB ; Set cond. codes on Op1 - Op2
		BNE		loc_5CC	; Branch
		POP		{R3-R6,PC} ; Pop registers
; End of function sub_5A4


; =============== S U B	R O U T	I N E =======================================


sub_5EC					; DATA XREF: sub_5A4+22o
		BLX		R3	; Branch with Link and Exchange	(register indirect)
		STRB		R6, [R4,#0x10] ; Store to Memory
		ASRS		R4, R7,	#6 ; Arithmetic	Shift Right
		LDR		R7, [R1,#0x54] ; Load from Memory
		ASRS		R5, R7,	#6 ; Arithmetic	Shift Right
		ADDS		R2, #0xF1 ; 'Ò'	; Rd = Op1 + Op2
		LDRB		R1, [R3,#0x1F] ; Load from Memory
		CMP		R4, #0xE7 ; 'Á'	; Set cond. codes on Op1 - Op2
		LDRB		R5, [R4,R6] ; Load from	Memory
		ASRS		R5, R7,	#6 ; Arithmetic	Shift Right
		MOV		R0, R2	; Rd = Op2
		LDRB		R4, [R4,R6] ; Load from	Memory
		LDR		R6, loc_848 ; Load from	Memory
		STR		R3, [R6,#0x14] ; Store to Memory
		CMP		R2, #0x84 ; 'Ñ'	; Set cond. codes on Op1 - Op2
		LDR		R6, loc_850 ; Load from	Memory
		ASRS		R2, R5,	#1 ; Arithmetic	Shift Right
		STRB		R6, [R7,#0x17] ; Store to Memory
		CMP		R1, #0xC8 ; '»'	; Set cond. codes on Op1 - Op2
		LDRB		R1, [R7] ; Load	from Memory
		TST		R6, R1	; Set cond. codes on Op1 & Op2
		LDRB		R3, [R3,R4] ; Load from	Memory
		LDRB		R0, [R7] ; Load	from Memory
		ASRS		R0, R5,	#0xA ; Arithmetic Shift	Right
		SUBS		R7, #0x7D ; '}'	; Rd = Op1 - Op2
		STR		R1, [R7,#0x78] ; Store to Memory
		MOVS		R6, #0xF3 ; 'Û'	; Rd = Op2
		STRB		R7, [R5,R3] ; Store to Memory
		LDRB		R3, [R4,#0x10] ; Load from Memory
		MOVS		R6, #0xF2 ; 'Ú'	; Rd = Op2
		LDR		R6, [R0,#0x3C] ; Load from Memory
		ASRS		R7, R6	; Arithmetic Shift Right
		ASRS		R3, R5,	#0x16 ;	Arithmetic Shift Right
		STRB		R5, [R1,#0xC] ;	Store to Memory
		LDR		R7, [R0,#0x3C] ; Load from Memory
		SUBS		R3, #0x4F ; 'O'	; Rd = Op1 - Op2
		LDRSH		R4, [R4,R4] ; Load from	Memory
		SUBS		R5, #0xDA ; '⁄'	; Rd = Op1 - Op2
		MOVS		R5, #0x3F ; '?'	; Rd = Op2
		ASRS		R1, R1,	#0x1D ;	Arithmetic Shift Right
		SUBS		R5, #0xDB ; '€'	; Rd = Op1 - Op2
		STRB		R6, [R4,#3] ; Store to Memory
		STRB		R4, [R5,#0x11] ; Store to Memory
		ADDS		R0, #0xF7 ; '˜'	; Rd = Op1 + Op2
		STRH		R7, [R3,R4] ; Store to Memory
		STR		R0, [R7,#0x70] ; Store to Memory
		STRH		R6, [R3,R4] ; Store to Memory
		SUBS		R1, R2,	R1 ; Rd	= Op1 -	Op2
		ADDS		R1, R6,	R5 ; Rd	= Op1 +	Op2
		LDRH		R5, [R7,R5] ; Load from	Memory
		LDR		R6, loc_9AA+2 ;	Load from Memory
		ADDS		R0, R6,	R5 ; Rd	= Op1 +	Op2
		SUBS		R7, #0x27 ; '''	; Rd = Op1 - Op2
		STRB		R3, [R1,#0x17] ; Store to Memory
		SUBS		R5, #0x62 ; 'b'	; Rd = Op1 - Op2
		ASRS		R4, R1,	#0xA ; Arithmetic Shift	Right
		STRB		R0, [R7,#0x12] ; Store to Memory
		CMP		R7, #0xAD ; '≠'	; Set cond. codes on Op1 - Op2
		STRB		R1, [R7,#0x12] ; Store to Memory
		STR		R5, [R7,#0x4C] ; Store to Memory
		LDR		R2, [R3,#0x48] ; Load from Memory
		LDR		R7, loc_750 ; Load from	Memory
		MOVS		R7, #0x6D ; 'm'	; Rd = Op2
		STRB		R7, [R5,#0xF] ;	Store to Memory
		SUBS		R0, #0xB1 ; '±'	; Rd = Op1 - Op2
		LDR		R7, loc_75C ; Load from	Memory
		LDRSB		R6, [R3,R4] ; Load from	Memory
		LDRB		R3, [R4,#0x1A] ; Load from Memory
		STR		R1, [R1,#0x24] ; Store to Memory
		ADDS		R5, #0x87 ; 'á'	; Rd = Op1 + Op2
		SUBS		R4, R7,	R5 ; Rd	= Op1 -	Op2
		ADDS		R5, #0x86 ; 'Ü'	; Rd = Op1 + Op2
		LDRB		R3, [R7,#0xB] ;	Load from Memory
		STR		R4, [R4,#0x7C] ; Store to Memory
		LDRB		R2, [R2,R2] ; Load from	Memory
		STR		R5, [R4,#0x7C] ; Store to Memory
		CMP		R3, #0xCA ; ' '	; Set cond. codes on Op1 - Op2
		BICS		R4, R1	; Rd = Op1 & ~Op2
		CMP		R6, #0x6F ; 'o'	; Set cond. codes on Op1 - Op2
		LDR		R7, [R7,R1] ; Load from	Memory
		ASRS		R7, R6,	#0x12 ;	Arithmetic Shift Right
		CMP		R6, #0x6E ; 'n'	; Set cond. codes on Op1 - Op2
		LDR		R4, loc_978 ; Load from	Memory
		LDR		R2, [R4,#0x78] ; Load from Memory
		SUBS		R0, #0xF0 ; ''	; Rd = Op1 - Op2
		STRB		R6, [R3,#6] ; Store to Memory
		BX		R11	; Branch to/from Thumb mode
; End of function sub_5EC

; ---------------------------------------------------------------------------
		SUBS		R4, R7,	#4 ; Rd	= Op1 -	Op2
		LDR		R0, [R3,#0x2C] ; Load from Memory
		BX		R11	; Branch to/from Thumb mode
; ---------------------------------------------------------------------------
		STR		R1, [R3,R6] ; Store to Memory
		ADDS		R2, #0x64 ; 'd'	; Rd = Op1 + Op2
		LDRB		R1, [R0,#0xD] ;	Load from Memory
		LDR		R1, loc_A64 ; Load from	Memory
		STR		R0, [R3,R6] ; Store to Memory
		ADDS		R7, R2,	#3 ; Rd	= Op1 +	Op2

; =============== S U B	R O U T	I N E =======================================


sub_6AC					; CODE XREF: sub_5A4+Ep
		PUSH		{R4,R5,LR} ; Push registers
		MOVS		R4, #3	; Rd = Op2
		MOVS		R3, #0	; Rd = Op2

loc_6B2					; CODE XREF: sub_6AC+18j
		LDRB		R2, [R0] ; Load	from Memory
		RORS		R3, R4	; Rotate Right
		MOVS		R5, #4	; Rd = Op2

loc_6B8					; CODE XREF: sub_6AC+12j
		EORS		R3, R2	; Rd = Op1 ^ Op2
		LSLS		R2, R2,	#8 ; Logical Shift Left
		SUBS		R5, R5,	#1 ; Rd	= Op1 -	Op2
		BGT		loc_6B8	; Branch
		ADDS		R0, R0,	#1 ; Rd	= Op1 +	Op2
		SUBS		R1, R1,	#1 ; Rd	= Op1 -	Op2
		BGT		loc_6B2	; Branch
		MOVS		R0, R3	; Rd = Op2
		LSLS		R0, R0,	#0x1B ;	Logical	Shift Left
		LSRS		R0, R0,	#0x1E ;	Logical	Shift Right
		POP		{R4,R5,PC} ; Pop registers
; End of function sub_6AC


; =============== S U B	R O U T	I N E =======================================


sub_6CE					; CODE XREF: sub_5A4+2Ap
		PUSH		{R4,LR}	; Push registers
		MOVS		R4, #0x14 ; Rd = Op2
		MULS		R4, R0	; Multiply
		MOVS		R3, #0x8000000
		ADDS		R0, R3,	#4 ; Rd	= Op1 +	Op2
		ADDS		R0, R0,	R4 ; Rd	= Op1 +	Op2
		LDR		R1, =0x3000088 ; Load from Memory
		ADDS		R1, R1,	R4 ; Rd	= Op1 +	Op2
		MOVS		R2, #0xA ; Rd =	Op2
		BL		sub_B4C	; Branch with Link
		POP		{R4,PC}	; Pop registers
; End of function sub_6CE


; =============== S U B	R O U T	I N E =======================================


sub_6E8					; CODE XREF: sub_1928+344p
					; sub_301E+14p
		PUSH		{R4-R6,LR} ; Push registers
		LDR		R1, =loc_3290 ;	Load from Memory
		MOVS		R6, #0	; Rd = Op2

loc_6EE					; CODE XREF: sub_6E8+22j
		MOVS		R4, #0xFF ; Rd = Op2
		CMP		R6, #0x98 ; 'ò'	; Set cond. codes on Op1 - Op2
		BNE		loc_6F6	; Branch
		MOVS		R4, #0x7B ; '{'	; Rd = Op2

loc_6F6					; CODE XREF: sub_6E8+Aj
		CMP		R6, #0x9A ; 'ö'	; Set cond. codes on Op1 - Op2
		BNE		loc_6FC	; Branch
		MOVS		R4, #0xFC ; '¸'	; Rd = Op2

loc_6FC					; CODE XREF: sub_6E8+10j
		CMP		R6, #0x9C ; 'ú'	; Set cond. codes on Op1 - Op2
		BGE		loc_70E	; Branch
		LDRB		R2, [R0,R6] ; Load from	Memory
		LDRB		R3, [R1,R6] ; Load from	Memory
		ANDS		R2, R4	; Rd = Op1 & Op2
		ADDS		R6, R6,	#1 ; Rd	= Op1 +	Op2
		CMP		R2, R3	; Set cond. codes on Op1 - Op2
		BEQ		loc_6EE	; Branch
		B		loc_722	; Branch
; ---------------------------------------------------------------------------

loc_70E					; CODE XREF: sub_6E8+16j
		MOVS		R4, #0x19 ; Rd = Op2

loc_710					; CODE XREF: sub_6E8+30j
		LDRB		R2, [R0,R6] ; Load from	Memory
		ADDS		R4, R4,	R2 ; Rd	= Op1 +	Op2
		ADDS		R6, R6,	#1 ; Rd	= Op1 +	Op2
		CMP		R6, #0xBA ; '∫'	; Set cond. codes on Op1 - Op2
		BLT		loc_710	; Branch
		LSLS		R0, R4,	#0x18 ;	Logical	Shift Left
		BNE		loc_722	; Branch
		MOVS		R0, #0	; Rd = Op2
		B		locret_724 ; Branch
; ---------------------------------------------------------------------------

loc_722					; CODE XREF: sub_6E8+24j sub_6E8+34j
		MOVS		R0, #1	; Rd = Op2

locret_724				; CODE XREF: sub_6E8+38j
		POP		{R4-R6,PC} ; Pop registers
; End of function sub_6E8


; =============== S U B	R O U T	I N E =======================================


sub_726					; CODE XREF: sub_1928+62p
		LDR		R3, =0x3003580 ; Load from Memory
		MOVS		R2, #8	; Rd = Op2
		MOVS		R0, #0x7E ; '~'	; Rd = Op2
		NEGS		R0, R0	; Negate

loc_72E					; CODE XREF: sub_726+Ej
		STR		R0, [R3,R2] ; Store to Memory
		ADDS		R2, #0x10 ; Rd = Op1 + Op2
		CMP		R2, #0x78 ; 'x'	; Set cond. codes on Op1 - Op2
		BLT		loc_72E	; Branch
		BX		LR	; Branch to/from Thumb mode
; End of function sub_726


; =============== S U B	R O U T	I N E =======================================


sub_738					; CODE XREF: sub_1928+D8p
		PUSH		{R6,LR}	; Push registers
		SUBS		R3, R0,	#3 ; Rd	= Op1 -	Op2
		LSLS		R6, R3,	#2 ; Logical Shift Left
		MULS		R6, R2	; Multiply
		MOVS		R3, #0x40 ; '@'	; Rd = Op2
		SUBS		R3, R3,	R2 ; Rd	= Op1 -	Op2
		MULS		R6, R3	; Multiply
		SUBS		R0, R0,	#3 ; Rd	= Op1 -	Op2
		MOVS		R3, #0x18 ; Rd = Op2
		MULS		R3, R0	; Multiply
		LSLS		R3, R3,	#8 ; Logical Shift Left
		SUBS		R6, R6,	R3 ; Rd	= Op1 -	Op2

loc_750					; DATA XREF: sub_5EC+7Ar
		STR		R6, [R1] ; Store to Memory
		CMP		R2, #0x2F ; '/'	; Set cond. codes on Op1 - Op2
		BGT		locret_766 ; Branch
		MOVS		R6, #0x1A ; Rd = Op2
		MULS		R6, R2	; Multiply
		SUBS		R2, #0x48 ; 'H'	; Rd = Op1 - Op2

loc_75C					; DATA XREF: sub_5EC+82r
		MULS		R6, R2	; Multiply
		MOVS		R3, #0x6800
		ADDS		R6, R6,	R3 ; Rd	= Op1 +	Op2
		STR		R6, [R1,#4] ; Store to Memory

locret_766				; CODE XREF: sub_738+1Cj
		POP		{R6,PC}	; Pop registers
; End of function sub_738


; =============== S U B	R O U T	I N E =======================================


sub_768					; CODE XREF: sub_1928+EAp
		PUSH		{R4-R7,LR} ; Push registers
		MOVS		R7, R1	; Rd = Op2
		LDMIA		R0!, {R4-R6} ; Load Block from Memory
		ADDS		R6, #0x80 ; 'Ä'	; Rd = Op1 + Op2
		MOVS		R1, R6	; Rd = Op2
		MOVS		R0, #0x800000
		BL		sub_3A4	; Branch with Link
		LSLS		R3, R6,	#1 ; Logical Shift Left
		STRH		R3, [R7,#0xC] ;	Store to Memory
		STRH		R3, [R7,#0xE] ;	Store to Memory
		MOVS		R1, #0x3F80
		STR		R1, [R7] ; Store to Memory
		STR		R1, [R7,#4] ; Store to Memory
		ASRS		R1, R4,	#8 ; Arithmetic	Shift Right
		MULS		R1, R0	; Multiply
		ASRS		R1, R1,	#0x10 ;	Arithmetic Shift Right
		ADDS		R1, #0x78 ; 'x'	; Rd = Op1 + Op2
		STRH		R1, [R7,#8] ; Store to Memory
		ASRS		R1, R5,	#8 ; Arithmetic	Shift Right
		MULS		R1, R0	; Multiply
		ASRS		R1, R1,	#0x10 ;	Arithmetic Shift Right
		ADDS		R1, #0x50 ; 'P'	; Rd = Op1 + Op2
		STRH		R1, [R7,#0xA] ;	Store to Memory
		POP		{R4-R7,PC} ; Pop registers
; End of function sub_768


; =============== S U B	R O U T	I N E =======================================


sub_79E					; CODE XREF: sub_1928-167Ep
					; sub_874+B6p

arg_0		=  0
arg_4		=  4

		PUSH		{R4-R7,LR} ; Push registers
		LDR		R4, [SP,#0x14+arg_0] ; Load from Memory
		LDR		R5, [SP,#0x14+arg_4] ; Load from Memory
		MOVS		R7, #0	; Rd = Op2

loc_7A6					; CODE XREF: sub_79E+1Aj
		MOVS		R6, #0	; Rd = Op2

loc_7A8					; CODE XREF: sub_79E+12j
		STRH		R0, [R4,R6] ; Store to Memory
		ADDS		R0, R0,	R1 ; Rd	= Op1 +	Op2
		ADDS		R6, R6,	#2 ; Rd	= Op1 +	Op2
		CMP		R6, R2	; Set cond. codes on Op1 - Op2
		BLT		loc_7A8	; Branch
		ADDS		R4, R4,	R5 ; Rd	= Op1 +	Op2
		ADDS		R7, R7,	#1 ; Rd	= Op1 +	Op2
		CMP		R7, R3	; Set cond. codes on Op1 - Op2
		BLT		loc_7A6	; Branch
		POP		{R4-R7,PC} ; Pop registers
; End of function sub_79E


; =============== S U B	R O U T	I N E =======================================


sub_7BC					; CODE XREF: sub_1928+196p
					; sub_1928+1DEp ...
		PUSH		{R4-R7,LR} ; Push registers
		MOVS		R7, #2	; Rd = Op2

loc_7C0					; CODE XREF: sub_7BC+40j
		LDR		R4, =dword_3200	; Load from Memory
		LSLS		R3, R0,	#1 ; Logical Shift Left
		ADDS		R3, R3,	R0 ; Rd	= Op1 +	Op2
		ADDS		R3, R3,	R7 ; Rd	= Op1 +	Op2
		LSLS		R3, R3,	#2 ; Logical Shift Left
		ADDS		R3, R3,	R4 ; Rd	= Op1 +	Op2
		LDR		R5, [R3,#4] ; Load from	Memory
		LDR		R6, [R3,#0x10] ; Load from Memory
		MOVS		R3, #0x20 ; ' '	; Rd = Op2
		SUBS		R3, R3,	R1 ; Rd	= Op1 -	Op2
		MULS		R3, R5	; Multiply
		MULS		R6, R1	; Multiply
		ADDS		R3, R3,	R6 ; Rd	= Op1 +	Op2
		LSRS		R4, R3,	#5 ; Logical Shift Right
		MOVS		R6, #0x1F ; Rd = Op2
		LSLS		R3, R6,	#0x14 ;	Logical	Shift Left
		ANDS		R3, R4	; Rd = Op1 & Op2
		LSRS		R5, R3,	#0xA ; Logical Shift Right
		LSLS		R3, R6,	#0xA ; Logical Shift Left
		ANDS		R3, R4	; Rd = Op1 & Op2
		LSRS		R3, R3,	#5 ; Logical Shift Right
		ORRS		R3, R5	; Rd = Op1 | Op2
		ANDS		R4, R6	; Rd = Op1 & Op2
		ORRS		R4, R3	; Rd = Op1 | Op2
		ADDS		R3, R2,	R7 ; Rd	= Op1 +	Op2
		LSLS		R6, R3,	#1 ; Logical Shift Left
		LDR		R3, =0x5000200 ; Load from Memory
		ADDS		R3, R6,	R3 ; Rd	= Op1 +	Op2
		STRH		R4, [R3] ; Store to Memory
		SUBS		R7, R7,	#1 ; Rd	= Op1 -	Op2
		BGE		loc_7C0	; Branch
		POP		{R4-R7,PC} ; Pop registers
; End of function sub_7BC


; =============== S U B	R O U T	I N E =======================================


sub_800					; CODE XREF: sub_800+2Aj sub_1928+22p
		MOVS		R1, #0x200
		MOV		R12, R1	; Rd = Op2
		LDR		R3, =0x4000088 ; Load from Memory
		LDRH		R2, [R3] ; Load	from Memory
		LDR		R3, =0x4000088 ; Load from Memory
		LSLS		R1, R2,	#0x16 ;	Logical	Shift Left
		LSRS		R1, R1,	#0x16 ;	Logical	Shift Right
		CMP		R0, #0	; Set cond. codes on Op1 - Op2
		BEQ		loc_81C	; Branch
		CMP		R1, R12	; Set cond. codes on Op1 - Op2
		BGE		locret_82C ; Branch
		ADDS		R2, R2,	#2 ; Rd	= Op1 +	Op2
		B		loc_822	; Branch
; ---------------------------------------------------------------------------

loc_81C					; CODE XREF: sub_800+12j
		CMP		R1, #0	; Set cond. codes on Op1 - Op2
		BLE		locret_82C ; Branch
		SUBS		R2, R2,	#2 ; Rd	= Op1 -	Op2

loc_822					; CODE XREF: sub_800+1Aj
		STRH		R2, [R3] ; Store to Memory
		MOVS		R2, #8	; Rd = Op2

loc_826					; CODE XREF: sub_800+28j
		SUBS		R2, R2,	#1 ; Rd	= Op1 -	Op2
		BPL		loc_826	; Branch
		B		sub_800	; Branch
; ---------------------------------------------------------------------------

locret_82C				; CODE XREF: sub_800+16j sub_800+1Ej
		BX		LR	; Branch to/from Thumb mode
; End of function sub_800


; =============== S U B	R O U T	I N E =======================================


sub_82E					; CODE XREF: sub_874:loc_8B0p
		LDR		R1, =0x3000564 ; Load from Memory
		MOVS		R2, #0x370
		LDR		R0, =unk_332C ;	Load from Memory
		B		loc_858	; Branch
; End of function sub_82E


; =============== S U B	R O U T	I N E =======================================


sub_838					; CODE XREF: sub_94A+6p
		LDR		R1, =0x3000564 ; Load from Memory
		MOVS		R2, #0x24 ; '$' ; Rd = Op2
		LDR		R0, =unk_326C ;	Load from Memory
		B		loc_858	; Branch
; End of function sub_838


; =============== S U B	R O U T	I N E =======================================


sub_840					; CODE XREF: sub_874+CEp
		MOVS		R1, #0x7000000
		MOVS		R2, #0x50 ; 'P'	; Rd = Op2
		LDR		R0, =unk_369C ;	Load from Memory

loc_848					; DATA XREF: sub_5EC+18r
		B		loc_858	; Branch
; End of function sub_840


; =============== S U B	R O U T	I N E =======================================


sub_84A					; CODE XREF: sub_874+C4p sub_874+CAp
		LDR		R1, =0x5000038 ; Load from Memory
		CMP		R0, #0	; Set cond. codes on Op1 - Op2
		BEQ		loc_854	; Branch

loc_850					; DATA XREF: sub_5EC+1Er
		LSLS		R0, R0,	#9 ; Logical Shift Left
		ADDS		R1, R1,	R0 ; Rd	= Op1 +	Op2

loc_854					; CODE XREF: sub_84A+4j
		MOVS		R2, #8	; Rd = Op2
		LDR		R0, =unk_3264 ;	Load from Memory

loc_858					; CODE XREF: sub_82E+8j sub_838+6j ...
		PUSH		{R4,R5,LR} ; Push registers
		ADDS		R2, R2,	R1 ; Rd	= Op1 +	Op2

loc_85C					; CODE XREF: sub_84A+26j
		LDR		R3, =dword_3200	; Load from Memory
		CMP		R0, R3	; Set cond. codes on Op1 - Op2
		BLT		locret_872 ; Branch
		MOVS		R3, #0x4000
		CMP		R0, R3	; Set cond. codes on Op1 - Op2
		BGE		locret_872 ; Branch
		LDMIA		R0!, {R3} ; Load Block from Memory
		STMIA		R1!, {R3} ; Store Block	to Memory
		CMP		R1, R2	; Set cond. codes on Op1 - Op2
		BLT		loc_85C	; Branch

locret_872				; CODE XREF: sub_84A+16j sub_84A+1Ej
		POP		{R4,R5,PC} ; Pop registers
; End of function sub_84A


; =============== S U B	R O U T	I N E =======================================


sub_874					; CODE XREF: sub_1928:loc_1962p

var_28		= -0x28
var_24		= -0x24
var_20		= -0x20
var_1C		= -0x1C
var_18		= -0x18

		PUSH		{R4-R7,LR} ; Push registers
		SUB		SP, SP,	#0x14 ;	Rd = Op1 - Op2
		LDR		R1, =dword_30C0	; Load from Memory
		LDMIA		R1!, {R5,R7} ; Load Block from Memory
		ADD		R0, SP,	#0x28+var_20 ; Rd = Op1	+ Op2
		STMIA		R0!, {R5,R7} ; Store Block to Memory
		LDR		R0, =0xBFE1FE0 ; Load from Memory
		LDR		R3, =0x80000B4 ; Load from Memory
		LDRB		R3, [R3] ; Load	from Memory
		LSRS		R3, R3,	#7 ; Logical Shift Right
		BNE		loc_88C	; Branch
		LDR		R0, =0xBFFFFE0 ; Load from Memory

loc_88C					; CODE XREF: sub_874+14j
		LDR		R1, =0x3000564 ; Load from Memory
		MOVS		R2, #0xA ; Rd =	Op2
		BL		sub_B4C	; Branch with Link
		BL		sub_5A4	; Branch with Link
		LDR		R1, =0x3000088 ; Load from Memory
		MOVS		R3, R1	; Rd = Op2
		ADDS		R3, #0xAE ; 'Æ'	; Rd = Op1 + Op2
		LDRB		R0, [R3] ; Load	from Memory
		CMP		R0, #0x96 ; 'ñ'	; Set cond. codes on Op1 - Op2
		BEQ		loc_8B0	; Branch
		LDR		R2, =0x85000027	; Load from Memory
		ASRS		R3, R2,	#0x1F ;	Arithmetic Shift Right
		STR		R3, [SP,#0x28+var_18] ;	Store to Memory
		ADD		R0, SP,	#0x28+var_18 ; Rd = Op1	+ Op2
		BL		sub_B4C	; Branch with Link

loc_8B0					; CODE XREF: sub_874+2Ej
		BL		sub_82E	; Branch with Link
		LDR		R0, =0x3000564 ; Load from Memory
		LDR		R1, =0x3001564 ; Load from Memory
		BL		sub_1010 ; Branch with Link
		LDR		R0, =0x3001564 ; Load from Memory
		LDR		R1, =0x3000564 ; Load from Memory
		BL		sub_10F8 ; Branch with Link
		MOVS		R7, #0	; Rd = Op2

loc_8C6					; CODE XREF: sub_874+6Cj
		LSLS		R0, R7,	#2 ; Logical Shift Left
		STR		R0, [SP,#0x28+var_1C] ;	Store to Memory
		LDR		R2, =0x3000564 ; Load from Memory
		LSLS		R0, R7,	#8 ; Logical Shift Left
		ADDS		R0, R0,	R2 ; Rd	= Op1 +	Op2
		LDR		R3, =0x6000040 ; Load from Memory
		LSLS		R1, R7,	#0xA ; Logical Shift Left
		ADDS		R1, R1,	R3 ; Rd	= Op1 +	Op2
		ADD		R2, SP,	#0x28+var_20 ; Rd = Op1	+ Op2
		BL		sub_F5C	; Branch with Link
		ADDS		R7, R7,	#1 ; Rd	= Op1 +	Op2
		CMP		R7, #8	; Set cond. codes on Op1 - Op2
		BLT		loc_8C6	; Branch
		MOVS		R7, #0xE ; Rd =	Op2

loc_8E4					; CODE XREF: sub_874+96j
		MOVS		R4, #3	; Rd = Op2

loc_8E6					; CODE XREF: sub_874+92j
		LDR		R3, =0x6000040 ; Load from Memory
		LSLS		R0, R7,	#1 ; Logical Shift Left
		ADDS		R0, R0,	R4 ; Rd	= Op1 +	Op2
		LSLS		R0, R0,	#8 ; Logical Shift Left
		ADDS		R0, R0,	R3 ; Rd	= Op1 +	Op2
		LDR		R3, =asc_30B0 ;	"\"(_"
		LDRH		R2, [R3,R7] ; Load from	Memory
		LDR		R3, =0x6010000 ; Load from Memory
		LSLS		R1, R4,	#4 ; Logical Shift Left
		ADDS		R1, R1,	R2 ; Rd	= Op1 +	Op2
		LSLS		R1, R1,	#6 ; Logical Shift Left
		ADDS		R1, R1,	R3 ; Rd	= Op1 +	Op2
		MOVS		R2, #0x80 ; 'Ä'	; Rd = Op2
		BL		sub_B4C	; Branch with Link
		SUBS		R4, R4,	#1 ; Rd	= Op1 -	Op2
		BGE		loc_8E6	; Branch
		SUBS		R7, R7,	#2 ; Rd	= Op1 -	Op2
		BGE		loc_8E4	; Branch
		LDR		R0, =0x3000088 ; Load from Memory
		BL		sub_94A	; Branch with Link
		BL		sub_974	; Branch with Link
		BL		sub_982	; Branch with Link
		MOVS		R2, #0x20 ; ' '	; Rd = Op2
		STR		R2, [SP,#0x28+var_24] ;	Store to Memory
		LDR		R1, =0x600B880 ; Load from Memory
		STR		R1, [SP,#0x28+var_28] ;	Store to Memory
		MOVS		R3, #4	; Rd = Op2
		MOVS		R2, #4	; Rd = Op2
		LDR		R1, =0x202 ; Load from Memory
		LDR		R0, =0x7271 ; Load from	Memory
		BL		sub_79E	; Branch with Link
		MOVS		R1, #0x5000000
		MVNS		R0, R1	; Rd = ~Op2
		STRH		R0, [R1] ; Store to Memory
		MOVS		R0, #0	; Rd = Op2
		BL		sub_84A	; Branch with Link
		MOVS		R0, #1	; Rd = Op2
		BL		sub_84A	; Branch with Link
		BL		sub_840	; Branch with Link
		ADD		SP, SP,	#0x14 ;	Rd = Op1 + Op2
		POP		{R4-R7,PC} ; Pop registers
; End of function sub_874


; =============== S U B	R O U T	I N E =======================================


sub_94A					; CODE XREF: sub_874+9Ap sub_2ABC+57Ep

var_18		= -0x18

		PUSH		{R0,R4-R7,LR} ;	Push registers
		LDR		R4, =0x3007FF7 ; Load from Memory
		STRB		R0, [R4] ; Store to Memory
		BL		sub_838	; Branch with Link
		LDR		R0, [SP,#0x18+var_18] ;	Load from Memory
		LDR		R1, =0x3000588 ; Load from Memory
		MOVS		R2, #0x4E ; 'N'	; Rd = Op2
		BL		sub_B4C	; Branch with Link
		LDR		R0, =0x3000564 ; Load from Memory
		LDR		R1, =0x3001564 ; Load from Memory
		BL		sub_1010 ; Branch with Link
		LDR		R0, =0x3001564 ; Load from Memory
		LDR		R2, =0xD082 ; Load from	Memory
		STR		R2, [R0] ; Store to Memory
		LDR		R1, =0x3000564 ; Load from Memory
		BL		sub_1398 ; Branch with Link
		POP		{R0,R4-R7,PC} ;	Pop registers
; End of function sub_94A


; =============== S U B	R O U T	I N E =======================================


sub_974					; CODE XREF: sub_874+9Ep sub_2B34+51Cp
		PUSH		{R0,R4-R7,LR} ;	Push registers
		LDR		R0, =0x3000564 ; Load from Memory

loc_978					; DATA XREF: sub_5EC+A4r
		LDR		R1, =0x3001564 ; Load from Memory
		LDR		R2, =unk_30C8 ;	Load from Memory
		BL		sub_F5C	; Branch with Link
		POP		{R0,R4-R7,PC} ;	Pop registers
; End of function sub_974


; =============== S U B	R O U T	I N E =======================================


sub_982					; CODE XREF: sub_874+A2p sub_2B34+526p

; FUNCTION CHUNK AT 00000BC0 SIZE 0000006C BYTES

		PUSH		{R0,R4-R7,LR} ;	Push registers
		LDR		R6, =0x3001564 ; Load from Memory
		LDR		R4, =0x60024C0 ; Load from Memory
		MOVS		R7, #2	; Rd = Op2

loc_98A					; CODE XREF: sub_982+16j
		MOVS		R5, #0x34 ; '4'	; Rd = Op2

loc_98C					; CODE XREF: sub_982+10j
		LDMIA		R6!, {R0-R3} ; Load Block from Memory
		STMIA		R4!, {R0-R3} ; Store Block to Memory
		SUBS		R5, R5,	#1 ; Rd	= Op1 -	Op2
		BGT		loc_98C	; Branch
		ADDS		R4, #0xC0 ; '¿'	; Rd = Op1 + Op2
		SUBS		R7, R7,	#1 ; Rd	= Op1 -	Op2
		BGT		loc_98A	; Branch
		MOVS		R7, #3	; Rd = Op2

loc_99C					; CODE XREF: ROM:000009B0j
		LSLS		R3, R7,	#0xA ; Logical Shift Left
		LDR		R0, =0x6002040 ; Load from Memory
		ADDS		R0, R0,	R3 ; Rd	= Op1 +	Op2
		LDR		R1, =0x6016800 ; Load from Memory
		ADDS		R1, R1,	R3 ; Rd	= Op1 +	Op2
		MOVS		R2, #0x100

loc_9AA					; DATA XREF: sub_5EC+64r
		BL		loc_BC0	; Branch with Link
; End of function sub_982

; ---------------------------------------------------------------------------
		SUBS		R7, R7,	#1 ; Rd	= Op1 -	Op2
		BGT		loc_99C	; Branch
		MOV		R0, SP	; Rd = Op2
		STR		R7, [R0] ; Store to Memory
		LDR		R1, =0x3000564 ; Load from Memory
		MOVS		R2, #0x800
		BL		loc_AB2	; Branch with Link
; ---------------------------------------------------------------------------
		POP		{R0,R4-R7,PC} ;	Pop registers

; =============== S U B	R O U T	I N E =======================================


sub_9C2					; CODE XREF: sub_1928+16p
					; sub_1928:loc_1DA6p

var_18		= -0x18

		PUSH		{R4-R7,LR} ; Push registers
		SUB		SP, SP,	#4 ; Rd	= Op1 -	Op2
		MOVS		R7, R0	; Rd = Op2
		LDR		R5, =0x85000000	; Load from Memory
		MOVS		R4, #0x4000000
		MOVS		R3, #0	; Rd = Op2
		STR		R3, [SP,#0x18+var_18] ;	Store to Memory
		MOVS		R1, #0x80 ; 'Ä'	; Rd = Op2
		STRH		R1, [R4] ; Store to Memory
		MOVS		R6, #0x80 ; 'Ä'	; Rd = Op2
		TST		R6, R7	; Set cond. codes on Op1 & Op2
		BEQ		loc_A18	; Branch
		LSRS		R1, R4,	#0x11 ;	Logical	Shift Right
		ADDS		R1, R1,	R4 ; Rd	= Op1 +	Op2
		MOVS		R2, #8	; Rd = Op2
		BL		sub_AAC	; Branch with Link
		SUBS		R1, #0x20 ; ' '	; Rd = Op1 - Op2
		MVNS		R0, R2	; Rd = ~Op2
		STRH		R0, [R1,#2] ; Store to Memory
		LSRS		R1, R4,	#0x10 ;	Logical	Shift Right
		ADDS		R1, R1,	R4 ; Rd	= Op1 +	Op2
		STRB		R0, [R1,#0x10] ; Store to Memory
		ADDS		R1, R4,	#4 ; Rd	= Op1 +	Op2
		MOVS		R2, #8	; Rd = Op2
		BL		sub_AAC	; Branch with Link
		SUBS		R1, R1,	#4 ; Rd	= Op1 -	Op2
		MOVS		R2, #0x10 ; Rd = Op2
		BL		sub_AAC	; Branch with Link
		MOVS		R1, #0xB0 ; '∞'	; Rd = Op2
		ADDS		R1, R1,	R4 ; Rd	= Op1 +	Op2
		MOVS		R2, #0x18 ; Rd = Op2
		BL		sub_AAC	; Branch with Link
		STR		R2, [R1,#0x20] ; Store to Memory
		LSRS		R0, R4,	#0x12 ;	Logical	Shift Right
		STRH		R0, [R4,#0x20] ; Store to Memory
		STRH		R0, [R4,#0x30] ; Store to Memory
		STRH		R0, [R4,#0x26] ; Store to Memory
		STRH		R0, [R4,#0x36] ; Store to Memory

loc_A18					; CODE XREF: sub_9C2+18j
		MOVS		R6, #0x20 ; ' '	; Rd = Op2
		LDR		R1, =0x4000110 ; Load from Memory
		MOVS		R2, #8	; Rd = Op2
		BL		sub_AAC	; Branch with Link
		LSRS		R2, R4,	#0xB ; Logical Shift Right
		STRH		R2, [R1,#4] ; Store to Memory
		ADDS		R1, #0x10 ; Rd = Op1 + Op2
		MOVS		R2, #7	; Rd = Op2
		STRB		R2, [R1] ; Store to Memory
		BL		sub_AAC	; Branch with Link
		MOVS		R6, #0x40 ; '@'	; Rd = Op2
		TST		R6, R7	; Set cond. codes on Op1 & Op2
		BEQ		loc_A6A	; Branch
		MOVS		R1, #0x80 ; 'Ä'	; Rd = Op2
		ADDS		R1, R1,	R4 ; Rd	= Op1 +	Op2
		LDR		R0, =0x880E0000	; Load from Memory
		STRB		R0, [R1,#4] ; Store to Memory
		STRB		R1, [R1,#4] ; Store to Memory
		STR		R0, [R1] ; Store to Memory
		LDRH		R0, [R1,#8] ; Load from	Memory
		LSLS		R0, R0,	#0x16 ;	Logical	Shift Left
		LSRS		R0, R0,	#0x16 ;	Logical	Shift Right
		STRH		R0, [R1,#8] ; Store to Memory
		SUBS		R1, #0x10 ; Rd = Op1 - Op2
		STRB		R1, [R1] ; Store to Memory
		ADDS		R1, #0x20 ; ' '	; Rd = Op1 + Op2
		MOVS		R2, #8	; Rd = Op2
		BL		sub_AAC	; Branch with Link
		SUBS		R1, #0x40 ; '@'	; Rd = Op1 - Op2
		STRB		R2, [R1] ; Store to Memory
		ADDS		R1, #0x20 ; ' '	; Rd = Op1 + Op2
		MOVS		R2, #8	; Rd = Op2
		BL		sub_AAC	; Branch with Link
		MOVS		R2, #0	; Rd = Op2

loc_A64					; DATA XREF: ROM:000006A6r
		MOVS		R1, #0x80 ; 'Ä'	; Rd = Op2
		ADDS		R1, R1,	R4 ; Rd	= Op1 +	Op2
		STRB		R2, [R1,#4] ; Store to Memory

loc_A6A					; CODE XREF: sub_9C2+72j
		MOVS		R6, #1	; Rd = Op2
		LSRS		R1, R4,	#1 ; Logical Shift Right
		LSRS		R2, R4,	#0xA ; Logical Shift Right
		BL		sub_AAC	; Branch with Link
		MOVS		R6, #8	; Rd = Op2
		MOVS		R1, #0x6000000
		LSRS		R2, R1,	#0xC ; Logical Shift Right
		BL		sub_AAC	; Branch with Link
		MOVS		R6, #0x10 ; Rd = Op2
		MOVS		R1, #0x7000000
		LSRS		R2, R4,	#0x12 ;	Logical	Shift Right
		BL		sub_AAC	; Branch with Link
		MOVS		R6, #4	; Rd = Op2
		MOVS		R1, #0x5000000
		LSRS		R2, R4,	#0x12 ;	Logical	Shift Right
		BL		sub_AAC	; Branch with Link
		MOVS		R6, #2	; Rd = Op2
		MOVS		R1, #0x3000000
		LDR		R2, =0x1F80 ; Load from	Memory
		BL		sub_AAC	; Branch with Link
		ADD		SP, SP,	#4 ; Rd	= Op1 +	Op2
		POP		{R4-R7}	; Pop registers
		POP		{R3}	; Pop registers
		BX		R3	; Branch to/from Thumb mode
; End of function sub_9C2


; =============== S U B	R O U T	I N E =======================================


sub_AAC					; CODE XREF: sub_9C2+20p sub_9C2+34p ...
		TST		R6, R7	; Set cond. codes on Op1 & Op2
		BNE		loc_AB2	; Branch
		BX		LR	; Branch to/from Thumb mode
; ---------------------------------------------------------------------------

loc_AB2					; CODE XREF: ROM:000009BCj sub_AAC+2j
		MOV		R0, SP	; Rd = Op2
		ORRS		R2, R5	; Rd = Op1 | Op2
		B		loc_BC0	; Branch
; End of function sub_AAC

; ---------------------------------------------------------------------------
off_AB8		DCD sub_2D70+1		; DATA XREF: ROM:00000310r
off_ABC		DCD loc_210C+1		; DATA XREF: ROM:00000318r
dword_AC0	DCD 0x3000088		; DATA XREF: sub_6CE+Er sub_874+24r ...
off_AC4		DCD loc_3290		; DATA XREF: sub_6E8+2r
dword_AC8	DCD 0x3003580		; DATA XREF: sub_726r
off_ACC		DCD dword_3200		; DATA XREF: sub_7BC:loc_7C0r
					; sub_84A:loc_85Cr
dword_AD0	DCD 0x5000200		; DATA XREF: sub_7BC+38r
dword_AD4	DCD 0x4000088		; DATA XREF: sub_800+6r sub_800+Ar
dword_AD8	DCD 0x3000564		; DATA XREF: sub_82Er sub_838r ...
off_ADC		DCD unk_332C		; DATA XREF: sub_82E+6r
off_AE0		DCD unk_326C		; DATA XREF: sub_838+4r
off_AE4		DCD unk_369C		; DATA XREF: sub_840+6r
dword_AE8	DCD 0x5000038		; DATA XREF: sub_84Ar
off_AEC		DCD unk_3264		; DATA XREF: sub_84A+Cr
off_AF0		DCD dword_30C0		; DATA XREF: sub_874+4r
dword_AF4	DCD 0xBFE1FE0		; DATA XREF: sub_874+Cr
dword_AF8	DCD 0x80000B4		; DATA XREF: sub_874+Er
dword_AFC	DCD 0xBFFFFE0		; DATA XREF: sub_874+16r
dword_B00	DCD 0x85000027		; DATA XREF: sub_874+30r
dword_B04	DCD 0x3001564		; DATA XREF: sub_874+42r sub_874+48r ...
dword_B08	DCD 0x6000040		; DATA XREF: sub_874+5Cr
					; sub_874:loc_8E6r
off_B0C		DCD asc_30B0		; DATA XREF: sub_874+7Cr
					; "\"(_"
dword_B10	DCD 0x6010000		; DATA XREF: sub_874+80r
dword_B14	DCD 0x600B880		; DATA XREF: sub_874+AAr
dword_B18	DCD 0x202		; DATA XREF: sub_874+B2r
dword_B1C	DCD 0x7271		; DATA XREF: sub_874+B4r
dword_B20	DCD 0x3007FF7		; DATA XREF: sub_94A+2r
dword_B24	DCD 0x3000588		; DATA XREF: sub_94A+Cr
dword_B28	DCD 0xD082		; DATA XREF: sub_94A+1Er
off_B2C		DCD unk_30C8		; DATA XREF: sub_974+6r
dword_B30	DCD 0x60024C0		; DATA XREF: sub_982+4r
dword_B34	DCD 0x6002040		; DATA XREF: sub_982+1Cr
dword_B38	DCD 0x6016800		; DATA XREF: sub_982+20r
dword_B3C	DCD 0x85000000		; DATA XREF: sub_9C2+6r
dword_B40	DCD 0x4000110		; DATA XREF: sub_9C2+58r
dword_B44	DCD 0x880E0000		; DATA XREF: sub_9C2+78r
dword_B48	DCD 0x1F80		; DATA XREF: sub_9C2+DCr

; =============== S U B	R O U T	I N E =======================================


sub_B4C					; CODE XREF: sub_6CE+14p sub_874+1Cp ...
		PUSH		{R4,R5,LR} ; Push registers
		LSLS		R4, R2,	#0xB ; Logical Shift Left
		LSRS		R4, R4,	#9 ; Logical Shift Right
		BL		sub_B9C	; Branch with Link
		BEQ		loc_B96	; Branch
		MOVS		R5, #0	; Rd = Op2
		LSRS		R3, R2,	#0x1B ;	Logical	Shift Right
		BCC		loc_B78	; Branch
		ADDS		R5, R1,	R4 ; Rd	= Op1 +	Op2
		LSRS		R3, R2,	#0x19 ;	Logical	Shift Right
		BCC		loc_B6E	; Branch
		LDMIA		R0!, {R3} ; Load Block from Memory

loc_B66					; CODE XREF: sub_B4C+20j
		CMP		R1, R5	; Set cond. codes on Op1 - Op2
		BGE		loc_B96	; Branch
		STMIA		R1!, {R3} ; Store Block	to Memory
		B		loc_B66	; Branch
; ---------------------------------------------------------------------------

loc_B6E					; CODE XREF: sub_B4C+16j sub_B4C+2Aj
		CMP		R1, R5	; Set cond. codes on Op1 - Op2
		BGE		loc_B96	; Branch
		LDMIA		R0!, {R3} ; Load Block from Memory
		STMIA		R1!, {R3} ; Store Block	to Memory
		B		loc_B6E	; Branch
; ---------------------------------------------------------------------------

loc_B78					; CODE XREF: sub_B4C+10j
		LSRS		R4, R4,	#1 ; Logical Shift Right
		LSRS		R3, R2,	#0x19 ;	Logical	Shift Right
		BCC		loc_B8A	; Branch
		LDRH		R3, [R0] ; Load	from Memory

loc_B80					; CODE XREF: sub_B4C+3Cj
		CMP		R5, R4	; Set cond. codes on Op1 - Op2
		BGE		loc_B96	; Branch
		STRH		R3, [R1,R5] ; Store to Memory
		ADDS		R5, R5,	#2 ; Rd	= Op1 +	Op2
		B		loc_B80	; Branch
; ---------------------------------------------------------------------------

loc_B8A					; CODE XREF: sub_B4C+30j sub_B4C+48j
		CMP		R5, R4	; Set cond. codes on Op1 - Op2
		BGE		loc_B96	; Branch
		LDRH		R3, [R0,R5] ; Load from	Memory
		STRH		R3, [R1,R5] ; Store to Memory
		ADDS		R5, R5,	#2 ; Rd	= Op1 +	Op2
		B		loc_B8A	; Branch
; ---------------------------------------------------------------------------

loc_B96					; CODE XREF: sub_B4C+Aj sub_B4C+1Cj ...
		POP		{R4,R5}	; Pop registers
		POP		{R3}	; Pop registers
		BX		R3	; Branch to/from Thumb mode
; End of function sub_B4C


; =============== S U B	R O U T	I N E =======================================


sub_B9C					; CODE XREF: sub_B4C+6p ROM:00001280p	...
		ADR		R3, sub_BA4 ; Load address
		MOV		R12, R4	; Rd = Op2
		BX		R3 ; sub_BA4 ; Branch to/from Thumb mode
; End of function sub_B9C

; ---------------------------------------------------------------------------
		ALIGN 4
		CODE32

; =============== S U B	R O U T	I N E =======================================


sub_BA4					; CODE XREF: sub_B9C+4j sub_982+24Ep ...
		CMP		R12, #0	; Set cond. codes on Op1 - Op2
		BEQ		locret_BBC ; Branch
		BIC		R12, R12, #0xFE000000 ;	Rd = Op1 & ~Op2
		ADD		R12, R0, R12 ; Rd = Op1	+ Op2
		TST		R0, #0xE000000 ; Set cond. codes on Op1	& Op2
		TSTNE		R12, #0xE000000	; Set cond. codes on Op1 & Op2

locret_BBC				; CODE XREF: sub_BA4+4j
		BX		LR	; Branch to/from Thumb mode
; End of function sub_BA4

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_982
		CODE16

loc_BC0					; CODE XREF: sub_982:loc_9AAj
					; sub_AAC+Aj
		MOV		R3, PC	; Rd = Op2
		BX		R3 ; loc_BC4 ; Branch to/from Thumb mode
; ---------------------------------------------------------------------------
		CODE32

loc_BC4					; CODE XREF: sub_982+240j
		STMFD		SP!, {R4-R10,LR} ; Store Block to Memory
		MOV		R10, R2,LSL#11 ; Rd = Op2
		MOVS		R12, R10,LSR#9 ; Rd = Op2
		BL		sub_BA4	; Branch with Link
		BEQ		loc_C24	; Branch
		ADD		R10, R1, R10,LSR#9 ; Rd	= Op1 +	Op2
		MOVS		R2, R2,LSR#25 ;	Rd = Op2
		BCC		loc_C14	; Branch
		LDR		R2, [R0] ; Load	from Memory
		MOV		R3, R2	; Rd = Op2
		MOV		R4, R2	; Rd = Op2
		MOV		R5, R2	; Rd = Op2
		MOV		R6, R2	; Rd = Op2
		MOV		R7, R2	; Rd = Op2
		MOV		R8, R2	; Rd = Op2
		MOV		R9, R2	; Rd = Op2

loc_C04					; CODE XREF: sub_982+28Aj
		CMP		R1, R10	; Set cond. codes on Op1 - Op2
		STMLTIA		R1!, {R2-R9} ; Store Block to Memory
		BLT		loc_C04	; Branch
		B		loc_C24	; Branch
; ---------------------------------------------------------------------------

loc_C14					; CODE XREF: sub_982+25Ej sub_982+29Ej
		CMP		R1, R10	; Set cond. codes on Op1 - Op2
		LDMLTIA		R0!, {R2-R9} ; Load Block from Memory
		STMLTIA		R1!, {R2-R9} ; Store Block to Memory
		BLT		loc_C14	; Branch

loc_C24					; CODE XREF: sub_982+252j sub_982+28Ej
		LDMFD		SP!, {R4-R10,LR} ; Load	Block from Memory
		BX		LR	; Branch to/from Thumb mode
; END OF FUNCTION CHUNK	FOR sub_982
; ---------------------------------------------------------------------------
		STMFD		SP!, {R4-R11} ;	Store Block to Memory

loc_C30					; CODE XREF: ROM:00000CD4j
		SUBS		R2, R2,	#1 ; Rd	= Op1 -	Op2
		BLT		loc_CD8	; Branch
		LDRH		R3, [R0,#0x10] ; Load from Memory
		MOV		R3, R3,LSR#8 ; Rd = Op2
		ADR		R12, dword_D5C ; Load address
		ADD		R8, R3,	#0x40 ;	Rd = Op1 + Op2
		AND		R8, R8,	#0xFF ;	Rd = Op1 & Op2
		MOV		R8, R8,LSL#1 ; Rd = Op2
		LDRSH		R11, [R8,R12] ;	Load from Memory
		MOV		R8, R3,LSL#1 ; Rd = Op2
		LDRSH		R12, [R8,R12] ;	Load from Memory
		LDRSH		R9, [R0,#0xC] ;	Load from Memory
		LDRSH		R10, [R0,#0xE] ; Load from Memory
		MUL		R8, R11, R9 ; Multiply
		MOV		R3, R8,ASR#14 ;	Rd = Op2
		MUL		R8, R12, R9 ; Multiply
		MOV		R4, R8,ASR#14 ;	Rd = Op2
		MUL		R8, R12, R10 ; Multiply
		MOV		R5, R8,ASR#14 ;	Rd = Op2
		MUL		R8, R11, R10 ; Multiply
		MOV		R6, R8,ASR#14 ;	Rd = Op2
		LDMIA		R0, {R9,R10,R12} ; Load	Block from Memory
		MOV		R11, R12,LSL#16	; Rd = Op2
		MOV		R11, R11,ASR#16	; Rd = Op2
		MOV		R12, R12,ASR#16	; Rd = Op2
		RSB		R8, R11, #0 ; Rd = Op2 - Op1
		MLA		R9, R3,	R8, R9 ; Multiply-Accumulate
		MLA		R8, R4,	R12, R9	; Multiply-Accumulate
		STR		R8, [R1,#8] ; Store to Memory
		RSB		R8, R11, #0 ; Rd = Op2 - Op1
		MLA		R10, R5, R8, R10 ; Multiply-Accumulate
		RSB		R8, R12, #0 ; Rd = Op2 - Op1
		MLA		R8, R6,	R8, R10	; Multiply-Accumulate
		STR		R8, [R1,#0xC] ;	Store to Memory
		STRH		R3, [R1] ; Store to Memory
		RSB		R4, R4,	#0 ; Rd	= Op2 -	Op1
		STRH		R4, [R1,#2] ; Store to Memory
		STRH		R5, [R1,#4] ; Store to Memory
		STRH		R6, [R1,#6] ; Store to Memory
		ADD		R0, R0,	#0x14 ;	Rd = Op1 + Op2
		ADD		R1, R1,	#0x10 ;	Rd = Op1 + Op2
		B		loc_C30	; Branch
; ---------------------------------------------------------------------------

loc_CD8					; CODE XREF: ROM:00000C34j
		LDMFD		SP!, {R4-R11} ;	Load Block from	Memory
		BX		LR	; Branch to/from Thumb mode

; =============== S U B	R O U T	I N E =======================================


sub_CE0					; CODE XREF: sub_3730:loc_3734j
		STMFD		SP!, {R8-R11} ;	Store Block to Memory

loc_CE4					; CODE XREF: sub_CE0+70j
		SUBS		R2, R2,	#1 ; Rd	= Op1 -	Op2
		BLT		loc_D54	; Branch
		LDRH		R9, [R0,#4] ; Load from	Memory
		MOV		R9, R9,LSR#8 ; Rd = Op2
		ADR		R12, dword_D5C ; Load address
		ADD		R8, R9,	#0x40 ;	Rd = Op1 + Op2
		AND		R8, R8,	#0xFF ;	Rd = Op1 & Op2
		MOV		R8, R8,LSL#1 ; Rd = Op2
		LDRSH		R11, [R8,R12] ;	Load from Memory
		MOV		R8, R9,LSL#1 ; Rd = Op2
		LDRSH		R12, [R8,R12] ;	Load from Memory
		LDRSH		R9, [R0] ; Load	from Memory
		LDRSH		R10, [R0,#2] ; Load from Memory
		MUL		R8, R11, R9 ; Multiply
		MOV		R8, R8,ASR#14 ;	Rd = Op2
		STRH		R8, [R1],R3 ; Store to Memory
		MUL		R8, R12, R9 ; Multiply
		MOV		R8, R8,ASR#14 ;	Rd = Op2
		RSB		R8, R8,	#0 ; Rd	= Op2 -	Op1
		STRH		R8, [R1],R3 ; Store to Memory
		MUL		R8, R12, R10 ; Multiply
		MOV		R8, R8,ASR#14 ;	Rd = Op2
		STRH		R8, [R1],R3 ; Store to Memory
		MUL		R8, R11, R10 ; Multiply
		MOV		R8, R8,ASR#14 ;	Rd = Op2
		STRH		R8, [R1],R3 ; Store to Memory
		ADD		R0, R0,	#8 ; Rd	= Op1 +	Op2
		B		loc_CE4	; Branch
; ---------------------------------------------------------------------------

loc_D54					; CODE XREF: sub_CE0+8j
		LDMFD		SP!, {R8-R11} ;	Load Block from	Memory
		BX		LR	; Branch to/from Thumb mode
; End of function sub_CE0

; ---------------------------------------------------------------------------
dword_D5C	DCD 0x1920000, 0x4B50323, 0x7D50645, 0xAF10964,	0xE050C7C
					; DATA XREF: ROM:00000C40o sub_CE0+14o
		DCD 0x11110F8C,	0x14131294, 0x1708158F,	0x19EF187D, 0x1CC61B5D
		DCD 0x1F8B1E2B,	0x223D20E7, 0x24DA238E,	0x275F261F, 0x29CD2899
		DCD 0x2C212AFA,	0x2E5A2D41, 0x30762F6B,	0x32743179, 0x34533367
		DCD 0x36123536,	0x37AF36E5, 0x392A3871,	0x3A8239DA, 0x3BB63B20
		DCD 0x3CC53C42,	0x3DAE3D3E, 0x3E713E14,	0x3F0E3EC5, 0x3F843F4E
		DCD 0x3FD33FB1,	0x3FFB3FEC, 0x3FFB4000,	0x3FD33FEC, 0x3F843FB1
		DCD 0x3F0E3F4E,	0x3E713EC5, 0x3DAE3E14,	0x3CC53D3E, 0x3BB63C42
		DCD 0x3A823B20,	0x392A39DA, 0x37AF3871,	0x361236E5, 0x34533536
		DCD 0x32743367,	0x30763179, 0x2E5A2F6B,	0x2C212D41, 0x29CD2AFA
		DCD 0x275F2899,	0x24DA261F, 0x223D238E,	0x1F8B20E7, 0x1CC61E2B
		DCD 0x19EF1B5D,	0x1708187D, 0x1413158F,	0x11111294, 0xE050F8C
		DCD 0xAF10C7C, 0x7D50964, 0x4B50645, 0x1920323,	0xFE6E0000
		DCD 0xFB4BFCDD,	0xF82BF9BB, 0xF50FF69C,	0xF1FBF384, 0xEEEFF074
		DCD 0xEBEDED6C,	0xE8F8EA71, 0xE611E783,	0xE33AE4A3, 0xE075E1D5
		DCD 0xDDC3DF19,	0xDB26DC72, 0xD8A1D9E1,	0xD633D767, 0xD3DFD506
		DCD 0xD1A6D2BF,	0xCF8AD095, 0xCD8CCE87,	0xCBADCC99, 0xC9EECACA
		DCD 0xC851C91B,	0xC6D6C78F, 0xC57EC626,	0xC44AC4E0, 0xC33BC3BE
		DCD 0xC252C2C2,	0xC18FC1EC, 0xC0F2C13B,	0xC07CC0B2, 0xC02DC04F
		DCD 0xC005C014,	0xC005C000, 0xC02DC014,	0xC07CC04F, 0xC0F2C0B2
		DCD 0xC18FC13B,	0xC252C1EC, 0xC33BC2C2,	0xC44AC3BE, 0xC57EC4E0
		DCD 0xC6D6C626,	0xC851C78F, 0xC9EEC91B,	0xCBADCACA, 0xCD8CCC99
		DCD 0xCF8ACE87,	0xD1A6D095, 0xD3DFD2BF,	0xD633D506, 0xD8A1D767
		DCD 0xDB26D9E1,	0xDDC3DC72, 0xE075DF19,	0xE33AE1D5, 0xE611E4A3
		DCD 0xE8F8E783,	0xEBEDEA71, 0xEEEFED6C,	0xF1FBF074, 0xF50FF384
		DCD 0xF82BF69C,	0xFB4BF9BB, 0xFE6EFCDD
		CODE16

; =============== S U B	R O U T	I N E =======================================


sub_F5C					; CODE XREF: sub_874+64p sub_974+8p

var_28		= -0x28

		MOV		R3, PC	; Rd = Op2
		BX		R3 ; loc_F60 ; Branch to/from Thumb mode
; ---------------------------------------------------------------------------
		CODE32

loc_F60					; CODE XREF: sub_F5C+2j
		STMFD		SP!, {R4-R11,LR} ; Store Block to Memory
		SUB		SP, SP,	#8 ; Rd	= Op1 -	Op2
		LDRH		R7, [R2] ; Load	from Memory
		MOVS		R12, R7	; Rd = Op2
		BL		sub_BA4	; Branch with Link
		BEQ		loc_1004 ; Branch
		LDRB		R6, [R2,#2] ; Load from	Memory
		RSB		R10, R6, #8 ; Rd = Op2 - Op1
		MOV		LR, #0	; Rd = Op2
		LDR		R11, [R2,#4] ; Load from Memory
		MOV		R8, R11,LSR#31 ; Rd = Op2
		LDR		R11, [R2,#4] ; Load from Memory
		MOV		R11, R11,LSL#1 ; Rd = Op2
		MOV		R11, R11,LSR#1 ; Rd = Op2
		STR		R11, [SP,#0x2C+var_28] ; Store to Memory
		LDRB		R2, [R2,#3] ; Load from	Memory
		MOV		R3, #0	; Rd = Op2

loc_FA4					; CODE XREF: sub_F5C+64j
		SUBS		R7, R7,	#1 ; Rd	= Op1 -	Op2
		BLT		loc_1004 ; Branch
		MOV		R11, #0xFF ; Rd	= Op2
		MOV		R5, R11,ASR R10	; Rd = Op2
		LDRB		R9, [R0],#1 ; Load from	Memory
		MOV		R4, #0	; Rd = Op2

loc_FBC					; CODE XREF: sub_F5C+A4j
		CMP		R4, #8	; Set cond. codes on Op1 - Op2
		BGE		loc_FA4	; Branch
		AND		R11, R9, R5 ; Rd = Op1 & Op2
		MOVS		R12, R11,LSR R4	; Rd = Op2
		CMPEQ		R8, #0	; Set cond. codes on Op1 - Op2
		BEQ		loc_FDC	; Branch
		LDR		R11, [SP,#0x2C+var_28] ; Load from Memory
		ADD		R12, R12, R11 ;	Rd = Op1 + Op2

loc_FDC					; CODE XREF: sub_F5C+74j
		ORR		LR, LR,	R12,LSL	R3 ; Rd	= Op1 |	Op2
		ADD		R3, R3,	R2 ; Rd	= Op1 +	Op2
		CMP		R3, #0x20 ; ' '	; Set cond. codes on Op1 - Op2
		BLT		loc_FF8	; Branch
		STR		LR, [R1],#4 ; Store to Memory
		MOV		LR, #0	; Rd = Op2
		MOV		R3, #0	; Rd = Op2

loc_FF8					; CODE XREF: sub_F5C+8Cj
		MOV		R5, R5,LSL R6 ;	Rd = Op2
		ADD		R4, R4,	R6 ; Rd	= Op1 +	Op2
		B		loc_FBC	; Branch
; ---------------------------------------------------------------------------

loc_1004				; CODE XREF: sub_F5C+18j sub_F5C+4Cj
		ADD		SP, SP,	#8 ; Rd	= Op1 +	Op2
		LDMFD		SP!, {R4-R11,LR} ; Load	Block from Memory
		BX		LR	; Branch to/from Thumb mode
; End of function sub_F5C

		CODE16

; =============== S U B	R O U T	I N E =======================================


sub_1010				; CODE XREF: sub_874+44p sub_94A+18p

var_28		= -0x28

		MOV		R3, PC	; Rd = Op2
		BX		R3 ; loc_1014 ;	Branch to/from Thumb mode
; ---------------------------------------------------------------------------
		CODE32

loc_1014				; CODE XREF: sub_1010+2j
		STMFD		SP!, {R4-R11,LR} ; Store Block to Memory
		SUB		SP, SP,	#8 ; Rd	= Op1 -	Op2
		MOVS		R12, #0x2000000	; Rd = Op2
		BL		sub_BA4	; Branch with Link
		BEQ		loc_10EC ; Branch
		ADD		R2, R0,	#4 ; Rd	= Op1 +	Op2
		ADD		R7, R2,	#1 ; Rd	= Op1 +	Op2
		LDRB		R10, [R0] ; Load from Memory
		AND		R4, R10, #0xF ;	Rd = Op1 & Op2
		MOV		R3, #0	; Rd = Op2
		MOV		LR, #0	; Rd = Op2
		AND		R10, R4, #7 ; Rd = Op1 & Op2
		ADD		R11, R10, #4 ; Rd = Op1	+ Op2
		STR		R11, [SP,#0x2C+var_28] ; Store to Memory
		LDR		R10, [R0] ; Load from Memory
		MOV		R12, R10,LSR#8 ; Rd = Op2
		LDRB		R10, [R2] ; Load from Memory
		ADD		R10, R10, #1 ; Rd = Op1	+ Op2
		ADD		R0, R2,	R10,LSL#1 ; Rd = Op1 + Op2
		MOV		R2, R7	; Rd = Op2

loc_1064				; CODE XREF: sub_1010+68j sub_1010+D8j
		CMP		R12, #0	; Set cond. codes on Op1 - Op2
		BLE		loc_10EC ; Branch
		MOV		R8, #0x20 ; ' '	; Rd = Op2
		LDR		R5, [R0],#4 ; Load from	Memory

loc_1074				; CODE XREF: sub_1010+D4j
		SUBS		R8, R8,	#1 ; Rd	= Op1 -	Op2
		BLT		loc_1064 ; Branch
		MOV		R10, #1	; Rd = Op2
		AND		R9, R10, R5,LSR#31 ; Rd	= Op1 &	Op2
		LDRB		R6, [R2] ; Load	from Memory
		MOV		R6, R6,LSL R9 ;	Rd = Op2
		MOV		R10, R2,LSR#1 ;	Rd = Op2
		MOV		R10, R10,LSL#1 ; Rd = Op2
		LDRB		R11, [R2] ; Load from Memory
		AND		R11, R11, #0x3F	; Rd = Op1 & Op2
		ADD		R11, R11, #1 ; Rd = Op1	+ Op2
		ADD		R10, R10, R11,LSL#1 ; Rd = Op1 + Op2
		ADD		R2, R10, R9 ; Rd = Op1 + Op2
		TST		R6, #0x80 ; Set	cond. codes on Op1 & Op2
		BEQ		loc_10DC ; Branch
		MOV		R3, R3,LSR R4 ;	Rd = Op2
		LDRB		R10, [R2] ; Load from Memory
		RSB		R11, R4, #0x20 ; Rd = Op2 - Op1
		ORR		R3, R3,	R10,LSL	R11 ; Rd = Op1 | Op2
		MOV		R2, R7	; Rd = Op2
		ADD		LR, LR,	#1 ; Rd	= Op1 +	Op2
		LDR		R11, [SP,#0x2C+var_28] ; Load from Memory
		CMP		LR, R11	; Set cond. codes on Op1 - Op2
		STREQ		R3, [R1],#4 ; Store to Memory
		SUBEQ		R12, R12, #4 ; Rd = Op1	- Op2
		MOVEQ		LR, #0	; Rd = Op2

loc_10DC				; CODE XREF: sub_1010+9Cj
		CMP		R12, #0	; Set cond. codes on Op1 - Op2
		MOVGT		R5, R5,LSL#1 ; Rd = Op2
		BGT		loc_1074 ; Branch
		B		loc_1064 ; Branch
; ---------------------------------------------------------------------------

loc_10EC				; CODE XREF: sub_1010+14j sub_1010+58j
		ADD		SP, SP,	#8 ; Rd	= Op1 +	Op2
		LDMFD		SP!, {R4-R11,LR} ; Load	Block from Memory
		BX		LR	; Branch to/from Thumb mode
; End of function sub_1010

		CODE16

; =============== S U B	R O U T	I N E =======================================


sub_10F8				; CODE XREF: sub_874+4Cp
		MOV		R3, PC	; Rd = Op2
		BX		R3 ; loc_10FC ;	Branch to/from Thumb mode
; ---------------------------------------------------------------------------
		CODE32

loc_10FC				; CODE XREF: sub_10F8+2j
		STMFD		SP!, {R4-R6,LR}	; Store	Block to Memory
		LDR		R5, [R0],#4 ; Load from	Memory
		MOV		R2, R5,LSR#8 ; Rd = Op2
		MOVS		R12, R2	; Rd = Op2
		BL		sub_BA4	; Branch with Link
		BEQ		loc_118C ; Branch

loc_1114				; CODE XREF: sub_10F8+30j sub_10F8+90j
		CMP		R2, #0	; Set cond. codes on Op1 - Op2
		BLE		loc_118C ; Branch
		LDRB		LR, [R0],#1 ; Load from	Memory
		MOV		R4, #8	; Rd = Op2

loc_1124				; CODE XREF: sub_10F8+8Cj
		SUBS		R4, R4,	#1 ; Rd	= Op1 -	Op2
		BLT		loc_1114 ; Branch
		TST		LR, #0x80 ; Set	cond. codes on Op1 & Op2
		BNE		loc_1144 ; Branch
		LDRB		R6, [R0],#1 ; Load from	Memory
		STRB		R6, [R1],#1 ; Store to Memory
		SUB		R2, R2,	#1 ; Rd	= Op1 -	Op2
		B		loc_117C ; Branch
; ---------------------------------------------------------------------------

loc_1144				; CODE XREF: sub_10F8+38j
		LDRB		R5, [R0] ; Load	from Memory
		MOV		R6, #3	; Rd = Op2
		ADD		R3, R6,	R5,ASR#4 ; Rd =	Op1 + Op2
		LDRB		R6, [R0],#1 ; Load from	Memory
		AND		R5, R6,	#0xF ; Rd = Op1	& Op2
		MOV		R12, R5,LSL#8 ;	Rd = Op2
		LDRB		R6, [R0],#1 ; Load from	Memory
		ORR		R5, R6,	R12 ; Rd = Op1 | Op2
		ADD		R12, R5, #1 ; Rd = Op1 + Op2
		SUB		R2, R2,	R3 ; Rd	= Op1 -	Op2

loc_116C				; CODE XREF: sub_10F8+80j
		LDRB		R5, [R1,-R12] ;	Load from Memory
		STRB		R5, [R1],#1 ; Store to Memory
		SUBS		R3, R3,	#1 ; Rd	= Op1 -	Op2
		BGT		loc_116C ; Branch

loc_117C				; CODE XREF: sub_10F8+48j
		CMP		R2, #0	; Set cond. codes on Op1 - Op2
		MOVGT		LR, LR,LSL#1 ; Rd = Op2
		BGT		loc_1124 ; Branch
		B		loc_1114 ; Branch
; ---------------------------------------------------------------------------

loc_118C				; CODE XREF: sub_10F8+18j sub_10F8+20j
		LDMFD		SP!, {R4-R6,LR}	; Load Block from Memory
		BX		LR	; Branch to/from Thumb mode
; End of function sub_10F8

; ---------------------------------------------------------------------------
		STMFD		SP!, {R4-R10,LR} ; Store Block to Memory
		MOV		R3, #0	; Rd = Op2
		LDR		R8, [R0],#4 ; Load from	Memory
		MOV		R10, R8,LSR#8 ;	Rd = Op2
		MOV		R2, #0	; Rd = Op2
		MOVS		R12, R10 ; Rd =	Op2
		BL		sub_BA4	; Branch with Link
		BEQ		loc_1270 ; Branch

loc_11B4				; CODE XREF: ROM:000011C8j
					; ROM:0000126Cj
		CMP		R10, #0	; Set cond. codes on Op1 - Op2
		BLE		loc_1270 ; Branch
		LDRB		R6, [R0],#1 ; Load from	Memory
		MOV		R7, #8	; Rd = Op2

loc_11C4				; CODE XREF: ROM:00001268j
		SUBS		R7, R7,	#1 ; Rd	= Op1 -	Op2
		BLT		loc_11B4 ; Branch
		TST		R6, #0x80 ; Set	cond. codes on Op1 & Op2
		BNE		loc_11F0 ; Branch
		LDRB		R9, [R0],#1 ; Load from	Memory
		ORR		R3, R3,	R9,LSL R2 ; Rd = Op1 | Op2
		SUB		R10, R10, #1 ; Rd = Op1	- Op2
		EORS		R2, R2,	#8 ; Rd	= Op1 ^	Op2
		STREQH		R3, [R1],#2 ; Store to Memory
		MOVEQ		R3, #0	; Rd = Op2
		B		loc_1260 ; Branch
; ---------------------------------------------------------------------------

loc_11F0				; CODE XREF: ROM:000011D0j
		LDRB		R9, [R0] ; Load	from Memory
		MOV		R8, #3	; Rd = Op2
		ADD		R5, R8,	R9,ASR#4 ; Rd =	Op1 + Op2
		LDRB		R9, [R0],#1 ; Load from	Memory
		AND		R8, R9,	#0xF ; Rd = Op1	& Op2
		MOV		R4, R8,LSL#8 ; Rd = Op2
		LDRB		R9, [R0],#1 ; Load from	Memory
		ORR		R8, R9,	R4 ; Rd	= Op1 |	Op2
		ADD		R4, R8,	#1 ; Rd	= Op1 +	Op2
		RSB		R8, R2,	#8 ; Rd	= Op2 -	Op1
		AND		R9, R4,	#1 ; Rd	= Op1 &	Op2
		EOR		LR, R8,	R9,LSL#3 ; Rd =	Op1 ^ Op2
		SUB		R10, R10, R5 ; Rd = Op1	- Op2

loc_1224				; CODE XREF: ROM:0000125Cj
		EOR		LR, LR,	#8 ; Rd	= Op1 ^	Op2
		RSB		R8, R2,	#8 ; Rd	= Op2 -	Op1
		ADD		R8, R4,	R8,LSR#3 ; Rd =	Op1 + Op2
		MOV		R8, R8,LSR#1 ; Rd = Op2
		MOV		R8, R8,LSL#1 ; Rd = Op2
		LDRH		R9, [R1,-R8] ; Load from Memory
		MOV		R8, #0xFF ; Rd = Op2
		AND		R8, R9,	R8,LSL LR ; Rd = Op1 & Op2
		MOV		R8, R8,ASR LR ;	Rd = Op2
		ORR		R3, R3,	R8,LSL R2 ; Rd = Op1 | Op2
		EORS		R2, R2,	#8 ; Rd	= Op1 ^	Op2
		STREQH		R3, [R1],#2 ; Store to Memory
		MOVEQ		R3, #0	; Rd = Op2
		SUBS		R5, R5,	#1 ; Rd	= Op1 -	Op2
		BGT		loc_1224 ; Branch

loc_1260				; CODE XREF: ROM:000011ECj
		CMP		R10, #0	; Set cond. codes on Op1 - Op2
		MOVGT		R6, R6,LSL#1 ; Rd = Op2
		BGT		loc_11C4 ; Branch
		B		loc_11B4 ; Branch
; ---------------------------------------------------------------------------

loc_1270				; CODE XREF: ROM:000011B0j
					; ROM:000011B8j
		LDMFD		SP!, {R4-R10,LR} ; Load	Block from Memory
		BX		LR	; Branch to/from Thumb mode
; ---------------------------------------------------------------------------
		CODE16
		PUSH		{R4-R7,LR} ; Push registers
		LDMIA		R0!, {R3} ; Load Block from Memory
		LSRS		R7, R3,	#8 ; Logical Shift Right
		MOVS		R4, R7	; Rd = Op2
		BL		sub_B9C	; Branch with Link
		BEQ		loc_12BA ; Branch

loc_1286				; CODE XREF: ROM:000012A6j
					; ROM:000012B8j
		CMP		R7, #0	; Set cond. codes on Op1 - Op2
		BLE		loc_12BA ; Branch
		LDRB		R4, [R0] ; Load	from Memory
		ADDS		R0, R0,	#1 ; Rd	= Op1 +	Op2
		LSLS		R2, R4,	#0x19 ;	Logical	Shift Left
		LSRS		R2, R2,	#0x19 ;	Logical	Shift Right
		LSRS		R3, R4,	#8 ; Logical Shift Right
		BCS		loc_12A8 ; Branch
		ADDS		R2, R2,	#1 ; Rd	= Op1 +	Op2
		SUBS		R7, R7,	R2 ; Rd	= Op1 -	Op2

loc_129A				; CODE XREF: ROM:000012A4j
		LDRB		R3, [R0] ; Load	from Memory
		STRB		R3, [R1] ; Store to Memory
		ADDS		R0, R0,	#1 ; Rd	= Op1 +	Op2
		ADDS		R1, R1,	#1 ; Rd	= Op1 +	Op2
		SUBS		R2, R2,	#1 ; Rd	= Op1 -	Op2
		BGT		loc_129A ; Branch
		B		loc_1286 ; Branch
; ---------------------------------------------------------------------------

loc_12A8				; CODE XREF: ROM:00001294j
		ADDS		R2, R2,	#3 ; Rd	= Op1 +	Op2
		SUBS		R7, R7,	R2 ; Rd	= Op1 -	Op2
		LDRB		R5, [R0] ; Load	from Memory
		ADDS		R0, R0,	#1 ; Rd	= Op1 +	Op2

loc_12B0				; CODE XREF: ROM:000012B6j
		STRB		R5, [R1] ; Store to Memory
		ADDS		R1, R1,	#1 ; Rd	= Op1 +	Op2
		SUBS		R2, R2,	#1 ; Rd	= Op1 -	Op2
		BGT		loc_12B0 ; Branch
		B		loc_1286 ; Branch
; ---------------------------------------------------------------------------

loc_12BA				; CODE XREF: ROM:00001284j
					; ROM:00001288j
		POP		{R4-R7}	; Pop registers
		POP		{R3}	; Pop registers
		BX		R3	; Branch to/from Thumb mode
; ---------------------------------------------------------------------------
		PUSH		{R4-R7,LR} ; Push registers
		SUB		SP, SP,	#0xC ; Rd = Op1	- Op2
		MOVS		R7, #0	; Rd = Op2
		LDMIA		R0!, {R3} ; Load Block from Memory
		LSRS		R5, R3,	#8 ; Logical Shift Right
		MOVS		R4, R5	; Rd = Op2
		BL		sub_B9C	; Branch with Link
		BEQ		loc_132A ; Branch
		MOVS		R4, #0	; Rd = Op2

loc_12D4				; CODE XREF: ROM:00001306j
					; ROM:00001328j
		CMP		R5, #0	; Set cond. codes on Op1 - Op2
		BLE		loc_132A ; Branch
		LDRB		R3, [R0] ; Load	from Memory
		STR		R3, [SP,#4] ; Store to Memory
		ADDS		R0, R0,	#1 ; Rd	= Op1 +	Op2
		LDR		R3, [SP,#4] ; Load from	Memory
		LSLS		R2, R3,	#0x19 ;	Logical	Shift Left
		LSRS		R2, R2,	#0x19 ;	Logical	Shift Right
		LDR		R6, [SP,#4] ; Load from	Memory
		LSRS		R3, R6,	#8 ; Logical Shift Right
		BCS		loc_1308 ; Branch
		ADDS		R2, R2,	#1 ; Rd	= Op1 +	Op2
		SUBS		R5, R5,	R2 ; Rd	= Op1 -	Op2

loc_12EE				; CODE XREF: ROM:00001304j
		LDRB		R6, [R0] ; Load	from Memory
		LSLS		R6, R4	; Logical Shift	Left
		ORRS		R7, R6	; Rd = Op1 | Op2
		ADDS		R0, R0,	#1 ; Rd	= Op1 +	Op2
		MOVS		R3, #8	; Rd = Op2
		EORS		R4, R3	; Rd = Op1 ^ Op2
		BNE		loc_1302 ; Branch
		STRH		R7, [R1] ; Store to Memory
		ADDS		R1, R1,	#2 ; Rd	= Op1 +	Op2
		MOVS		R7, #0	; Rd = Op2

loc_1302				; CODE XREF: ROM:000012FAj
		SUBS		R2, R2,	#1 ; Rd	= Op1 -	Op2
		BGT		loc_12EE ; Branch
		B		loc_12D4 ; Branch
; ---------------------------------------------------------------------------

loc_1308				; CODE XREF: ROM:000012E8j
		ADDS		R2, R2,	#3 ; Rd	= Op1 +	Op2
		SUBS		R5, R5,	R2 ; Rd	= Op1 -	Op2
		LDRB		R6, [R0] ; Load	from Memory
		STR		R6, [SP,#8] ; Store to Memory
		ADDS		R0, R0,	#1 ; Rd	= Op1 +	Op2

loc_1312				; CODE XREF: ROM:00001326j
		LDR		R6, [SP,#8] ; Load from	Memory
		LSLS		R6, R4	; Logical Shift	Left
		ORRS		R7, R6	; Rd = Op1 | Op2
		MOVS		R3, #8	; Rd = Op2
		EORS		R4, R3	; Rd = Op1 ^ Op2
		BNE		loc_1324 ; Branch
		STRH		R7, [R1] ; Store to Memory
		ADDS		R1, R1,	#2 ; Rd	= Op1 +	Op2
		MOVS		R7, #0	; Rd = Op2

loc_1324				; CODE XREF: ROM:0000131Cj
		SUBS		R2, R2,	#1 ; Rd	= Op1 -	Op2
		BGT		loc_1312 ; Branch
		B		loc_12D4 ; Branch
; ---------------------------------------------------------------------------

loc_132A				; CODE XREF: ROM:000012D0j
					; ROM:000012D6j
		ADD		SP, SP,	#0xC ; Rd = Op1	+ Op2
		POP		{R4-R7}	; Pop registers
		POP		{R3}	; Pop registers
		BX		R3	; Branch to/from Thumb mode
; ---------------------------------------------------------------------------
		PUSH		{R4,LR}	; Push registers
		LDMIA		R0!, {R4} ; Load Block from Memory
		LSRS		R4, R4,	#8 ; Logical Shift Right
		BL		sub_B9C	; Branch with Link
		BEQ		loc_1356 ; Branch
		LDRB		R2, [R0] ; Load	from Memory
		ADDS		R0, R0,	#1 ; Rd	= Op1 +	Op2
		STRB		R2, [R1] ; Store to Memory
		ADDS		R1, R1,	#1 ; Rd	= Op1 +	Op2

loc_1346				; CODE XREF: ROM:00001354j
		SUBS		R4, R4,	#1 ; Rd	= Op1 -	Op2
		BLE		loc_1356 ; Branch
		LDRB		R3, [R0] ; Load	from Memory
		ADDS		R2, R3,	R2 ; Rd	= Op1 +	Op2
		ADDS		R0, R0,	#1 ; Rd	= Op1 +	Op2
		STRB		R2, [R1] ; Store to Memory
		ADDS		R1, R1,	#1 ; Rd	= Op1 +	Op2
		B		loc_1346 ; Branch
; ---------------------------------------------------------------------------

loc_1356				; CODE XREF: ROM:0000133Cj
					; ROM:00001348j
		POP		{R4}	; Pop registers
		POP		{R3}	; Pop registers
		BX		R3	; Branch to/from Thumb mode
; ---------------------------------------------------------------------------
		PUSH		{R4-R7,LR} ; Push registers
		LDMIA		R0!, {R3} ; Load Block from Memory
		LSRS		R5, R3,	#8 ; Logical Shift Right
		MOVS		R4, R5	; Rd = Op2
		BL		sub_B9C	; Branch with Link
		BEQ		loc_1392 ; Branch
		MOVS		R4, #8	; Rd = Op2
		LDRB		R7, [R0] ; Load	from Memory
		ADDS		R0, R0,	#1 ; Rd	= Op1 +	Op2
		ADDS		R2, R7,	#0 ; Rd	= Op1 +	Op2

loc_1372				; CODE XREF: ROM:00001388j
					; ROM:00001390j
		SUBS		R5, R5,	#1 ; Rd	= Op1 -	Op2
		BLE		loc_1392 ; Branch
		LDRB		R3, [R0] ; Load	from Memory
		ADDS		R7, R3,	R7 ; Rd	= Op1 +	Op2
		ADDS		R0, R0,	#1 ; Rd	= Op1 +	Op2
		LSLS		R6, R7,	#0x18 ;	Logical	Shift Left
		LSRS		R6, R6,	#0x18 ;	Logical	Shift Right
		LSLS		R6, R4	; Logical Shift	Left
		ORRS		R2, R6	; Rd = Op1 | Op2
		MOVS		R3, #8	; Rd = Op2
		EORS		R4, R3	; Rd = Op1 ^ Op2
		BNE		loc_1372 ; Branch
		STRH		R2, [R1] ; Store to Memory
		ADDS		R1, R1,	#2 ; Rd	= Op1 +	Op2
		MOVS		R2, #0	; Rd = Op2
		B		loc_1372 ; Branch
; ---------------------------------------------------------------------------

loc_1392				; CODE XREF: ROM:00001368j
					; ROM:00001374j
		POP		{R4-R7}	; Pop registers
		POP		{R3}	; Pop registers
		BX		R3	; Branch to/from Thumb mode

; =============== S U B	R O U T	I N E =======================================


sub_1398				; CODE XREF: sub_94A+24p
		PUSH		{R4,LR}	; Push registers
		LDMIA		R0!, {R4} ; Load Block from Memory
		LSRS		R4, R4,	#8 ; Logical Shift Right
		BL		sub_B9C	; Branch with Link
		BEQ		loc_13BC ; Branch
		LDRH		R2, [R0] ; Load	from Memory
		ADDS		R0, R0,	#2 ; Rd	= Op1 +	Op2
		STRH		R2, [R1] ; Store to Memory
		ADDS		R1, R1,	#2 ; Rd	= Op1 +	Op2

loc_13AC				; CODE XREF: sub_1398+22j
		SUBS		R4, R4,	#2 ; Rd	= Op1 -	Op2
		BLE		loc_13BC ; Branch
		LDRH		R3, [R0] ; Load	from Memory
		ADDS		R2, R3,	R2 ; Rd	= Op1 +	Op2
		ADDS		R0, R0,	#2 ; Rd	= Op1 +	Op2
		STRH		R2, [R1] ; Store to Memory
		ADDS		R1, R1,	#2 ; Rd	= Op1 +	Op2
		B		loc_13AC ; Branch
; ---------------------------------------------------------------------------

loc_13BC				; CODE XREF: sub_1398+Aj sub_1398+16j
		POP		{R4}	; Pop registers
		POP		{R2}	; Pop registers

locret_13C0				; CODE XREF: sub_159C+B2j
		BX		R2	; Branch to/from Thumb mode
; End of function sub_1398


; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

sub_13C2				; CODE XREF: ROM:00001856p
		BX		R1	; Branch to/from Thumb mode
; End of function sub_13C2


; =============== S U B	R O U T	I N E =======================================


sub_13C4				; CODE XREF: sub_1928+7Cp sub_1928+86p
		PUSH		{R4,R5,R7,LR} ;	Push registers
		MOVS		R4, R2	; Rd = Op2
		MOVS		R5, R1	; Rd = Op2
		MOVS		R7, R0	; Rd = Op2
		CMP		R2, #1	; Set cond. codes on Op1 - Op2
		BLT		loc_141E ; Branch
		CMP		R4, #0x10 ; Set	cond. codes on Op1 - Op2
		BLE		loc_13D6 ; Branch
		MOVS		R4, #0x10 ; Rd = Op2

loc_13D6				; CODE XREF: sub_13C4+Ej
		MOVS		R0, R7	; Rd = Op2
		BL		sub_23B0 ; Branch with Link
		STR		R5, [R7,#0x2C] ; Store to Memory
		LDR		R0, =0x80000000	; Load from Memory
		STRB		R4, [R7,#8] ; Store to Memory
		STR		R0, [R7,#4] ; Store to Memory
		MOVS		R0, #0	; Rd = Op2
		B		loc_13F2 ; Branch
; ---------------------------------------------------------------------------

loc_13E8				; CODE XREF: sub_13C4+30j
		SUBS		R1, R4,	#1 ; Rd	= Op1 -	Op2
		LSLS		R4, R1,	#0x18 ;	Logical	Shift Left
		LSRS		R4, R4,	#0x18 ;	Logical	Shift Right
		STRB		R0, [R5] ; Store to Memory
		ADDS		R5, #0x50 ; 'P'	; Rd = Op1 + Op2

loc_13F2				; CODE XREF: sub_13C4+22j
		CMP		R4, #0	; Set cond. codes on Op1 - Op2
		BGT		loc_13E8 ; Branch
		LDR		R1, =0x3007FC0 ; Load from Memory
		LDR		R4, =0x68736D53	; Load from Memory
		LDR		R1, [R1,#0x30] ; Load from Memory
		LDR		R2, [R1] ; Load	from Memory
		CMP		R2, R4	; Set cond. codes on Op1 - Op2
		BNE		loc_141E ; Branch
		ADDS		R2, #1	; Rd = Op1 + Op2
		STR		R2, [R1] ; Store to Memory
		LDR		R2, [R1,#0x20] ; Load from Memory
		CMP		R2, #0	; Set cond. codes on Op1 - Op2
		BEQ		loc_1414 ; Branch
		STR		R2, [R7,#0x38] ; Store to Memory
		LDR		R2, [R1,#0x24] ; Load from Memory
		STR		R2, [R7,#0x3C] ; Store to Memory
		STR		R0, [R1,#0x20] ; Store to Memory

loc_1414				; CODE XREF: sub_13C4+46j
		LDR		R0, =(loc_2148+1) ; Load from Memory
		STR		R7, [R1,#0x24] ; Store to Memory
		STR		R0, [R1,#0x20] ; Store to Memory
		STR		R4, [R1] ; Store to Memory
		STR		R4, [R7,#0x34] ; Store to Memory

loc_141E				; CODE XREF: sub_13C4+Aj sub_13C4+3Cj
		POP		{R4,R5,R7} ; Pop registers
		POP		{R3}	; Pop registers
		BX		R3	; Branch to/from Thumb mode
; End of function sub_13C4

; ---------------------------------------------------------------------------
dword_1424	DCD 0x80000000		; DATA XREF: sub_13C4+1Ar
dword_1428	DCD 0x3007FC0		; DATA XREF: sub_13C4+32r
dword_142C	DCD 0x68736D53		; DATA XREF: sub_13C4+34r
off_1430	DCD loc_2148+1		; DATA XREF: sub_13C4:loc_1414r

; =============== S U B	R O U T	I N E =======================================


sub_1434				; CODE XREF: sub_1928+2C4p
					; sub_1928+2ECp ...
		PUSH		{R4-R7,LR} ; Push registers
		MOVS		R7, R0	; Rd = Op2
		LDR		R0, [R0,#0x34] ; Load from Memory
		LDR		R3, =0x68736D53	; Load from Memory
		MOVS		R4, R1	; Rd = Op2
		CMP		R0, R3	; Set cond. codes on Op1 - Op2
		BNE		loc_14B4 ; Branch
		ADDS		R0, #1	; Rd = Op1 + Op2
		STR		R0, [R7,#0x34] ; Store to Memory
		MOVS		R1, #0	; Rd = Op2
		STR		R1, [R7,#4] ; Store to Memory
		STR		R4, [R7] ; Store to Memory
		LDR		R0, [R4,#4] ; Load from	Memory
		STR		R0, [R7,#0x30] ; Store to Memory
		LDRB		R0, [R4,#2] ; Load from	Memory
		STRB		R0, [R7,#9] ; Store to Memory
		MOVS		R0, #0x96 ; 'ñ'	; Rd = Op2
		STRH		R0, [R7,#0x1C] ; Store to Memory
		STRH		R0, [R7,#0x20] ; Store to Memory
		MOVS		R0, #0x100
		STRH		R0, [R7,#0x1E] ; Store to Memory
		STRH		R1, [R7,#0x22] ; Store to Memory
		STRH		R1, [R7,#0x24] ; Store to Memory
		LDR		R5, [R7,#0x2C] ; Load from Memory
		MOVS		R6, #0	; Rd = Op2
		B		loc_1482 ; Branch
; ---------------------------------------------------------------------------

loc_146A				; CODE XREF: sub_1434+58j
		MOVS		R0, R7	; Rd = Op2
		MOVS		R1, R5	; Rd = Op2
		BL		sub_23E6 ; Branch with Link
		MOVS		R0, #0xC0 ; '¿'	; Rd = Op2
		STRB		R0, [R5] ; Store to Memory
		LSLS		R0, R6,	#2 ; Logical Shift Left
		ADDS		R0, R0,	R4 ; Rd	= Op1 +	Op2
		LDR		R0, [R0,#8] ; Load from	Memory
		STR		R0, [R5,#0x40] ; Store to Memory
		ADDS		R5, #0x50 ; 'P'	; Rd = Op1 + Op2
		ADDS		R6, #1	; Rd = Op1 + Op2

loc_1482				; CODE XREF: sub_1434+34j
		LDRB		R0, [R4] ; Load	from Memory
		CMP		R6, R0	; Set cond. codes on Op1 - Op2
		BGE		loc_14A0 ; Branch
		LDRB		R0, [R7,#8] ; Load from	Memory
		CMP		R0, R6	; Set cond. codes on Op1 - Op2
		BGT		loc_146A ; Branch
		B		loc_14A0 ; Branch
; ---------------------------------------------------------------------------

loc_1490				; CODE XREF: sub_1434+70j
		MOVS		R0, R7	; Rd = Op2
		MOVS		R1, R5	; Rd = Op2
		BL		sub_23E6 ; Branch with Link
		MOVS		R0, #0	; Rd = Op2
		STRB		R0, [R5] ; Store to Memory
		ADDS		R5, #0x50 ; 'P'	; Rd = Op1 + Op2
		ADDS		R6, #1	; Rd = Op1 + Op2

loc_14A0				; CODE XREF: sub_1434+52j sub_1434+5Aj
		LDRB		R0, [R7,#8] ; Load from	Memory
		CMP		R0, R6	; Set cond. codes on Op1 - Op2
		BGT		loc_1490 ; Branch
		LDRB		R0, [R4,#3] ; Load from	Memory
		LSRS		R1, R0,	#8 ; Logical Shift Right
		BCC		loc_14B0 ; Branch
		BL		sub_179C ; Branch with Link

loc_14B0				; CODE XREF: sub_1434+76j
		LDR		R0, =0x68736D53	; Load from Memory
		STR		R0, [R7,#0x34] ; Store to Memory

loc_14B4				; CODE XREF: sub_1434+Cj
		POP		{R4-R7}	; Pop registers
		POP		{R3}	; Pop registers
		BX		R3	; Branch to/from Thumb mode
; End of function sub_1434

; ---------------------------------------------------------------------------
		ALIGN 4
dword_14BC	DCD 0x68736D53		; DATA XREF: sub_1434+6r
					; sub_1434:loc_14B0r
; ---------------------------------------------------------------------------
		PUSH		{R4-R7,LR} ; Push registers
		MOVS		R7, R0	; Rd = Op2
		LDR		R0, [R0,#0x34] ; Load from Memory
		LDR		R6, =0x68736D53	; Load from Memory
		CMP		R0, R6	; Set cond. codes on Op1 - Op2
		BNE		loc_14F0 ; Branch
		ADDS		R0, #1	; Rd = Op1 + Op2
		STR		R0, [R7,#0x34] ; Store to Memory
		LDR		R0, [R7,#4] ; Load from	Memory
		LSLS		R3, R6,	#0x1F ;	Logical	Shift Left
		ORRS		R0, R3	; Rd = Op1 | Op2
		STR		R0, [R7,#4] ; Store to Memory
		LDRB		R5, [R7,#8] ; Load from	Memory
		LDR		R4, [R7,#0x2C] ; Load from Memory
		B		loc_14EA ; Branch
; ---------------------------------------------------------------------------

loc_14DE				; CODE XREF: ROM:000014ECj
		MOVS		R0, R7	; Rd = Op2
		MOVS		R1, R4	; Rd = Op2
		BL		sub_23E6 ; Branch with Link
		ADDS		R4, #0x50 ; 'P'	; Rd = Op1 + Op2
		SUBS		R5, #1	; Rd = Op1 - Op2

loc_14EA				; CODE XREF: ROM:000014DCj
		CMP		R5, #0	; Set cond. codes on Op1 - Op2
		BGT		loc_14DE ; Branch
		STR		R6, [R7,#0x34] ; Store to Memory

loc_14F0				; CODE XREF: ROM:000014CAj
		POP		{R4-R7}	; Pop registers
		POP		{R3}	; Pop registers
		BX		R3	; Branch to/from Thumb mode
; ---------------------------------------------------------------------------
		ALIGN 4
dword_14F8	DCD 0x68736D53		; DATA XREF: ROM:000014C6r
; ---------------------------------------------------------------------------
		LDR		R2, [R0,#0x34] ; Load from Memory
		LDR		R1, =0x68736D53	; Load from Memory
		CMP		R2, R1	; Set cond. codes on Op1 - Op2
		BNE		locret_150E ; Branch
		LDR		R2, [R0,#4] ; Load from	Memory
		STR		R1, [R0,#0x34] ; Store to Memory
		LSLS		R2, R2,	#1 ; Logical Shift Left
		LSRS		R2, R2,	#1 ; Logical Shift Right
		STR		R2, [R0,#4] ; Store to Memory

locret_150E				; CODE XREF: ROM:00001502j
		BX		LR	; Branch to/from Thumb mode
; ---------------------------------------------------------------------------
dword_1510	DCD 0x68736D53		; DATA XREF: ROM:000014FEr
; ---------------------------------------------------------------------------
		PUSH		{R7}	; Push registers
		LDR		R7, [R0,#0x34] ; Load from Memory
		LDR		R2, =0x68736D53	; Load from Memory
		CMP		R7, R2	; Set cond. codes on Op1 - Op2
		BNE		loc_152A ; Branch
		STRH		R1, [R0,#0x26] ; Store to Memory
		STRH		R1, [R0,#0x24] ; Store to Memory
		MOVS		R1, #0x100
		STRH		R1, [R0,#0x28] ; Store to Memory
		STR		R2, [R0,#0x34] ; Store to Memory

loc_152A				; CODE XREF: ROM:0000151Cj
		POP		{R7}	; Pop registers
		BX		LR	; Branch to/from Thumb mode
; ---------------------------------------------------------------------------
		ALIGN 0x10
dword_1530	DCD 0x68736D53		; DATA XREF: ROM:00001518r

; =============== S U B	R O U T	I N E =======================================


sub_1534				; CODE XREF: ROM:00002180p
					; DATA XREF: ROM:000037B8o
		PUSH		{R4-R7,LR} ; Push registers
		MOVS		R7, R0	; Rd = Op2
		LDRH		R0, [R0,#0x24] ; Load from Memory
		CMP		R0, #0	; Set cond. codes on Op1 - Op2
		BEQ		loc_1572 ; Branch
		LDRH		R1, [R7,#0x26] ; Load from Memory
		SUBS		R1, #1	; Rd = Op1 - Op2
		LSLS		R1, R1,	#0x10 ;	Logical	Shift Left
		LSRS		R1, R1,	#0x10 ;	Logical	Shift Right
		STRH		R1, [R7,#0x26] ; Store to Memory
		BNE		loc_1572 ; Branch
		LDRH		R1, [R7,#0x28] ; Load from Memory
		SUBS		R1, #0x10 ; Rd = Op1 - Op2
		STRH		R1, [R7,#0x28] ; Store to Memory
		LSLS		R1, R1,	#0x10 ;	Logical	Shift Left
		ASRS		R1, R1,	#0x10 ;	Arithmetic Shift Right
		CMP		R1, #0	; Set cond. codes on Op1 - Op2
		BGT		loc_1578 ; Branch
		LDRB		R5, [R7,#8] ; Load from	Memory
		LDR		R4, [R7,#0x2C] ; Load from Memory
		MOVS		R6, #0	; Rd = Op2
		B		loc_156E ; Branch
; ---------------------------------------------------------------------------

loc_1560				; CODE XREF: sub_1534+3Cj
		MOVS		R0, R7	; Rd = Op2
		MOVS		R1, R4	; Rd = Op2
		BL		sub_23E6 ; Branch with Link
		STRB		R6, [R4] ; Store to Memory
		ADDS		R4, #0x50 ; 'P'	; Rd = Op1 + Op2
		SUBS		R5, #1	; Rd = Op1 - Op2

loc_156E				; CODE XREF: sub_1534+2Aj
		CMP		R5, #0	; Set cond. codes on Op1 - Op2
		BGT		loc_1560 ; Branch

loc_1572				; CODE XREF: sub_1534+8j sub_1534+14j	...
		POP		{R4-R7}	; Pop registers
		POP		{R3}	; Pop registers
		BX		R3	; Branch to/from Thumb mode
; ---------------------------------------------------------------------------

loc_1578				; CODE XREF: sub_1534+22j
		STRH		R0, [R7,#0x26] ; Store to Memory
		LDRB		R1, [R7,#8] ; Load from	Memory
		LDR		R0, [R7,#0x2C] ; Load from Memory
		B		loc_1596 ; Branch
; ---------------------------------------------------------------------------

loc_1580				; CODE XREF: sub_1534+64j
		LDRB		R2, [R0] ; Load	from Memory
		LSRS		R3, R2,	#8 ; Logical Shift Right
		BCC		loc_1592 ; Branch
		LDRH		R3, [R7,#0x28] ; Load from Memory
		LSRS		R3, R3,	#2 ; Logical Shift Right
		STRB		R3, [R0,#0x13] ; Store to Memory
		MOVS		R3, #3	; Rd = Op2
		ORRS		R2, R3	; Rd = Op1 | Op2
		STRB		R2, [R0] ; Store to Memory

loc_1592				; CODE XREF: sub_1534+50j
		ADDS		R0, #0x50 ; 'P'	; Rd = Op1 + Op2
		SUBS		R1, #1	; Rd = Op1 - Op2

loc_1596				; CODE XREF: sub_1534+4Aj
		CMP		R1, #0	; Set cond. codes on Op1 - Op2
		BGT		loc_1580 ; Branch
		B		loc_1572 ; Branch
; End of function sub_1534


; =============== S U B	R O U T	I N E =======================================


sub_159C				; CODE XREF: ROM:000022F6p
					; sub_2424+16Cp
					; DATA XREF: ...
		PUSH		{R4,R5,R7,LR} ;	Push registers
		LDRB		R5, [R1] ; Load	from Memory
		MOVS		R7, R1	; Rd = Op2
		LSRS		R1, R5,	#1 ; Logical Shift Right
		BCC		loc_1608 ; Branch
		LDRB		R1, [R7,#0x12] ; Load from Memory
		LDRB		R2, [R7,#0x13] ; Load from Memory
		LDRB		R4, [R7,#0x18] ; Load from Memory
		MULS		R1, R2	; Multiply
		LSRS		R2, R1,	#5 ; Logical Shift Right
		CMP		R4, #1	; Set cond. codes on Op1 - Op2
		BNE		loc_15BA ; Branch
		MOVS		R3, #0x16 ; Rd = Op2
		LDRSB		R1, [R7,R3] ; Load from	Memory
		ADDS		R2, R1,	R2 ; Rd	= Op1 +	Op2

loc_15BA				; CODE XREF: sub_159C+16j
		MOVS		R3, #0x14 ; Rd = Op2
		LDRSB		R1, [R7,R3] ; Load from	Memory
		LSLS		R1, R1,	#1 ; Logical Shift Left
		MOVS		R3, #0x15 ; Rd = Op2
		LDRSB		R3, [R7,R3] ; Load from	Memory
		ADDS		R1, R1,	R3 ; Rd	= Op1 +	Op2
		CMP		R4, #2	; Set cond. codes on Op1 - Op2
		BNE		loc_15D0 ; Branch
		MOVS		R3, #0x16 ; Rd = Op2
		LDRSB		R3, [R7,R3] ; Load from	Memory
		ADDS		R1, R3,	R1 ; Rd	= Op1 +	Op2

loc_15D0				; CODE XREF: sub_159C+2Cj
		MOVS		R3, #0x80 ; 'Ä'	; Rd = Op2
		CMN		R1, R3	; Set cond. codes on Op1 + Op2
		BGE		loc_15DA ; Branch
		NEGS		R1, R3	; Negate
		B		loc_15E0 ; Branch
; ---------------------------------------------------------------------------

loc_15DA				; CODE XREF: sub_159C+38j
		CMP		R1, #0x7F ; ''	; Set cond. codes on Op1 - Op2
		BLE		loc_15E0 ; Branch
		MOVS		R1, #0x7F ; ''	; Rd = Op2

loc_15E0				; CODE XREF: sub_159C+3Cj sub_159C+40j
		ADDS		R3, R1,	#7 ; Rd	= Op1 +	Op2
		ADDS		R3, #0x79 ; 'y'	; Rd = Op1 + Op2
		MULS		R3, R2	; Multiply
		LSRS		R3, R3,	#8 ; Logical Shift Right
		LSLS		R3, R3,	#0x18 ;	Logical	Shift Left
		LSRS		R3, R3,	#0x18 ;	Logical	Shift Right
		CMP		R3, #0xFF ; Set	cond. codes on Op1 - Op2
		BLS		loc_15F2 ; Branch
		MOVS		R3, #0xFF ; Rd = Op2

loc_15F2				; CODE XREF: sub_159C+52j
		STRB		R3, [R7,#0x10] ; Store to Memory
		MOVS		R3, #0x7F ; ''	; Rd = Op2
		SUBS		R1, R3,	R1 ; Rd	= Op1 -	Op2
		MULS		R1, R2	; Multiply
		LSRS		R1, R1,	#8 ; Logical Shift Right
		LSLS		R1, R1,	#0x18 ;	Logical	Shift Left
		LSRS		R1, R1,	#0x18 ;	Logical	Shift Right
		CMP		R1, #0xFF ; Set	cond. codes on Op1 - Op2
		BLS		loc_1606 ; Branch
		MOVS		R1, #0xFF ; Rd = Op2

loc_1606				; CODE XREF: sub_159C+66j
		STRB		R1, [R7,#0x11] ; Store to Memory

loc_1608				; CODE XREF: sub_159C+8j
		LSRS		R1, R5,	#3 ; Logical Shift Right
		BCC		loc_1646 ; Branch
		MOVS		R3, #0xE ; Rd =	Op2
		LDRSB		R1, [R7,R3] ; Load from	Memory
		LDRB		R2, [R7,#0xF] ;	Load from Memory
		MULS		R1, R2	; Multiply
		LSLS		R1, R1,	#2 ; Logical Shift Left
		MOVS		R3, #0xC ; Rd =	Op2
		LDRSB		R2, [R7,R3] ; Load from	Memory
		LSLS		R2, R2,	#2 ; Logical Shift Left
		ADDS		R1, R1,	R2 ; Rd	= Op1 +	Op2
		MOVS		R3, #0xA ; Rd =	Op2
		LDRSB		R2, [R7,R3] ; Load from	Memory
		LSLS		R2, R2,	#8 ; Logical Shift Left
		ADDS		R1, R1,	R2 ; Rd	= Op1 +	Op2
		MOVS		R3, #0xB ; Rd =	Op2
		LDRSB		R2, [R7,R3] ; Load from	Memory
		LSLS		R2, R2,	#8 ; Logical Shift Left
		ADDS		R1, R1,	R2 ; Rd	= Op1 +	Op2
		LDRB		R2, [R7,#0xD] ;	Load from Memory
		ADDS		R1, R1,	R2 ; Rd	= Op1 +	Op2
		LDRB		R2, [R7,#0x18] ; Load from Memory
		CMP		R2, #0	; Set cond. codes on Op1 - Op2
		BNE		loc_1640 ; Branch
		MOVS		R3, #0x16 ; Rd = Op2
		LDRSB		R2, [R7,R3] ; Load from	Memory
		LSLS		R2, R2,	#4 ; Logical Shift Left
		ADDS		R1, R2,	R1 ; Rd	= Op1 +	Op2

loc_1640				; CODE XREF: sub_159C+9Aj
		ASRS		R2, R1,	#8 ; Arithmetic	Shift Right
		STRB		R2, [R7,#8] ; Store to Memory
		STRB		R1, [R7,#9] ; Store to Memory

loc_1646				; CODE XREF: sub_159C+6Ej
		LDR		R2, =0x3007FC0 ; Load from Memory
		MOVS		R1, R7	; Rd = Op2
		LDR		R2, [R2,#0x30] ; Load from Memory
		LDR		R2, [R2,#0x3C] ; Load from Memory
		BL		locret_13C0 ; Branch with Link
; End of function sub_159C

; ---------------------------------------------------------------------------
		LDRB		R0, [R7] ; Load	from Memory
		MOVS		R3, #5	; Rd = Op2
		BICS		R0, R3	; Rd = Op1 & ~Op2
		STRB		R0, [R7] ; Store to Memory
		POP		{R4,R5,R7} ; Pop registers
		POP		{R3}	; Pop registers
		BX		R3	; Branch to/from Thumb mode
; ---------------------------------------------------------------------------
dword_1660	DCD 0x3007FC0		; DATA XREF: sub_159C:loc_1646r

; =============== S U B	R O U T	I N E =======================================


sub_1664				; CODE XREF: sub_1928+6Cp

var_C		= -0xC

		PUSH		{R3,R7,LR} ; Push registers
		MOVS		R7, R0	; Rd = Op2
		LDR		R1, =0x40000C0 ; Load from Memory
		MOVS		R0, #0	; Rd = Op2
		STRH		R0, [R1,#6] ; Store to Memory
		STRH		R0, [R1,#0x12] ; Store to Memory
		LDR		R0, =0x4000080 ; Load from Memory
		MOVS		R2, #0x8F ; 'è'	; Rd = Op2
		STRH		R2, [R0,#4] ; Store to Memory
		LDR		R2, =0xA90E ; Load from	Memory
		STRH		R2, [R0,#2] ; Store to Memory
		LDRB		R2, [R0,#9] ; Load from	Memory
		LSLS		R2, R2,	#0x1A ;	Logical	Shift Left
		LSRS		R2, R2,	#0x1A ;	Logical	Shift Right
		MOVS		R3, #0x40 ; '@'	; Rd = Op2
		ORRS		R2, R3	; Rd = Op1 | Op2
		MOVS		R3, #0x350
		STRB		R2, [R0,#9] ; Store to Memory
		ADDS		R2, R7,	R3 ; Rd	= Op1 +	Op2
		STR		R2, [R0,#0x3C] ; Store to Memory
		LDR		R0, =0x40000A0 ; Load from Memory
		MOVS		R3, #0x980
		STR		R0, [R1] ; Store to Memory
		ADDS		R0, R7,	R3 ; Rd	= Op1 +	Op2
		STR		R0, [R1,#8] ; Store to Memory
		LDR		R0, =0x40000A4 ; Load from Memory
		LDR		R2, =0x50003EC ; Load from Memory
		STR		R0, [R1,#0xC] ;	Store to Memory
		LDR		R0, =0x3007FC0 ; Load from Memory
		STR		R7, [R0,#0x30] ; Store to Memory
		MOVS		R0, #0	; Rd = Op2
		STR		R0, [SP,#0xC+var_C] ; Store to Memory
		MOV		R0, SP	; Rd = Op2
		MOVS		R1, R7	; Rd = Op2
		BL		sub_B4C	; Branch with Link
		MOVS		R0, #8	; Rd = Op2
		STRB		R0, [R7,#6] ; Store to Memory
		MOVS		R0, #0xF ; Rd =	Op2
		STRB		R0, [R7,#7] ; Store to Memory
		LDR		R0, =(sub_2424+1) ; Load from Memory
		STR		R0, [R7,#0x38] ; Store to Memory
		LDR		R0, =(locret_1708+1) ; Load from Memory
		STR		R0, [R7,#0x28] ; Store to Memory
		STR		R0, [R7,#0x2C] ; Store to Memory
		STR		R0, [R7,#0x30] ; Store to Memory
		STR		R0, [R7,#0x3C] ; Store to Memory
		LDR		R0, =dword_3738	; Load from Memory
		STR		R0, [R7,#0x34] ; Store to Memory
		MOVS		R0, #0x40000
		BL		sub_170A ; Branch with Link
		LDR		R0, =0x68736D53	; Load from Memory
		STR		R0, [R7] ; Store to Memory
		POP		{R3,R7}	; Pop registers
		POP		{R3}	; Pop registers
		BX		R3	; Branch to/from Thumb mode
; End of function sub_1664

; ---------------------------------------------------------------------------
dword_16DC	DCD 0x40000C0		; DATA XREF: sub_1664+4r
dword_16E0	DCD 0x4000080		; DATA XREF: sub_1664+Cr
dword_16E4	DCD 0xA90E		; DATA XREF: sub_1664+12r
dword_16E8	DCD 0x40000A0		; DATA XREF: sub_1664+2Ar
dword_16EC	DCD 0x40000A4		; DATA XREF: sub_1664+36r
dword_16F0	DCD 0x3007FC0		; DATA XREF: sub_1664+3Cr
dword_16F4	DCD 0x50003EC		; DATA XREF: sub_1664+38r
off_16F8	DCD sub_2424+1		; DATA XREF: sub_1664+54r
off_16FC	DCD locret_1708+1	; DATA XREF: sub_1664+58r
off_1700	DCD dword_3738		; DATA XREF: sub_1664+62r
dword_1704	DCD 0x68736D53		; DATA XREF: sub_1664+6Er
; ---------------------------------------------------------------------------

locret_1708				; DATA XREF: sub_1664+58o
					; ROM:off_16FCo
		BX		LR	; Branch to/from Thumb mode

; =============== S U B	R O U T	I N E =======================================


sub_170A				; CODE XREF: sub_1664+6Ap sub_179C+70p
					; DATA XREF: ...
		PUSH		{R4,R7,LR} ; Push registers
		LDR		R1, =0x3007FC0 ; Load from Memory
		MOVS		R3, #0xF0000
		ANDS		R0, R3	; Rd = Op1 & Op2
		LDR		R7, [R1,#0x30] ; Load from Memory
		LSRS		R0, R0,	#0x10 ;	Logical	Shift Right
		STRB		R0, [R7,#8] ; Store to Memory
		LDR		R1, =unk_31E8 ;	Load from Memory
		LSLS		R0, R0,	#1 ; Logical Shift Left
		ADDS		R0, R0,	R1 ; Rd	= Op1 +	Op2
		SUBS		R0, #0x20 ; ' '	; Rd = Op1 - Op2
		LDRH		R0, [R0,#0x1E] ; Load from Memory
		MOVS		R1, #0x630
		MOVS		R4, R0	; Rd = Op2
		STR		R0, [R7,#0x10] ; Store to Memory
		BL		sub_3720 ; Branch with Link
		STRB		R0, [R7,#0xB] ;	Store to Memory
		LDR		R0, =0x91D1B ; Load from Memory
		LDR		R3, =0x1388 ; Load from	Memory
		MULS		R0, R4	; Multiply
		ADDS		R1, R0,	R3 ; Rd	= Op1 +	Op2
		LSLS		R0, R3,	#1 ; Logical Shift Left
		BL		sub_3720 ; Branch with Link
		MOVS		R1, #0x1000000
		STR		R0, [R7,#0x14] ; Store to Memory
		BL		sub_3720 ; Branch with Link
		ADDS		R0, #1	; Rd = Op1 + Op2
		ASRS		R0, R0,	#1 ; Arithmetic	Shift Right
		STR		R0, [R7,#0x18] ; Store to Memory
		LDR		R4, =0x4000100 ; Load from Memory
		MOVS		R0, #0	; Rd = Op2
		STRH		R0, [R4,#2] ; Store to Memory
		LDR		R0, [R7,#0x10] ; Load from Memory
		LDR		R1, =0x44940 ; Load from Memory
		BL		sub_3720 ; Branch with Link
		MOVS		R1, #0x10000
		SUBS		R0, R1,	R0 ; Rd	= Op1 -	Op2
		STRH		R0, [R4] ; Store to Memory
		BL		sub_18C8 ; Branch with Link
		MOVS		R0, #0x4000000

loc_176E				; CODE XREF: sub_170A+68j
		LDRB		R1, [R0,#6] ; Load from	Memory
		CMP		R1, #0x9F ; 'ü'	; Set cond. codes on Op1 - Op2
		BEQ		loc_176E ; Branch

loc_1774				; CODE XREF: sub_170A+6Ej
		LDRB		R1, [R0,#6] ; Load from	Memory
		CMP		R1, #0x9F ; 'ü'	; Set cond. codes on Op1 - Op2
		BNE		loc_1774 ; Branch
		MOVS		R0, #0x80 ; 'Ä'	; Rd = Op2
		STRH		R0, [R4,#2] ; Store to Memory
		POP		{R4,R7}	; Pop registers
		POP		{R3}	; Pop registers
		BX		R3	; Branch to/from Thumb mode
; End of function sub_170A

; ---------------------------------------------------------------------------
dword_1784	DCD 0x3007FC0		; DATA XREF: sub_170A+2r
off_1788	DCD unk_31E8		; DATA XREF: sub_170A+10r
dword_178C	DCD 0x91D1B		; DATA XREF: sub_170A+28r
dword_1790	DCD 0x1388		; DATA XREF: sub_170A+2Ar
dword_1794	DCD 0x4000100		; DATA XREF: sub_170A+46r
dword_1798	DCD 0x44940		; DATA XREF: sub_170A+4Er

; =============== S U B	R O U T	I N E =======================================


sub_179C				; CODE XREF: sub_1434+78p sub_1928+72p
		PUSH		{R4,R5,R7,LR} ;	Push registers
		LDR		R1, =0x3007FC0 ; Load from Memory
		LDR		R5, =0x68736D53	; Load from Memory
		LDR		R7, [R1,#0x30] ; Load from Memory
		LDR		R1, [R7] ; Load	from Memory
		CMP		R1, R5	; Set cond. codes on Op1 - Op2
		BNE		loc_1812 ; Branch
		ADDS		R1, #1	; Rd = Op1 + Op2
		STR		R1, [R7] ; Store to Memory
		LSLS		R1, R0,	#0x18 ;	Logical	Shift Left
		LSRS		R1, R1,	#0x18 ;	Logical	Shift Right
		BEQ		loc_17BA ; Branch
		LSLS		R1, R1,	#0x19 ;	Logical	Shift Left
		LSRS		R1, R1,	#0x19 ;	Logical	Shift Right
		STRB		R1, [R7,#5] ; Store to Memory

loc_17BA				; CODE XREF: sub_179C+16j
		MOVS		R1, #0xF00
		ANDS		R1, R0	; Rd = Op1 & Op2
		BEQ		loc_17D6 ; Branch
		LSRS		R1, R1,	#8 ; Logical Shift Right
		STRB		R1, [R7,#6] ; Store to Memory
		MOVS		R1, #0xC ; Rd =	Op2
		MOVS		R3, #0	; Rd = Op2
		ADDS		R2, R7,	#7 ; Rd	= Op1 +	Op2
		ADDS		R2, #0x49 ; 'I'	; Rd = Op1 + Op2

loc_17CE				; CODE XREF: sub_179C+38j
		STRB		R3, [R2] ; Store to Memory
		ADDS		R2, #0x40 ; '@'	; Rd = Op1 + Op2
		SUBS		R1, #1	; Rd = Op1 - Op2
		BNE		loc_17CE ; Branch

loc_17D6				; CODE XREF: sub_179C+24j
		MOVS		R1, #0xF000
		ANDS		R1, R0	; Rd = Op1 & Op2
		BEQ		loc_17E2 ; Branch
		LSRS		R1, R1,	#0xC ; Logical Shift Right
		STRB		R1, [R7,#7] ; Store to Memory

loc_17E2				; CODE XREF: sub_179C+40j
		MOVS		R1, #0xB00000
		ANDS		R1, R0	; Rd = Op1 & Op2
		BEQ		loc_17FE ; Branch
		MOVS		R3, #0x300000
		LDR		R2, =0x4000080 ; Load from Memory
		ANDS		R1, R3	; Rd = Op1 & Op2
		LDRB		R3, [R2,#9] ; Load from	Memory
		LSRS		R1, R1,	#0xE ; Logical Shift Right
		LSLS		R3, R3,	#0x1A ;	Logical	Shift Left
		LSRS		R3, R3,	#0x1A ;	Logical	Shift Right
		ORRS		R1, R3	; Rd = Op1 | Op2
		STRB		R1, [R2,#9] ; Store to Memory

loc_17FE				; CODE XREF: sub_179C+4Cj
		MOVS		R4, #0xF0000
		ANDS		R4, R0	; Rd = Op1 & Op2
		BEQ		loc_1810 ; Branch
		BL		sub_1878 ; Branch with Link
		MOVS		R0, R4	; Rd = Op2
		BL		sub_170A ; Branch with Link

loc_1810				; CODE XREF: sub_179C+68j
		STR		R5, [R7] ; Store to Memory

loc_1812				; CODE XREF: sub_179C+Cj
		POP		{R4,R5,R7} ; Pop registers
		POP		{R3}	; Pop registers
		BX		R3	; Branch to/from Thumb mode
; End of function sub_179C

; ---------------------------------------------------------------------------
dword_1818	DCD 0x3007FC0		; DATA XREF: sub_179C+2r
dword_181C	DCD 0x68736D53		; DATA XREF: sub_179C+4r
dword_1820	DCD 0x4000080		; DATA XREF: sub_179C+52r
; ---------------------------------------------------------------------------
		PUSH		{R4-R7,LR} ; Push registers
		LDR		R0, =0x3007FC0 ; Load from Memory
		LDR		R6, =0x68736D53	; Load from Memory
		LDR		R7, [R0,#0x30] ; Load from Memory
		LDR		R0, [R7] ; Load	from Memory
		CMP		R0, R6	; Set cond. codes on Op1 - Op2
		BNE		loc_1868 ; Branch
		ADDS		R0, #1	; Rd = Op1 + Op2
		STR		R0, [R7] ; Store to Memory
		ADDS		R0, R7,	#7 ; Rd	= Op1 +	Op2
		MOVS		R1, #0xC ; Rd =	Op2
		ADDS		R0, #0x49 ; 'I'	; Rd = Op1 + Op2

loc_183C				; CODE XREF: ROM:00001846j
		MOVS		R2, #0	; Rd = Op2
		STRB		R2, [R0] ; Store to Memory
		ADDS		R0, #0x40 ; '@'	; Rd = Op1 + Op2
		SUBS		R1, #1	; Rd = Op1 - Op2
		CMP		R1, #0	; Set cond. codes on Op1 - Op2
		BGT		loc_183C ; Branch
		LDR		R5, [R7,#0x1C] ; Load from Memory
		CMP		R5, #0	; Set cond. codes on Op1 - Op2
		BEQ		loc_1866 ; Branch
		MOVS		R4, #1	; Rd = Op2

loc_1850				; CODE XREF: ROM:00001860j
		LSLS		R0, R4,	#0x18 ;	Logical	Shift Left
		LSRS		R0, R0,	#0x18 ;	Logical	Shift Right
		LDR		R1, [R7,#0x2C] ; Load from Memory
		BL		sub_13C2 ; Branch with Link
		ADDS		R4, #1	; Rd = Op1 + Op2
		ADDS		R5, #0x40 ; '@'	; Rd = Op1 + Op2
		CMP		R4, #4	; Set cond. codes on Op1 - Op2
		BLE		loc_1850 ; Branch
		MOVS		R2, #0	; Rd = Op2
		STRB		R2, [R5] ; Store to Memory

loc_1866				; CODE XREF: ROM:0000184Cj
		STR		R6, [R7] ; Store to Memory

loc_1868				; CODE XREF: ROM:00001830j
		POP		{R4-R7}	; Pop registers
		POP		{R3}	; Pop registers
		BX		R3	; Branch to/from Thumb mode
; ---------------------------------------------------------------------------
		ALIGN 0x10
dword_1870	DCD 0x3007FC0		; DATA XREF: ROM:00001826r
dword_1874	DCD 0x68736D53		; DATA XREF: ROM:00001828r

; =============== S U B	R O U T	I N E =======================================


sub_1878				; CODE XREF: sub_179C+6Ap
					; sub_1928+3F4p

var_C		= -0xC

		PUSH		{R3,R7,LR} ; Push registers
		LDR		R0, =0x3007FC0 ; Load from Memory
		LDR		R3, =0x68736D53	; Load from Memory
		LDR		R7, [R0,#0x30] ; Load from Memory
		LDR		R0, [R7] ; Load	from Memory
		CMP		R0, R3	; Set cond. codes on Op1 - Op2
		BCC		loc_18B0 ; Branch
		ADDS		R3, #1	; Rd = Op1 + Op2
		CMP		R0, R3	; Set cond. codes on Op1 - Op2
		BHI		loc_18B0 ; Branch
		ADDS		R0, #1	; Rd = Op1 + Op2
		STR		R0, [R7] ; Store to Memory
		MOVS		R0, #0	; Rd = Op2
		LDR		R1, =0x40000C0 ; Load from Memory
		MOVS		R3, #0x35 ; '5'	; Rd = Op2
		STRH		R0, [R1,#6] ; Store to Memory
		STRH		R0, [R1,#0x12] ; Store to Memory
		STRB		R0, [R7,#4] ; Store to Memory
		LSLS		R3, R3,	#4 ; Logical Shift Left
		ADDS		R1, R7,	R3 ; Rd	= Op1 +	Op2
		STR		R0, [SP,#0xC+var_C] ; Store to Memory
		MOV		R0, SP	; Rd = Op2
		LDR		R2, =0x5000318 ; Load from Memory
		BL		sub_B4C	; Branch with Link
		LDR		R0, [R7] ; Load	from Memory
		SUBS		R0, #1	; Rd = Op1 - Op2
		STR		R0, [R7] ; Store to Memory

loc_18B0				; CODE XREF: sub_1878+Cj sub_1878+12j
		POP		{R3,R7}	; Pop registers
		POP		{R3}	; Pop registers
		BX		R3	; Branch to/from Thumb mode
; End of function sub_1878

; ---------------------------------------------------------------------------
		ALIGN 4
dword_18B8	DCD 0x3007FC0		; DATA XREF: sub_1878+2r
dword_18BC	DCD 0x68736D53		; DATA XREF: sub_1878+4r
dword_18C0	DCD 0x40000C0		; DATA XREF: sub_1878+1Ar
dword_18C4	DCD 0x5000318		; DATA XREF: sub_1878+2Cr

; =============== S U B	R O U T	I N E =======================================


sub_18C8				; CODE XREF: sub_170A+5Cp
		MOVS		R1, #0x5B ; '['	; Rd = Op2
		LDR		R0, =0x40000C0 ; Load from Memory
		LSLS		R1, R1,	#9 ; Logical Shift Left
		STRH		R1, [R0,#6] ; Store to Memory
		STRH		R1, [R0,#0x12] ; Store to Memory
		BX		LR	; Branch to/from Thumb mode
; End of function sub_18C8

; ---------------------------------------------------------------------------
dword_18D4	DCD 0x40000C0		; DATA XREF: sub_18C8+2r

; =============== S U B	R O U T	I N E =======================================


sub_18D8				; CODE XREF: ROM:00002372p
					; sub_2424+1D8p
		PUSH		{R4-R7,LR} ; Push registers
		LSLS		R2, R2,	#0x18 ;	Logical	Shift Left
		MOVS		R7, R0	; Rd = Op2
		CMP		R1, #0xB2 ; '≤'	; Set cond. codes on Op1 - Op2
		BLE		loc_18E6 ; Branch
		LDR		R2, =0xFF000000	; Load from Memory
		MOVS		R1, #0xB2 ; '≤'	; Rd = Op2

loc_18E6				; CODE XREF: sub_18D8+8j
		LDR		R0, =unk_3104 ;	Load from Memory
		LDRB		R3, [R0,R1] ; Load from	Memory
		LSLS		R4, R3,	#0x1C ;	Logical	Shift Left
		LSRS		R4, R4,	#0x1C ;	Logical	Shift Right
		LSLS		R4, R4,	#2 ; Logical Shift Left
		ADDS		R5, R0,	#7 ; Rd	= Op1 +	Op2
		ADDS		R5, #0xAD ; '≠'	; Rd = Op1 + Op2
		LDR		R4, [R5,R4] ; Load from	Memory
		LSRS		R6, R3,	#4 ; Logical Shift Right
		LSRS		R4, R6	; Logical Shift	Right
		ADDS		R0, R0,	R1 ; Rd	= Op1 +	Op2
		LDRB		R0, [R0,#1] ; Load from	Memory
		LSLS		R1, R0,	#0x1C ;	Logical	Shift Left
		LSRS		R1, R1,	#0x1C ;	Logical	Shift Right
		LSLS		R1, R1,	#2 ; Logical Shift Left
		LDR		R1, [R5,R1] ; Load from	Memory
		LSRS		R0, R0,	#4 ; Logical Shift Right
		LSRS		R1, R0	; Logical Shift	Right
		SUBS		R0, R1,	R4 ; Rd	= Op1 -	Op2
		MOVS		R1, R2	; Rd = Op2
		BL		sub_1DB4 ; Branch with Link
		ADDS		R1, R0,	R4 ; Rd	= Op1 +	Op2
		LDR		R0, [R7,#4] ; Load from	Memory
		BL		sub_1DB4 ; Branch with Link
		POP		{R4-R7}	; Pop registers
		POP		{R3}	; Pop registers
		BX		R3	; Branch to/from Thumb mode
; End of function sub_18D8

; ---------------------------------------------------------------------------
dword_1920	DCD 0xFF000000		; DATA XREF: sub_18D8+Ar
off_1924	DCD unk_3104		; DATA XREF: sub_18D8:loc_18E6r

; =============== S U B	R O U T	I N E =======================================


sub_1928				; CODE XREF: sub_E0-30p
					; DATA XREF: sub_E0-38o ...

var_48		= -0x48
var_44		= -0x44
var_40		= -0x40
var_3C		= -0x3C
var_38		= -0x38
var_34		= -0x34
var_30		= -0x30
var_2C		= -0x2C
var_28		= -0x28
var_24		= -0x24
var_20		= -0x20
var_1C		= -0x1C
var_18		= -0x18
arg_0		=  0
arg_4		=  4
arg_8		=  8

; FUNCTION CHUNK AT 00000284 SIZE 0000006C BYTES

		PUSH		{R4-R7,LR} ; Push registers
		SUB		SP, SP,	#0x34 ;	Rd = Op1 - Op2
		MOVS		R1, #0	; Rd = Op2
		MOVS		R0, #0	; Rd = Op2
		STR		R0, [SP,#0x48+var_34] ;	Store to Memory
		MOVS		R0, #0x10 ; Rd = Op2
		STR		R0, [SP,#0x48+var_3C] ;	Store to Memory
		MVNS		R7, R1	; Rd = ~Op2
		MOVS		R0, #0xFF ; Rd = Op2
		STR		R1, [SP,#0x48+var_38] ;	Store to Memory
		STR		R1, [SP,#0x48+var_48] ;	Store to Memory
		BL		sub_9C2	; Branch with Link
		LDR		R0, =0x4000300 ; Load from Memory
		MOVS		R5, #1	; Rd = Op2
		STRB		R5, [R0] ; Store to Memory
		MOVS		R0, #1	; Rd = Op2
		BL		sub_800	; Branch with Link
		LDR		R6, =0x4000200 ; Load from Memory
		MOVS		R0, #8	; Rd = Op2
		LSLS		R1, R0,	#0x17 ;	Logical	Shift Left
		STRH		R5, [R6] ; Store to Memory
		STRH		R0, [R1,#4] ; Store to Memory
		LDRH		R0, [R6,#4] ; Load from	Memory
		LSRS		R0, R0,	#0xF ; Logical Shift Right
		BEQ		loc_1962 ; Branch
		BL		loc_284	; Branch with Link
; ---------------------------------------------------------------------------

loc_1962				; CODE XREF: sub_1928+34j
		BL		sub_874	; Branch with Link
		MOVS		R0, #0x7780
		MOVS		R1, #0x4000000
		STRH		R0, [R1,#0xE] ;	Store to Memory
		MOVS		R0, #0x54 ; 'T'	; Rd = Op2
		STR		R0, [SP,#0x48+var_40] ;	Store to Memory
		MOVS		R0, #0x76 ; 'v'	; Rd = Op2
		STR		R0, [SP,#0x48+var_44] ;	Store to Memory
		MOVS		R0, #0x5400
		STR		R0, [R1,#0x38] ; Store to Memory
		MOVS		R0, #0x7600
		STR		R0, [R1,#0x3C] ; Store to Memory
		LDR		R1, =0x4000040 ; Load from Memory
		LDR		R0, =0x10003F5F	; Load from Memory
		STR		R0, [R1,#0x10] ; Store to Memory
		BL		sub_726	; Branch with Link
		BL		sub_2D68 ; Branch with Link
		LDR		R0, =0x3003B2C ; Load from Memory
		BL		sub_1664 ; Branch with Link
		LDR		R0, =0x940A00 ;	Load from Memory
		BL		sub_179C ; Branch with Link
		LDR		R1, =0x300372C ; Load from Memory
		LDR		R0, =0x30036EC ; Load from Memory
		MOVS		R2, #6	; Rd = Op2
		BL		sub_13C4 ; Branch with Link
		LDR		R1, =0x300394C ; Load from Memory
		LDR		R0, =0x300390C ; Load from Memory
		MOVS		R2, #6	; Rd = Op2
		BL		sub_13C4 ; Branch with Link
		B		loc_1C62 ; Branch
; ---------------------------------------------------------------------------

loc_19B4				; CODE XREF: sub_1928+340j
		MOVS		R5, #7	; Rd = Op2
		B		loc_1B0A ; Branch
; ---------------------------------------------------------------------------

loc_19B8				; CODE XREF: sub_1928+1E6j
		MOVS		R0, #6	; Rd = Op2
		SUBS		R2, R0,	R5 ; Rd	= Op1 -	Op2
		LSLS		R0, R2,	#2 ; Logical Shift Left
		ADDS		R0, R0,	R2 ; Rd	= Op1 +	Op2
		ADDS		R0, #8	; Rd = Op1 + Op2
		CMP		R0, R7	; Set cond. codes on Op1 - Op2
		STR		R2, [SP,#0x48+var_18] ;	Store to Memory
		BGT		loc_19D2 ; Branch
		LDR		R3, =0x3003564 ; Load from Memory
		LSLS		R1, R5,	#2 ; Logical Shift Left
		LDR		R2, [R3,R1] ; Load from	Memory
		ADDS		R2, #1	; Rd = Op1 + Op2
		STR		R2, [R3,R1] ; Store to Memory

loc_19D2				; CODE XREF: sub_1928+9Ej
		LDR		R3, =0x3003564 ; Load from Memory
		LSLS		R1, R5,	#2 ; Logical Shift Left
		LDR		R2, [R3,R1] ; Load from	Memory
		LDR		R3, =0x3003580 ; Load from Memory
		LSLS		R1, R5,	#4 ; Logical Shift Left
		ADDS		R1, R1,	R3 ; Rd	= Op1 +	Op2
		LSLS		R4, R5,	#3 ; Logical Shift Left
		STR		R1, [SP,#0x48+var_30] ;	Store to Memory
		STR		R2, [SP,#0x48+var_2C] ;	Store to Memory
		LDR		R6, [R1,#8] ; Load from	Memory
		MOVS		R3, #0x7000000
		STR		R4, [SP,#0x48+var_1C] ;	Store to Memory
		ADDS		R4, R4,	R3 ; Rd	= Op1 +	Op2
		CMP		R6, #0	; Set cond. codes on Op1 - Op2
		BGE		loc_1AC2 ; Branch
		CMP		R0, R7	; Set cond. codes on Op1 - Op2
		BGT		loc_19FA ; Branch
		ADDS		R6, #2	; Rd = Op1 + Op2
		STR		R6, [R1,#8] ; Store to Memory

loc_19FA				; CODE XREF: sub_1928+CCj
		LSLS		R0, R5,	#0x10 ;	Logical	Shift Left
		ASRS		R0, R0,	#0x10 ;	Arithmetic Shift Right
		LDR		R1, [SP,#0x48+var_30] ;	Load from Memory
		BL		sub_738	; Branch with Link
		MOVS		R0, #0x14 ; Rd = Op2
		MULS		R0, R5	; Multiply
		LDR		R1, =0x30035F0 ; Load from Memory
		ADDS		R1, R0,	R1 ; Rd	= Op1 +	Op2
		STR		R1, [SP,#0x48+var_20] ;	Store to Memory
		STR		R1, [SP,#0x48+var_24] ;	Store to Memory
		LDR		R0, [SP,#0x48+var_30] ;	Load from Memory
		BL		sub_768	; Branch with Link
		LSLS		R0, R5,	#5 ; Logical Shift Left
		LDR		R3, =0x7000026 ; Load from Memory
		MOVS		R2, #1	; Rd = Op2
		ADDS		R1, R0,	R3 ; Rd	= Op1 +	Op2
		LDR		R0, [SP,#0x48+var_24] ;	Load from Memory
		MOVS		R3, #8	; Rd = Op2
		ADDS		R0, #0xC ; Rd =	Op1 + Op2
		BL		sub_3730 ; Branch with Link
		MOVS		R3, #0x60 ; '`'	; Rd = Op2
		CMN		R6, R3	; Set cond. codes on Op1 + Op2
		BLE		loc_1AAC ; Branch
		LDR		R0, [R4] ; Load	from Memory
		LSLS		R2, R3,	#3 ; Logical Shift Left
		ORRS		R2, R0	; Rd = Op1 | Op2
		MOVS		R0, #0x3F ; '?'	; Rd = Op2
		MVNS		R0, R0	; Rd = ~Op2
		MOVS		R1, R0	; Rd = Op2
		CMP		R6, R0	; Set cond. codes on Op1 - Op2
		STR		R2, [R4] ; Store to Memory
		BGE		loc_1A44 ; Branch
		CMP		R5, #4	; Set cond. codes on Op1 - Op2
		BGE		loc_1A84 ; Branch

loc_1A44				; CODE XREF: sub_1928+116j
		MOVS		R3, #0x4B ; 'K'	; Rd = Op2
		CMN		R6, R3	; Set cond. codes on Op1 + Op2
		BLT		loc_1A84 ; Branch
		CMP		R6, #0	; Set cond. codes on Op1 - Op2
		BGE		loc_1A76 ; Branch
		LDRH		R0, [R4] ; Load	from Memory
		MOVS		R3, #0x8000
		ORRS		R0, R3	; Rd = Op1 | Op2
		STRH		R0, [R4] ; Store to Memory
		LDR		R0, [SP,#0x48+var_1C] ;	Load from Memory
		LDR		R2, =unk_369C ;	Load from Memory
		ADDS		R0, R0,	R2 ; Rd	= Op1 +	Op2
		LDRH		R2, [R4,#4] ; Load from	Memory
		LDRH		R0, [R0,#4] ; Load from	Memory
		LSRS		R2, R2,	#0xA ; Logical Shift Right
		LSLS		R2, R2,	#0xA ; Logical Shift Left
		ADDS		R0, #4	; Rd = Op1 + Op2
		LSLS		R0, R0,	#0x16 ;	Logical	Shift Left
		LSRS		R0, R0,	#0x16 ;	Logical	Shift Right
		ORRS		R0, R2	; Rd = Op1 | Op2
		STRH		R0, [R4,#4] ; Store to Memory
		MOVS		R0, #0x1F ; Rd = Op2
		MVNS		R0, R0	; Rd = ~Op2
		B		loc_1A84 ; Branch
; ---------------------------------------------------------------------------

loc_1A76				; CODE XREF: sub_1928+124j
		MOVS		R3, #0x300
		BICS		R2, R3	; Rd = Op1 & ~Op2
		MOVS		R0, #0xF ; Rd =	Op2
		MVNS		R0, R0	; Rd = ~Op2
		LSLS		R1, R0,	#1 ; Logical Shift Left
		STR		R2, [R4] ; Store to Memory

loc_1A84				; CODE XREF: sub_1928+11Aj
					; sub_1928+120j ...
		LDR		R2, [SP,#0x48+var_20] ;	Load from Memory
		LDR		R3, =0xFE00FFFF	; Load from Memory
		LDRH		R2, [R2,#8] ; Load from	Memory
		ADDS		R0, R2,	R0 ; Rd	= Op1 +	Op2
		LDR		R2, [R4] ; Load	from Memory
		ANDS		R2, R3	; Rd = Op1 & Op2
		LSLS		R0, R0,	#0x17 ;	Logical	Shift Left
		LSRS		R0, R0,	#0x17 ;	Logical	Shift Right
		LSLS		R0, R0,	#0x10 ;	Logical	Shift Left
		ORRS		R0, R2	; Rd = Op1 | Op2
		STR		R0, [R4] ; Store to Memory
		LDR		R2, [SP,#0x48+var_20] ;	Load from Memory
		LDRH		R2, [R2,#0xA] ;	Load from Memory
		ADDS		R1, R2,	R1 ; Rd	= Op1 +	Op2
		LSRS		R0, R0,	#8 ; Logical Shift Right
		LSLS		R0, R0,	#8 ; Logical Shift Left
		LSLS		R1, R1,	#0x18 ;	Logical	Shift Left
		LSRS		R1, R1,	#0x18 ;	Logical	Shift Right
		ORRS		R0, R1	; Rd = Op1 | Op2
		STR		R0, [R4] ; Store to Memory

loc_1AAC				; CODE XREF: sub_1928+104j
		NEGS		R0, R6	; Negate
		LSLS		R1, R0,	#0x1C ;	Logical	Shift Left
		LSRS		R1, R1,	#0x1C ;	Logical	Shift Right
		LSLS		R1, R1,	#1 ; Logical Shift Left
		LDR		R2, [SP,#0x48+var_18] ;	Load from Memory
		ASRS		R0, R0,	#4 ; Arithmetic	Shift Right
		LSLS		R2, R2,	#2 ; Logical Shift Left
		ADDS		R0, #1	; Rd = Op1 + Op2
		ADDS		R2, #1	; Rd = Op1 + Op2
		BL		sub_7BC	; Branch with Link

loc_1AC2				; CODE XREF: sub_1928+C8j
		LDR		R2, [SP,#0x48+var_2C] ;	Load from Memory
		SUBS		R0, R2,	#7 ; Rd	= Op1 -	Op2
		SUBS		R0, #0x38 ; '8'	; Rd = Op1 - Op2
		CMP		R0, #0x22 ; '"' ; Set cond. codes on Op1 - Op2
		BHI		loc_1AE6 ; Branch
		LDR		R0, =unk_36EC ;	Load from Memory
		LDR		R2, [SP,#0x48+var_2C] ;	Load from Memory
		ADDS		R0, R0,	R2 ; Rd	= Op1 +	Op2
		SUBS		R0, #0x40 ; '@'	; Rd = Op1 - Op2
		LDRB		R1, [R0,#1] ; Load from	Memory
		LDR		R0, [R4] ; Load	from Memory
		LSRS		R2, R0,	#8 ; Logical Shift Right
		LSLS		R2, R2,	#8 ; Logical Shift Left
		ADDS		R0, R0,	R1 ; Rd	= Op1 +	Op2
		LSLS		R0, R0,	#0x18 ;	Logical	Shift Left
		LSRS		R0, R0,	#0x18 ;	Logical	Shift Right
		ORRS		R0, R2	; Rd = Op1 | Op2
		STR		R0, [R4] ; Store to Memory

loc_1AE6				; CODE XREF: sub_1928+1A2j
		LDR		R2, [SP,#0x48+var_2C] ;	Load from Memory
		SUBS		R1, R2,	#7 ; Rd	= Op1 -	Op2
		SUBS		R1, #0x59 ; 'Y'	; Rd = Op1 - Op2
		CMP		R1, #0x50 ; 'P'	; Set cond. codes on Op1 - Op2
		BHI		loc_1B0A ; Branch
		MOVS		R0, #5	; Rd = Op2
		BL		sub_3720 ; Branch with Link
		SUBS		R0, #8	; Rd = Op1 - Op2
		BL		sub_39C	; Branch with Link
		LDR		R2, [SP,#0x48+var_18] ;	Load from Memory
		LSLS		R1, R0,	#2 ; Logical Shift Left
		LSLS		R0, R2,	#2 ; Logical Shift Left
		ADDS		R2, R0,	#1 ; Rd	= Op1 +	Op2
		MOVS		R0, #0	; Rd = Op2
		BL		sub_7BC	; Branch with Link

loc_1B0A				; CODE XREF: sub_1928+8Ej
					; sub_1928+1C6j
		SUBS		R5, #1	; Rd = Op1 - Op2
		BMI		loc_1B10 ; Branch
		B		loc_19B8 ; Branch
; ---------------------------------------------------------------------------

loc_1B10				; CODE XREF: sub_1928+1E4j
		MOVS		R4, #0x7000000
		CMP		R7, #0x6C ; 'l'	; Set cond. codes on Op1 - Op2
		BEQ		loc_1B1C ; Branch
		CMP		R7, #0xB4 ; '¥'	; Set cond. codes on Op1 - Op2
		BNE		loc_1B38 ; Branch

loc_1B1C				; CODE XREF: sub_1928+1EEj
		LDR		R0, [SP,#0x48+var_40] ;	Load from Memory
		MOVS		R1, #6	; Rd = Op2
		SUBS		R0, #0x38 ; '8'	; Rd = Op1 - Op2
		STR		R0, [SP,#0x48+var_40] ;	Store to Memory
		LDR		R0, [SP,#0x48+var_44] ;	Load from Memory
		STR		R1, [SP,#0x48+var_38] ;	Store to Memory
		SUBS		R0, #0x80 ; 'Ä'	; Rd = Op1 - Op2
		STR		R0, [SP,#0x48+var_44] ;	Store to Memory
		MOVS		R0, #0xA ; Rd =	Op2
		STR		R0, [SP,#0x48+var_3C] ;	Store to Memory
		LDR		R0, =0x10001F5F	; Load from Memory
		LDR		R1, =0x4000040 ; Load from Memory
		STR		R0, [R1,#0x10] ; Store to Memory
		B		loc_1BC4 ; Branch
; ---------------------------------------------------------------------------

loc_1B38				; CODE XREF: sub_1928+1F2j
		CMP		R7, #0x6C ; 'l'	; Set cond. codes on Op1 - Op2
		BLE		loc_1BBC ; Branch
		LDR		R0, [SP,#0x48+var_40] ;	Load from Memory
		SUBS		R0, #3	; Rd = Op1 - Op2
		STR		R0, [SP,#0x48+var_40] ;	Store to Memory
		LDR		R0, [SP,#0x48+var_28] ;	Load from Memory
		CMP		R0, #0	; Set cond. codes on Op1 - Op2
		BNE		loc_1B4C ; Branch
		MOVS		R0, #1	; Rd = Op2
		B		loc_1B4E ; Branch
; ---------------------------------------------------------------------------

loc_1B4C				; CODE XREF: sub_1928+21Ej
		MOVS		R0, #2	; Rd = Op2

loc_1B4E				; CODE XREF: sub_1928+222j
		MOVS		R3, #3	; Rd = Op2
		LDR		R1, [R4,#0x48] ; Load from Memory
		LSLS		R3, R3,	#8 ; Logical Shift Left
		BICS		R1, R3	; Rd = Op1 & ~Op2
		LSLS		R0, R0,	#0x1E ;	Logical	Shift Left
		LSRS		R0, R0,	#0x1E ;	Logical	Shift Right
		LSLS		R0, R0,	#8 ; Logical Shift Left
		ORRS		R0, R1	; Rd = Op1 | Op2
		LDR		R1, =0xFE00FFFF	; Load from Memory
		ANDS		R1, R0	; Rd = Op1 & Op2
		MOVS		R3, #0x40000
		ADDS		R0, R0,	R3 ; Rd	= Op1 +	Op2
		LDR		R3, =0xFE00FFFF	; Load from Memory
		BICS		R0, R3	; Rd = Op1 & ~Op2
		ORRS		R0, R1	; Rd = Op1 | Op2
		STR		R0, [R4,#0x48] ; Store to Memory
		MOVS		R5, #0	; Rd = Op2

loc_1B72				; CODE XREF: sub_1928+268j
		LSLS		R0, R5,	#3 ; Logical Shift Left
		ADDS		R0, R0,	R4 ; Rd	= Op1 +	Op2
		ADDS		R1, R0,	#7 ; Rd	= Op1 +	Op2
		ADDS		R1, #0x79 ; 'y'	; Rd = Op1 + Op2
		MOVS		R2, #3	; Rd = Op2
		MOVS		R6, R1	; Rd = Op2
		BL		sub_B4C	; Branch with Link
		LDRH		R0, [R6] ; Load	from Memory
		MOVS		R3, #0xC00
		EORS		R0, R3	; Rd = Op1 ^ Op2
		ADDS		R5, #1	; Rd = Op1 + Op2
		CMP		R5, #9	; Set cond. codes on Op1 - Op2
		STRH		R0, [R6] ; Store to Memory
		BLT		loc_1B72 ; Branch
		MOVS		R0, #6	; Rd = Op2
		MOVS		R1, R7	; Rd = Op2
		BL		sub_3720 ; Branch with Link
		CMP		R1, #0	; Set cond. codes on Op1 - Op2
		BNE		loc_1BB2 ; Branch
		LDR		R1, [SP,#0x48+var_38] ;	Load from Memory
		LDR		R0, [SP,#0x48+var_3C] ;	Load from Memory
		ADDS		R1, #1	; Rd = Op1 + Op2
		SUBS		R0, #1	; Rd = Op1 - Op2
		STR		R0, [SP,#0x48+var_3C] ;	Store to Memory
		LSLS		R0, R0,	#8 ; Logical Shift Left
		ORRS		R0, R1	; Rd = Op1 | Op2
		STR		R1, [SP,#0x48+var_38] ;	Store to Memory
		LDR		R1, =0x4000040 ; Load from Memory
		STRH		R0, [R1,#0x12] ; Store to Memory

loc_1BB2				; CODE XREF: sub_1928+274j
		LDR		R0, =0x3F27 ; Load from	Memory
		LDR		R1, =0x4000040 ; Load from Memory
		STRH		R0, [R1,#0xA] ;	Store to Memory
		LDR		R0, =0x9802 ; Load from	Memory
		B		loc_1BBE ; Branch
; ---------------------------------------------------------------------------

loc_1BBC				; CODE XREF: sub_1928+212j
		LDR		R0, =0x1002 ; Load from	Memory

loc_1BBE				; CODE XREF: sub_1928+292j
		MOVS		R1, #0x4000000
		STRH		R0, [R1] ; Store to Memory

loc_1BC4				; CODE XREF: sub_1928+20Ej
		LDR		R0, [SP,#0x48+var_40] ;	Load from Memory
		LSLS		R0, R0,	#8 ; Logical Shift Left
		MOVS		R1, #0x4000000
		STR		R0, [R1,#0x38] ; Store to Memory
		LDR		R0, [SP,#0x48+var_44] ;	Load from Memory
		LSLS		R0, R0,	#8 ; Logical Shift Left
		STR		R0, [R1,#0x3C] ; Store to Memory
		CMP		R7, #0x10 ; Set	cond. codes on Op1 - Op2
		BLT		loc_1BE4 ; Branch
		BL		sub_1DC4 ; Branch with Link
		CMP		R7, #0x10 ; Set	cond. codes on Op1 - Op2
		BNE		loc_1BE4 ; Branch
		LDR		R1, =(dword_382C+0xDC) ; Load from Memory
		B		loc_1BEA ; Branch
; ---------------------------------------------------------------------------

loc_1BE4				; CODE XREF: sub_1928+2AEj
					; sub_1928+2B6j
		CMP		R7, #0xA2 ; '¢'	; Set cond. codes on Op1 - Op2
		BNE		loc_1BF0 ; Branch
		LDR		R1, =(dword_382C+0x194)	; Load from Memory

loc_1BEA				; CODE XREF: sub_1928+2BAj
		LDR		R0, =0x30036EC ; Load from Memory
		BL		sub_1434 ; Branch with Link

loc_1BF0				; CODE XREF: sub_1928+2BEj
		SUBS		R0, R7,	#7 ; Rd	= Op1 -	Op2
		SUBS		R0, #0x3A ; ':'	; Rd = Op1 - Op2
		CMP		R0, #0x4F ; 'O'	; Set cond. codes on Op1 - Op2
		BCS		loc_1C1C ; Branch
		LDR		R0, [SP,#0x48+var_28] ;	Load from Memory
		CMP		R0, #0	; Set cond. codes on Op1 - Op2
		BNE		loc_1C1C ; Branch
		LDR		R0, =0x3000064 ; Load from Memory
		MOVS		R3, #1	; Rd = Op2
		LDR		R0, [R0,#0x24] ; Load from Memory
		CMN		R0, R3	; Set cond. codes on Op1 + Op2
		BEQ		loc_1C1C ; Branch
		LDR		R0, =0x4000130 ; Load from Memory
		LDRB		R0, [R0] ; Load	from Memory
		CMP		R0, #0xF3 ; 'Û'	; Set cond. codes on Op1 - Op2
		BNE		loc_1C1C ; Branch
		LDR		R1, =(dword_382C+0x70) ; Load from Memory
		LDR		R0, =0x300390C ; Load from Memory
		BL		sub_1434 ; Branch with Link
		MOVS		R0, #1	; Rd = Op2
		STR		R0, [SP,#0x48+var_28] ;	Store to Memory

loc_1C1C				; CODE XREF: sub_1928+2CEj
					; sub_1928+2D4j ...
		CMP		R7, #0x38 ; '8'	; Set cond. codes on Op1 - Op2
		BLE		loc_1C3C ; Branch
		LDR		R0, [SP,#0x48+var_28] ;	Load from Memory
		CMP		R0, #0	; Set cond. codes on Op1 - Op2
		BEQ		loc_1C3C ; Branch
		LDR		R1, [SP,#0x48+var_48] ;	Load from Memory
		CMP		R1, #0x20 ; ' '	; Set cond. codes on Op1 - Op2
		BGE		loc_1C32 ; Branch
		LDR		R1, [SP,#0x48+var_48] ;	Load from Memory
		ADDS		R1, #2	; Rd = Op1 + Op2
		STR		R1, [SP,#0x48+var_48] ;	Store to Memory

loc_1C32				; CODE XREF: sub_1928+302j
		MOVS		R2, #0x1F ; Rd = Op2
		MOVS		R0, #6	; Rd = Op2
		LDR		R1, [SP,#0x48+var_48] ;	Load from Memory
		BL		sub_7BC	; Branch with Link

loc_1C3C				; CODE XREF: sub_1928+2F6j
					; sub_1928+2FCj
		BL		sub_2B34 ; Branch with Link
		LDR		R1, =0x4000200 ; Load from Memory
		MOVS		R0, #1	; Rd = Op2
		STRH		R0, [R1,#8] ; Store to Memory
		BL		sub_3728 ; Branch with Link
		CMP		R7, #0x10 ; Set	cond. codes on Op1 - Op2
		BGE		loc_1C62 ; Branch
		LDR		R1, [SP,#0x48+var_38] ;	Load from Memory
		LDR		R0, [SP,#0x48+var_3C] ;	Load from Memory
		ADDS		R1, #1	; Rd = Op1 + Op2
		SUBS		R0, #1	; Rd = Op1 - Op2
		STR		R0, [SP,#0x48+var_3C] ;	Store to Memory
		LSLS		R0, R0,	#8 ; Logical Shift Left
		ORRS		R0, R1	; Rd = Op1 | Op2
		STR		R1, [SP,#0x48+var_38] ;	Store to Memory
		LDR		R1, =0x4000040 ; Load from Memory
		STRH		R0, [R1,#0x12] ; Store to Memory

loc_1C62				; CODE XREF: sub_1928+8Aj
					; sub_1928+324j
		ADDS		R7, #1	; Rd = Op1 + Op2
		CMP		R7, #0xD2 ; '“'	; Set cond. codes on Op1 - Op2
		BGT		loc_1C6A ; Branch
		B		loc_19B4 ; Branch
; ---------------------------------------------------------------------------

loc_1C6A				; CODE XREF: sub_1928+33Ej
		LDR		R0, =0x3000088 ; Load from Memory
		BL		sub_6E8	; Branch with Link
		MOVS		R6, #0	; Rd = Op2
		MOVS		R7, R0	; Rd = Op2
		CMP		R0, #0	; Set cond. codes on Op1 - Op2
		LDR		R5, =0x3FFFFF0 ; Load from Memory
		BNE		loc_1C80 ; Branch
		LDR		R0, [SP,#0x48+var_28] ;	Load from Memory
		CMP		R0, #0	; Set cond. codes on Op1 - Op2
		BEQ		loc_1CD8 ; Branch

loc_1C80				; CODE XREF: sub_1928+350j
		MOVS		R0, #1	; Rd = Op2
		STRB		R0, [R5,#0xB] ;	Store to Memory
		STRB		R6, [R5,#7] ; Store to Memory

loc_1C86				; CODE XREF: sub_1928+374j
					; sub_1928+37Aj ...
		BL		sub_2B34 ; Branch with Link
		LSLS		R0, R0,	#0x18 ;	Logical	Shift Left
		LSRS		R0, R0,	#0x18 ;	Logical	Shift Right
		STRB		R0, [R5,#0xA] ;	Store to Memory
		BNE		loc_1CD8 ; Branch
		BL		sub_1DC4 ; Branch with Link
		BL		sub_3728 ; Branch with Link
		CMP		R7, #0	; Set cond. codes on Op1 - Op2
		BNE		loc_1C86 ; Branch
		LDRB		R0, [R5,#7] ; Load from	Memory
		CMP		R0, #0	; Set cond. codes on Op1 - Op2
		BNE		loc_1C86 ; Branch
		LDRB		R0, [R5,#0xB] ;	Load from Memory
		CMP		R0, #0	; Set cond. codes on Op1 - Op2
		BEQ		loc_1CC2 ; Branch
		LDR		R0, =0x4000130 ; Load from Memory
		LDRB		R0, [R0] ; Load	from Memory
		MVNS		R0, R0	; Rd = ~Op2
		MOVS		R3, #0xF3 ; 'Û'	; Rd = Op2
		ANDS		R0, R3	; Rd = Op1 & Op2
		BEQ		loc_1C86 ; Branch
		LDR		R1, =(dword_380C+0xC) ;	Load from Memory
		LDR		R0, =0x300390C ; Load from Memory
		BL		sub_1434 ; Branch with Link
		STRB		R6, [R5,#0xB] ;	Store to Memory
		B		loc_1C86 ; Branch
; ---------------------------------------------------------------------------

loc_1CC2				; CODE XREF: sub_1928+380j
		LDR		R1, [SP,#0x48+var_48] ;	Load from Memory
		CMP		R1, #0	; Set cond. codes on Op1 - Op2
		BLE		loc_1CD8 ; Branch
		LDR		R1, [SP,#0x48+var_48] ;	Load from Memory
		MOVS		R2, #0x1F ; Rd = Op2
		SUBS		R1, #1	; Rd = Op1 - Op2
		STR		R1, [SP,#0x48+var_48] ;	Store to Memory
		MOVS		R0, #6	; Rd = Op2
		BL		sub_7BC	; Branch with Link
		B		loc_1C86 ; Branch
; ---------------------------------------------------------------------------

loc_1CD8				; CODE XREF: sub_1928+356j
					; sub_1928+368j ...
		LDR		R1, =0x103FBF ;	Load from Memory
		LDR		R0, =0x4000040 ; Load from Memory
		STR		R1, [R0,#0x10] ; Store to Memory
		STR		R6, [R0,#0x14] ; Store to Memory
		MOVS		R1, #0	; Rd = Op2

loc_1CE2				; CODE XREF: sub_1928+3CAj
		LSLS		R2, R1,	#3 ; Logical Shift Left
		LDR		R7, [R4,R2] ; Load from	Memory
		MOVS		R3, #0xC00
		BICS		R7, R3	; Rd = Op1 & ~Op2
		ADDS		R1, #1	; Rd = Op1 + Op2
		CMP		R1, #9	; Set cond. codes on Op1 - Op2
		STR		R7, [R4,R2] ; Store to Memory
		BLT		loc_1CE2 ; Branch
		MOVS		R7, #0	; Rd = Op2
		MVNS		R7, R7	; Rd = ~Op2
		MOVS		R4, R0	; Rd = Op2
		B		loc_1D16 ; Branch
; ---------------------------------------------------------------------------

loc_1CFC				; CODE XREF: sub_1928+3F2j
		BL		sub_1DC4 ; Branch with Link
		BL		sub_3728 ; Branch with Link
		LSRS		R0, R7,	#1 ; Logical Shift Right
		BCS		loc_1D16 ; Branch
		LDR		R0, [SP,#0x48+var_34] ;	Load from Memory
		CMP		R0, #0x10 ; Set	cond. codes on Op1 - Op2
		BEQ		loc_1D16 ; Branch
		LDR		R0, [SP,#0x48+var_34] ;	Load from Memory
		ADDS		R0, #1	; Rd = Op1 + Op2
		STR		R0, [SP,#0x48+var_34] ;	Store to Memory
		STR		R0, [R4,#0x14] ; Store to Memory

loc_1D16				; CODE XREF: sub_1928+3D2j
					; sub_1928+3DEj ...
		ADDS		R7, #1	; Rd = Op1 + Op2
		CMP		R7, #0x32 ; '2'	; Set cond. codes on Op1 - Op2
		BLE		loc_1CFC ; Branch
		BL		sub_1878 ; Branch with Link
		LDRB		R0, [R5,#0xA] ;	Load from Memory
		CMP		R0, #0	; Set cond. codes on Op1 - Op2
		BEQ		loc_1DA4 ; Branch
		MOVS		R0, #0xDE ; 'ﬁ'	; Rd = Op2
		B		loc_1DA6 ; Branch
; ---------------------------------------------------------------------------
		B		loc_1DA4 ; Branch
; ---------------------------------------------------------------------------
dword_1D2C	DCD 0x4000300		; DATA XREF: sub_1928+1Ar
dword_1D30	DCD 0x4000200		; DATA XREF: sub_1928+26r
					; sub_1928+318r
dword_1D34	DCD 0x10003F5F		; DATA XREF: sub_1928+5Er
dword_1D38	DCD 0x4000040		; DATA XREF: sub_1928+5Cr
					; sub_1928+20Ar ...
dword_1D3C	DCD 0x3003B2C		; DATA XREF: sub_1928+6Ar
dword_1D40	DCD 0x940A00		; DATA XREF: sub_1928+70r
dword_1D44	DCD 0x300372C		; DATA XREF: sub_1928+76r
dword_1D48	DCD 0x30036EC		; DATA XREF: sub_1928+78r
					; sub_1928:loc_1BEAr
dword_1D4C	DCD 0x300394C		; DATA XREF: sub_1928+80r
dword_1D50	DCD 0x300390C		; DATA XREF: sub_1928+82r
					; sub_1928+2EAr ...
dword_1D54	DCD 0x3003564		; DATA XREF: sub_1928+A0r
					; sub_1928:loc_19D2r
dword_1D58	DCD 0x3003580		; DATA XREF: sub_1928+B0r
dword_1D5C	DCD 0x30035F0		; DATA XREF: sub_1928+E0r
dword_1D60	DCD 0x7000026		; DATA XREF: sub_1928+F0r
off_1D64	DCD unk_369C		; DATA XREF: sub_1928+132r
dword_1D68	DCD 0xFE00FFFF		; DATA XREF: sub_1928+15Er
					; sub_1928+236r ...
off_1D6C	DCD unk_36EC		; DATA XREF: sub_1928+1A4r
dword_1D70	DCD 0x10001F5F		; DATA XREF: sub_1928+208r
dword_1D74	DCD 0x3F27		; DATA XREF: sub_1928:loc_1BB2r
dword_1D78	DCD 0x9802		; DATA XREF: sub_1928+290r
dword_1D7C	DCD 0x1002		; DATA XREF: sub_1928:loc_1BBCr
off_1D80	DCD dword_382C+0xDC	; DATA XREF: sub_1928+2B8r
off_1D84	DCD dword_382C+0x194	; DATA XREF: sub_1928+2C0r
dword_1D88	DCD 0x3000064		; DATA XREF: sub_1928+2D6r
dword_1D8C	DCD 0x4000130		; DATA XREF: sub_1928+2E0r
					; sub_1928+382r
off_1D90	DCD dword_382C+0x70	; DATA XREF: sub_1928+2E8r
dword_1D94	DCD 0x3000088		; DATA XREF: sub_1928:loc_1C6Ar
dword_1D98	DCD 0x3FFFFF0		; DATA XREF: sub_1928+34Er
off_1D9C	DCD dword_380C+0xC	; DATA XREF: sub_1928+38Er
dword_1DA0	DCD 0x103FBF		; DATA XREF: sub_1928:loc_1CD8r
; ---------------------------------------------------------------------------

loc_1DA4				; CODE XREF: sub_1928+3FCj
					; sub_1928+402j
		MOVS		R0, #0xFF ; Rd = Op2

loc_1DA6				; CODE XREF: sub_1928+400j
		BL		sub_9C2	; Branch with Link
		ADD		SP, SP,	#0x34 ;	Rd = Op1 + Op2
		POP		{R4-R7}	; Pop registers
		POP		{R3}	; Pop registers
		BX		R3	; Branch to/from Thumb mode
; End of function sub_1928

; ---------------------------------------------------------------------------
		ALIGN 4

; =============== S U B	R O U T	I N E =======================================


sub_1DB4				; CODE XREF: sub_18D8+36p sub_18D8+3Ep
		ADR		R2, 0x1DB8 ; Load address
		BX		R2 ; loc_1DB8 ;	Branch to/from Thumb mode
; ---------------------------------------------------------------------------
		CODE32

loc_1DB8				; CODE XREF: sub_1DB4+2j
		UMULL		R2, R3,	R0, R1 ; Unsigned Multiply long
		MOV		R0, R3	; Rd = Op2
		BX		LR	; Branch to/from Thumb mode
; End of function sub_1DB4

		CODE16

; =============== S U B	R O U T	I N E =======================================


sub_1DC4				; CODE XREF: sub_1928+2B0p
					; sub_1928+36Ap ...

var_3C		= -0x3C
var_38		= -0x38
var_34		= -0x34
var_30		= -0x30
var_2C		= -0x2C
var_28		= -0x28

		LDR		R0, =0x3007FF0 ; Load from Memory
		LDR		R0, [R0] ; Load	from Memory
		LDR		R2, =0x68736D53	; Load from Memory
		LDR		R3, [R0] ; Load	from Memory
		CMP		R2, R3	; Set cond. codes on Op1 - Op2
		BEQ		loc_1DD2 ; Branch
		BX		LR	; Branch to/from Thumb mode
; ---------------------------------------------------------------------------

loc_1DD2				; CODE XREF: sub_1DC4+Aj
		ADDS		R3, R3,	#1 ; Rd	= Op1 +	Op2
		STR		R3, [R0] ; Store to Memory
		PUSH		{R4-R7,LR} ; Push registers
		MOV		R1, R8	; Rd = Op2
		MOV		R2, R9	; Rd = Op2
		MOV		R3, R10	; Rd = Op2
		MOV		R4, R11	; Rd = Op2
		PUSH		{R0-R4}	; Push registers
		SUB		SP, SP,	#0x14 ;	Rd = Op1 - Op2
		LDR		R3, [R0,#0x20] ; Load from Memory
		CMP		R3, #0	; Set cond. codes on Op1 - Op2
		BEQ		loc_1DF2 ; Branch
		LDR		R0, [R0,#0x24] ; Load from Memory
		BL		nullsub_1 ; Branch with	Link
; ---------------------------------------------------------------------------
		LDR		R0, [SP,#0x3C+var_28] ;	Load from Memory

loc_1DF2				; CODE XREF: sub_1DC4+24j
		LDR		R3, [R0,#0x28] ; Load from Memory
		BL		nullsub_1 ; Branch with	Link
; ---------------------------------------------------------------------------
		LDR		R0, [SP,#0x3C+var_28] ;	Load from Memory
		LDR		R3, [R0,#0x10] ; Load from Memory
		MOV		R8, R3	; Rd = Op2
		LDR		R5, =0x350 ; Load from Memory
		ADDS		R5, R5,	R0 ; Rd	= Op1 +	Op2
		LDRB		R4, [R0,#4] ; Load from	Memory
		SUBS		R7, R4,	#1 ; Rd	= Op1 -	Op2
		BLS		loc_1E12 ; Branch
		LDRB		R1, [R0,#0xB] ;	Load from Memory
		SUBS		R1, R1,	R7 ; Rd	= Op1 -	Op2
		MOV		R2, R8	; Rd = Op2
		MULS		R2, R1	; Multiply
		ADDS		R5, R5,	R2 ; Rd	= Op1 +	Op2

loc_1E12				; CODE XREF: sub_1DC4+42j
		STR		R5, [SP,#0x3C+var_34] ;	Store to Memory
		LDR		R6, =0x630 ; Load from Memory
		LDRB		R3, [R0,#5] ; Load from	Memory
		CMP		R3, #0	; Set cond. codes on Op1 - Op2
		BEQ		loc_1E74 ; Branch
		ADR		R1, 0x1E20 ; Load address
		BX		R1 ; loc_1E20 ;	Branch to/from Thumb mode
; ---------------------------------------------------------------------------
		CODE32

loc_1E20				; CODE XREF: sub_1DC4+5Aj
		CMP		R4, #2	; Set cond. codes on Op1 - Op2
		ADDEQ		R7, R0,	#0x350 ; Rd = Op1 + Op2
		ADDNE		R7, R5,	R8 ; Rd	= Op1 +	Op2
		MOV		R4, R8	; Rd = Op2

loc_1E30				; CODE XREF: sub_1DC4+A4j
		LDRSB		R0, [R5,R6] ; Load from	Memory
		LDRSB		R1, [R5] ; Load	from Memory
		ADD		R0, R0,	R1 ; Rd	= Op1 +	Op2
		LDRSB		R1, [R7,R6] ; Load from	Memory
		ADD		R0, R0,	R1 ; Rd	= Op1 +	Op2
		LDRSB		R1, [R7],#1 ; Load from	Memory
		ADD		R0, R0,	R1 ; Rd	= Op1 +	Op2
		MUL		R1, R0,	R3 ; Multiply
		MOV		R0, R1,ASR#9 ; Rd = Op2
		TST		R0, #0x80 ; Set	cond. codes on Op1 & Op2
		ADDNE		R0, R0,	#1 ; Rd	= Op1 +	Op2
		STRB		R0, [R5,R6] ; Store to Memory
		STRB		R0, [R5],#1 ; Store to Memory
		SUBS		R4, R4,	#1 ; Rd	= Op1 -	Op2
		BGT		loc_1E30 ; Branch
		ADR		R0, (loc_1EA2+1) ; Load	address
		BX		R0 ; loc_1EA2 ;	Branch to/from Thumb mode
; ---------------------------------------------------------------------------
		CODE16

loc_1E74				; CODE XREF: sub_1DC4+56j
		MOVS		R0, #0	; Rd = Op2
		MOV		R1, R8	; Rd = Op2
		ADDS		R6, R6,	R5 ; Rd	= Op1 +	Op2
		LSRS		R1, R1,	#3 ; Logical Shift Right
		BCC		loc_1E82 ; Branch
		STMIA		R5!, {R0} ; Store Block	to Memory
		STMIA		R6!, {R0} ; Store Block	to Memory

loc_1E82				; CODE XREF: sub_1DC4+B8j
		LSRS		R1, R1,	#1 ; Logical Shift Right
		BCC		loc_1E8E ; Branch
		STMIA		R5!, {R0} ; Store Block	to Memory
		STMIA		R6!, {R0} ; Store Block	to Memory
		STMIA		R5!, {R0} ; Store Block	to Memory
		STMIA		R6!, {R0} ; Store Block	to Memory

loc_1E8E				; CODE XREF: sub_1DC4+C0j sub_1DC4+DCj
		STMIA		R5!, {R0} ; Store Block	to Memory
		STMIA		R6!, {R0} ; Store Block	to Memory
		STMIA		R5!, {R0} ; Store Block	to Memory
		STMIA		R6!, {R0} ; Store Block	to Memory
		STMIA		R5!, {R0} ; Store Block	to Memory
		STMIA		R6!, {R0} ; Store Block	to Memory
		STMIA		R5!, {R0} ; Store Block	to Memory
		STMIA		R6!, {R0} ; Store Block	to Memory
		SUBS		R1, R1,	#1 ; Rd	= Op1 -	Op2
		BGT		loc_1E8E ; Branch

loc_1EA2				; CODE XREF: sub_1DC4+ACj
					; DATA XREF: sub_1DC4+A8o
		LDR		R4, [SP,#0x3C+var_28] ;	Load from Memory
		LDR		R0, [R4,#0x14] ; Load from Memory
		MOV		R9, R0	; Rd = Op2
		LDR		R0, [R4,#0x18] ; Load from Memory
		MOV		R12, R0	; Rd = Op2
		LDRB		R0, [R4,#6] ; Load from	Memory
		ADDS		R4, #0x50 ; 'P'	; Rd = Op1 + Op2

loc_1EB0				; CODE XREF: sub_1DC4+328j
		STR		R0, [SP,#0x3C+var_38] ;	Store to Memory
		LDR		R3, [R4,#0x24] ; Load from Memory
		LDRB		R6, [R4] ; Load	from Memory
		MOVS		R0, #0xC7 ; '«'	; Rd = Op2
		TST		R0, R6	; Set cond. codes on Op1 & Op2
		BNE		loc_1EBE ; Branch
		B		loc_20E4 ; Branch
; ---------------------------------------------------------------------------

loc_1EBE				; CODE XREF: sub_1DC4+F6j
		MOVS		R0, #0x80 ; 'Ä'	; Rd = Op2
		TST		R0, R6	; Set cond. codes on Op1 & Op2
		BEQ		loc_1EEE ; Branch
		MOVS		R0, #0x40 ; '@'	; Rd = Op2
		TST		R0, R6	; Set cond. codes on Op1 & Op2
		BNE		loc_1EFE ; Branch
		MOVS		R6, #3	; Rd = Op2
		STRB		R6, [R4] ; Store to Memory
		MOVS		R0, R3	; Rd = Op2
		ADDS		R0, #0x10 ; Rd = Op1 + Op2
		STR		R0, [R4,#0x28] ; Store to Memory
		LDR		R0, [R3,#0xC] ;	Load from Memory
		STR		R0, [R4,#0x18] ; Store to Memory
		MOVS		R5, #0	; Rd = Op2
		STRB		R5, [R4,#9] ; Store to Memory
		STR		R5, [R4,#0x1C] ; Store to Memory
		LDRB		R2, [R3,#3] ; Load from	Memory
		MOVS		R0, #0xC0 ; '¿'	; Rd = Op2
		TST		R0, R2	; Set cond. codes on Op1 & Op2
		BEQ		loc_1F46 ; Branch
		MOVS		R0, #0x10 ; Rd = Op2
		ORRS		R6, R0	; Rd = Op1 | Op2
		STRB		R6, [R4] ; Store to Memory
		B		loc_1F46 ; Branch
; ---------------------------------------------------------------------------

loc_1EEE				; CODE XREF: sub_1DC4+FEj
		LDRB		R5, [R4,#9] ; Load from	Memory
		MOVS		R0, #4	; Rd = Op2
		TST		R0, R6	; Set cond. codes on Op1 & Op2
		BEQ		loc_1F04 ; Branch
		LDRB		R0, [R4,#0xD] ;	Load from Memory
		SUBS		R0, R0,	#1 ; Rd	= Op1 -	Op2
		STRB		R0, [R4,#0xD] ;	Store to Memory
		BHI		loc_1F54 ; Branch

loc_1EFE				; CODE XREF: sub_1DC4+104j
					; sub_1DC4+156j
		MOVS		R0, #0	; Rd = Op2
		STRB		R0, [R4] ; Store to Memory
		B		loc_20E4 ; Branch
; ---------------------------------------------------------------------------

loc_1F04				; CODE XREF: sub_1DC4+130j
		MOVS		R0, #0x40 ; '@'	; Rd = Op2
		TST		R0, R6	; Set cond. codes on Op1 & Op2
		BEQ		loc_1F24 ; Branch
		LDRB		R0, [R4,#7] ; Load from	Memory
		MULS		R5, R0	; Multiply
		LSRS		R5, R5,	#8 ; Logical Shift Right
		LDRB		R0, [R4,#0xC] ;	Load from Memory
		CMP		R5, R0	; Set cond. codes on Op1 - Op2
		BHI		loc_1F54 ; Branch

loc_1F16				; CODE XREF: sub_1DC4+176j
		LDRB		R5, [R4,#0xC] ;	Load from Memory
		CMP		R5, #0	; Set cond. codes on Op1 - Op2
		BEQ		loc_1EFE ; Branch
		MOVS		R0, #4	; Rd = Op2
		ORRS		R6, R0	; Rd = Op1 | Op2
		STRB		R6, [R4] ; Store to Memory
		B		loc_1F54 ; Branch
; ---------------------------------------------------------------------------

loc_1F24				; CODE XREF: sub_1DC4+144j
		MOVS		R2, #3	; Rd = Op2
		ANDS		R2, R6	; Rd = Op1 & Op2
		CMP		R2, #2	; Set cond. codes on Op1 - Op2
		BNE		loc_1F42 ; Branch
		LDRB		R0, [R4,#5] ; Load from	Memory
		MULS		R5, R0	; Multiply
		LSRS		R5, R5,	#8 ; Logical Shift Right
		LDRB		R0, [R4,#6] ; Load from	Memory
		CMP		R5, R0	; Set cond. codes on Op1 - Op2
		BHI		loc_1F54 ; Branch
		MOVS		R5, R0	; Rd = Op2
		BEQ		loc_1F16 ; Branch
		SUBS		R6, R6,	#1 ; Rd	= Op1 -	Op2
		STRB		R6, [R4] ; Store to Memory
		B		loc_1F54 ; Branch
; ---------------------------------------------------------------------------

loc_1F42				; CODE XREF: sub_1DC4+166j
		CMP		R2, #3	; Set cond. codes on Op1 - Op2
		BNE		loc_1F54 ; Branch

loc_1F46				; CODE XREF: sub_1DC4+120j
					; sub_1DC4+128j
		LDRB		R0, [R4,#4] ; Load from	Memory
		ADDS		R5, R5,	R0 ; Rd	= Op1 +	Op2
		CMP		R5, #0xFF ; Set	cond. codes on Op1 - Op2
		BCC		loc_1F54 ; Branch
		MOVS		R5, #0xFF ; Rd = Op2
		SUBS		R6, R6,	#1 ; Rd	= Op1 -	Op2
		STRB		R6, [R4] ; Store to Memory

loc_1F54				; CODE XREF: sub_1DC4+138j
					; sub_1DC4+150j ...
		STRB		R5, [R4,#9] ; Store to Memory
		LDR		R0, [SP,#0x3C+var_28] ;	Load from Memory
		LDRB		R0, [R0,#7] ; Load from	Memory
		ADDS		R0, R0,	#1 ; Rd	= Op1 +	Op2
		MULS		R0, R5	; Multiply
		LSRS		R5, R0,	#4 ; Logical Shift Right
		LDRB		R0, [R4,#2] ; Load from	Memory
		MULS		R0, R5	; Multiply
		LSRS		R0, R0,	#8 ; Logical Shift Right
		STRB		R0, [R4,#0xA] ;	Store to Memory
		LDRB		R0, [R4,#3] ; Load from	Memory
		MULS		R0, R5	; Multiply
		LSRS		R0, R0,	#8 ; Logical Shift Right
		STRB		R0, [R4,#0xB] ;	Store to Memory
		MOVS		R0, #0x10 ; Rd = Op2
		ANDS		R0, R6	; Rd = Op1 & Op2
		STR		R0, [SP,#0x3C+var_2C] ;	Store to Memory
		BEQ		loc_1F88 ; Branch
		MOVS		R0, R3	; Rd = Op2
		ADDS		R0, #0x10 ; Rd = Op1 + Op2
		LDR		R1, [R3,#8] ; Load from	Memory
		ADDS		R0, R0,	R1 ; Rd	= Op1 +	Op2
		STR		R0, [SP,#0x3C+var_30] ;	Store to Memory
		LDR		R0, [R3,#0xC] ;	Load from Memory
		SUBS		R0, R0,	R1 ; Rd	= Op1 -	Op2
		STR		R0, [SP,#0x3C+var_2C] ;	Store to Memory

loc_1F88				; CODE XREF: sub_1DC4+1B2j
		LDR		R5, [SP,#0x3C+var_34] ;	Load from Memory
		LDR		R2, [R4,#0x18] ; Load from Memory
		LDR		R3, [R4,#0x28] ; Load from Memory
		ADR		R0, loc_1F94 ; Load address
		BX		R0 ; loc_1F94 ;	Branch to/from Thumb mode
; ---------------------------------------------------------------------------
		ALIGN 4
		CODE32

loc_1F94				; CODE XREF: sub_1DC4+1CCj
					; DATA XREF: sub_1DC4+1CAo
		STR		R8, [SP,#0x3C+var_3C] ;	Store to Memory
		LDRB		R10, [R4,#0xA] ; Load from Memory
		LDRB		R11, [R4,#0xB] ; Load from Memory
		LDRB		R0, [R4,#1] ; Load from	Memory
		TST		R0, #8	; Set cond. codes on Op1 & Op2
		BEQ		loc_1FFC ; Branch

loc_1FAC				; CODE XREF: sub_1DC4+230j
		LDRSB		R6, [R3],#1 ; Load from	Memory
		MUL		R1, R6,	R11 ; Multiply
		LDRB		R0, [R5,#0x630]	; Load from Memory
		ADD		R0, R0,	R1,ASR#8 ; Rd =	Op1 + Op2
		STRB		R0, [R5,#0x630]	; Store	to Memory
		MUL		R1, R6,	R10 ; Multiply
		LDRB		R0, [R5] ; Load	from Memory
		ADD		R0, R0,	R1,ASR#8 ; Rd =	Op1 + Op2
		STRB		R0, [R5],#1 ; Store to Memory
		SUBS		R2, R2,	#1 ; Rd	= Op1 -	Op2
		BNE		loc_1FF0 ; Branch
		LDR		R2, [SP,#0x3C+var_2C] ;	Load from Memory
		CMP		R2, #0	; Set cond. codes on Op1 - Op2
		LDRNE		R3, [SP,#0x3C+var_30] ;	Load from Memory
		BNE		loc_1FF0 ; Branch
		STRB		R2, [R4] ; Store to Memory
		B		loc_20D8 ; Branch
; ---------------------------------------------------------------------------

loc_1FF0				; CODE XREF: sub_1DC4+210j
					; sub_1DC4+220j
		SUBS		R8, R8,	#1 ; Rd	= Op1 -	Op2
		BGT		loc_1FAC ; Branch
		B		loc_20D0 ; Branch
; ---------------------------------------------------------------------------

loc_1FFC				; CODE XREF: sub_1DC4+1E4j
		LDR		R7, [R4,#0x1C] ; Load from Memory
		LDR		LR, [R4,#0x20] ; Load from Memory

loc_2004				; CODE XREF: sub_1DC4+304j
		CMP		R7, R9,LSL#2 ; Set cond. codes on Op1 -	Op2
		BCC		loc_2028 ; Branch

loc_200C				; CODE XREF: sub_1DC4+260j
		CMP		R2, #4	; Set cond. codes on Op1 - Op2
		BLE		loc_204C ; Branch
		SUB		R2, R2,	#4 ; Rd	= Op1 -	Op2
		ADD		R3, R3,	#4 ; Rd	= Op1 +	Op2
		SUB		R7, R7,	R9,LSL#2 ; Rd =	Op1 - Op2
		CMP		R7, R9,LSL#2 ; Set cond. codes on Op1 -	Op2
		BCS		loc_200C ; Branch

loc_2028				; CODE XREF: sub_1DC4+244j
		CMP		R7, R9,LSL#1 ; Set cond. codes on Op1 -	Op2
		BCC		loc_2044 ; Branch
		CMP		R2, #2	; Set cond. codes on Op1 - Op2
		BLE		loc_204C ; Branch
		SUB		R2, R2,	#2 ; Rd	= Op1 -	Op2
		ADD		R3, R3,	#2 ; Rd	= Op1 +	Op2
		SUB		R7, R7,	R9,LSL#1 ; Rd =	Op1 - Op2

loc_2044				; CODE XREF: sub_1DC4+268j
		CMP		R7, R9	; Set cond. codes on Op1 - Op2
		BCC		loc_207C ; Branch

loc_204C				; CODE XREF: sub_1DC4+24Cj
					; sub_1DC4+270j ...
		SUBS		R2, R2,	#1 ; Rd	= Op1 -	Op2
		BNE		loc_206C ; Branch
		LDR		R2, [SP,#0x3C+var_2C] ;	Load from Memory
		CMP		R2, #0	; Set cond. codes on Op1 - Op2
		LDRNE		R3, [SP,#0x3C+var_30] ;	Load from Memory
		BNE		loc_2070 ; Branch
		STRB		R2, [R4] ; Store to Memory
		B		loc_20D8 ; Branch
; ---------------------------------------------------------------------------

loc_206C				; CODE XREF: sub_1DC4+28Cj
		ADD		R3, R3,	#1 ; Rd	= Op1 +	Op2

loc_2070				; CODE XREF: sub_1DC4+29Cj
		SUB		R7, R7,	R9 ; Rd	= Op1 -	Op2
		CMP		R7, R9	; Set cond. codes on Op1 - Op2
		BCS		loc_204C ; Branch

loc_207C				; CODE XREF: sub_1DC4+284j
					; sub_1DC4+300j
		LDRSB		R0, [R3] ; Load	from Memory
		LDRSB		R1, [R3,#1] ; Load from	Memory
		SUB		R1, R1,	R0 ; Rd	= Op1 -	Op2
		MUL		R6, R1,	R7 ; Multiply
		MUL		R1, R6,	R12 ; Multiply
		ADD		R6, R0,	R1,ASR#23 ; Rd = Op1 + Op2
		MUL		R1, R6,	R11 ; Multiply
		LDRB		R0, [R5,#0x630]	; Load from Memory
		ADD		R0, R0,	R1,ASR#8 ; Rd =	Op1 + Op2
		STRB		R0, [R5,#0x630]	; Store	to Memory
		MUL		R1, R6,	R10 ; Multiply
		LDRB		R0, [R5] ; Load	from Memory
		ADD		R0, R0,	R1,ASR#8 ; Rd =	Op1 + Op2
		STRB		R0, [R5],#1 ; Store to Memory
		ADD		R7, R7,	LR ; Rd	= Op1 +	Op2
		SUBS		R8, R8,	#1 ; Rd	= Op1 -	Op2
		BEQ		loc_20CC ; Branch
		CMP		R7, R9	; Set cond. codes on Op1 - Op2
		BCC		loc_207C ; Branch
		B		loc_2004 ; Branch
; ---------------------------------------------------------------------------

loc_20CC				; CODE XREF: sub_1DC4+2F8j
		STR		R7, [R4,#0x1C] ; Store to Memory

loc_20D0				; CODE XREF: sub_1DC4+234j
		STR		R2, [R4,#0x18] ; Store to Memory
		STR		R3, [R4,#0x28] ; Store to Memory

loc_20D8				; CODE XREF: sub_1DC4+228j
					; sub_1DC4+2A4j
		LDR		R8, [SP,#0x3C+var_3C] ;	Load from Memory
		ADR		R0, (loc_20E4+1) ; Load	address
		BX		R0 ; loc_20E4 ;	Branch to/from Thumb mode
; ---------------------------------------------------------------------------
		CODE16

loc_20E4				; CODE XREF: sub_1DC4+F8j
					; sub_1DC4+13Ej ...
		LDR		R0, [SP,#0x3C+var_38] ;	Load from Memory
		SUBS		R0, R0,	#1 ; Rd	= Op1 -	Op2
		BLE		loc_20EE ; Branch
		ADDS		R4, #0x40 ; '@'	; Rd = Op1 + Op2
		B		loc_1EB0 ; Branch
; ---------------------------------------------------------------------------

loc_20EE				; CODE XREF: sub_1DC4+324j
		LDR		R0, [SP,#0x3C+var_28] ;	Load from Memory
		LDR		R3, =0x68736D53	; Load from Memory
		STR		R3, [R0] ; Store to Memory
		ADD		SP, SP,	#0x18 ;	Rd = Op1 + Op2
		POP		{R0-R7}	; Pop registers
		MOV		R8, R0	; Rd = Op2
		MOV		R9, R1	; Rd = Op2
		MOV		R10, R2	; Rd = Op2
		MOV		R11, R3	; Rd = Op2
		POP		{R3}	; Pop registers

nullsub_1				; CODE XREF: sub_1DC4+28j sub_1DC4+30j ...
		BX		R3	; Branch to/from Thumb mode
; End of function sub_1DC4

; ---------------------------------------------------------------------------
dword_2104	DCD 0x350		; DATA XREF: sub_1DC4+3Ar
dword_2108	DCD 0x630		; DATA XREF: sub_1DC4+50r
; ---------------------------------------------------------------------------

loc_210C				; CODE XREF: ROM:00000324j
					; DATA XREF: ROM:00000318o ...
		LDR		R0, =0x3007FF0 ; Load from Memory
		LDR		R0, [R0] ; Load	from Memory
		LDR		R2, =0x68736D53	; Load from Memory
		LDR		R3, [R0] ; Load	from Memory
		CMP		R2, R3	; Set cond. codes on Op1 - Op2
		BNE		locret_2136 ; Branch
		LDRB		R1, [R0,#4] ; Load from	Memory
		SUBS		R1, R1,	#1 ; Rd	= Op1 -	Op2
		STRB		R1, [R0,#4] ; Store to Memory
		BGT		locret_2136 ; Branch
		LDRB		R1, [R0,#0xB] ;	Load from Memory
		STRB		R1, [R0,#4] ; Store to Memory
		MOVS		R0, #0	; Rd = Op2
		MOVS		R1, #0xB600
		LDR		R2, =0x40000C6 ; Load from Memory
		LDR		R3, =0x40000D2 ; Load from Memory
		STRH		R0, [R2] ; Store to Memory
		STRH		R0, [R3] ; Store to Memory
		STRH		R1, [R2] ; Store to Memory
		STRH		R1, [R3] ; Store to Memory

locret_2136				; CODE XREF: ROM:00002116j
					; ROM:0000211Ej
		BX		LR	; Branch to/from Thumb mode
; ---------------------------------------------------------------------------
dword_2138	DCD 0x40000C6		; DATA XREF: ROM:0000212Ar
dword_213C	DCD 0x40000D2		; DATA XREF: ROM:0000212Cr
dword_2140	DCD 0x3007FF0		; DATA XREF: sub_1DC4r	ROM:loc_210Cr
dword_2144	DCD 0x68736D53		; DATA XREF: sub_1DC4+4r sub_1DC4+32Cr ...
; ---------------------------------------------------------------------------

loc_2148				; DATA XREF: sub_13C4:loc_1414o
					; ROM:off_1430o
		LDR		R2, =0x68736D53	; Load from Memory
		LDR		R3, [R0,#0x34] ; Load from Memory
		CMP		R2, R3	; Set cond. codes on Op1 - Op2
		BEQ		loc_2152 ; Branch
		BX		LR	; Branch to/from Thumb mode
; ---------------------------------------------------------------------------

loc_2152				; CODE XREF: ROM:0000214Ej
		ADDS		R3, R3,	#1 ; Rd	= Op1 +	Op2
		STR		R3, [R0,#0x34] ; Store to Memory
		PUSH		{R4-R7,LR} ; Push registers
		MOV		R4, R8	; Rd = Op2
		MOV		R5, R9	; Rd = Op2
		MOV		R6, R10	; Rd = Op2
		MOV		R7, R11	; Rd = Op2
		PUSH		{R4-R7}	; Push registers
		MOVS		R7, R0	; Rd = Op2
		LDR		R3, [R7,#0x38] ; Load from Memory
		CMP		R3, #0	; Set cond. codes on Op1 - Op2
		BEQ		loc_2170 ; Branch
		LDR		R0, [R7,#0x3C] ; Load from Memory
		BL		nullsub_1 ; Branch with	Link
; ---------------------------------------------------------------------------

loc_2170				; CODE XREF: ROM:00002168j
		LDR		R0, [R7,#4] ; Load from	Memory
		CMP		R0, #0	; Set cond. codes on Op1 - Op2
		BGE		loc_2178 ; Branch
		B		loc_2392 ; Branch
; ---------------------------------------------------------------------------

loc_2178				; CODE XREF: ROM:00002174j
		LDR		R0, =0x3007FF0 ; Load from Memory
		LDR		R0, [R0] ; Load	from Memory
		MOV		R8, R0	; Rd = Op2
		MOVS		R0, R7	; Rd = Op2
		BL		sub_1534 ; Branch with Link
		LDRH		R0, [R7,#0x22] ; Load from Memory
		LDRH		R1, [R7,#0x20] ; Load from Memory
		ADDS		R0, R0,	R1 ; Rd	= Op1 +	Op2
		B		loc_22D6 ; Branch
; ---------------------------------------------------------------------------

loc_218C				; CODE XREF: ROM:000022DCj
		LDRB		R2, [R7,#8] ; Load from	Memory
		LDR		R5, [R7,#0x2C] ; Load from Memory
		MOVS		R3, #1	; Rd = Op2
		MOVS		R4, #0	; Rd = Op2

loc_2194				; CODE XREF: ROM:000022C0j
		LDRB		R0, [R5] ; Load	from Memory
		MOVS		R1, #0x80 ; 'Ä'	; Rd = Op2
		TST		R1, R0	; Set cond. codes on Op1 & Op2
		BNE		loc_219E ; Branch
		B		loc_22B6 ; Branch
; ---------------------------------------------------------------------------

loc_219E				; CODE XREF: ROM:0000219Aj
		MOV		R9, R2	; Rd = Op2
		MOV		R10, R3	; Rd = Op2
		ORRS		R4, R3	; Rd = Op1 | Op2
		MOV		R11, R4	; Rd = Op2
		LDR		R4, [R5,#0x20] ; Load from Memory
		CMP		R4, #0	; Set cond. codes on Op1 - Op2
		BEQ		loc_21D4 ; Branch

loc_21AC				; CODE XREF: ROM:000021D2j
		LDRB		R1, [R4] ; Load	from Memory
		MOVS		R0, #0xC7 ; '«'	; Rd = Op2
		TST		R0, R1	; Set cond. codes on Op1 & Op2
		BEQ		loc_21C8 ; Branch
		LDRB		R0, [R4,#0x10] ; Load from Memory
		CMP		R0, #0	; Set cond. codes on Op1 - Op2
		BEQ		loc_21CE ; Branch
		SUBS		R0, R0,	#1 ; Rd	= Op1 -	Op2
		STRB		R0, [R4,#0x10] ; Store to Memory
		BNE		loc_21CE ; Branch
		MOVS		R0, #0x40 ; '@'	; Rd = Op2
		ORRS		R1, R0	; Rd = Op1 | Op2
		STRB		R1, [R4] ; Store to Memory
		B		loc_21CE ; Branch
; ---------------------------------------------------------------------------

loc_21C8				; CODE XREF: ROM:000021B2j
		MOVS		R0, R4	; Rd = Op2
		BL		sub_23C6 ; Branch with Link

loc_21CE				; CODE XREF: ROM:000021B8j
					; ROM:000021BEj ...
		LDR		R4, [R4,#0x34] ; Load from Memory
		CMP		R4, #0	; Set cond. codes on Op1 - Op2
		BNE		loc_21AC ; Branch

loc_21D4				; CODE XREF: ROM:000021AAj
		LDRB		R3, [R5] ; Load	from Memory
		MOVS		R0, #0x40 ; '@'	; Rd = Op2
		TST		R0, R3	; Set cond. codes on Op1 & Op2
		BEQ		loc_2254 ; Branch
		MOVS		R0, R5	; Rd = Op2
		BL		sub_23B0 ; Branch with Link
		MOVS		R0, #0x80 ; 'Ä'	; Rd = Op2
		STRB		R0, [R5] ; Store to Memory
		MOVS		R0, #2	; Rd = Op2
		STRB		R0, [R5,#0xF] ;	Store to Memory
		MOVS		R0, #0x40 ; '@'	; Rd = Op2
		STRB		R0, [R5,#0x13] ; Store to Memory
		MOVS		R0, #0x16 ; Rd = Op2
		STRB		R0, [R5,#0x19] ; Store to Memory
		MOVS		R0, #1	; Rd = Op2
		ADDS		R1, R5,	#6 ; Rd	= Op1 +	Op2
		STRB		R0, [R1,#0x1E] ; Store to Memory
		B		loc_2254 ; Branch
; ---------------------------------------------------------------------------

loc_21FA				; CODE XREF: ROM:00002258j
		LDR		R2, [R5,#0x40] ; Load from Memory
		LDRB		R1, [R2] ; Load	from Memory
		CMP		R1, #0x80 ; 'Ä'	; Set cond. codes on Op1 - Op2
		BCS		loc_2206 ; Branch
		LDRB		R1, [R5,#7] ; Load from	Memory
		B		loc_2210 ; Branch
; ---------------------------------------------------------------------------

loc_2206				; CODE XREF: ROM:00002200j
		ADDS		R2, R2,	#1 ; Rd	= Op1 +	Op2
		STR		R2, [R5,#0x40] ; Store to Memory
		CMP		R1, #0xBD ; 'Ω'	; Set cond. codes on Op1 - Op2
		BCC		loc_2210 ; Branch
		STRB		R1, [R5,#7] ; Store to Memory

loc_2210				; CODE XREF: ROM:00002204j
					; ROM:0000220Cj
		CMP		R1, #0xCF ; 'œ'	; Set cond. codes on Op1 - Op2
		BCC		loc_2226 ; Branch
		MOV		R0, R8	; Rd = Op2
		LDR		R3, [R0,#0x38] ; Load from Memory
		MOVS		R0, R1	; Rd = Op2
		SUBS		R0, #0xCF ; 'œ'	; Rd = Op1 - Op2
		MOVS		R1, R7	; Rd = Op2
		MOVS		R2, R5	; Rd = Op2
		BL		nullsub_1 ; Branch with	Link
; ---------------------------------------------------------------------------
		B		loc_2254 ; Branch
; ---------------------------------------------------------------------------

loc_2226				; CODE XREF: ROM:00002212j
		CMP		R1, #0xB0 ; '∞'	; Set cond. codes on Op1 - Op2
		BLS		loc_224A ; Branch
		MOVS		R0, R1	; Rd = Op2
		SUBS		R0, #0xB1 ; '±'	; Rd = Op1 - Op2
		STRB		R0, [R7,#0xA] ;	Store to Memory
		MOV		R3, R8	; Rd = Op2
		LDR		R3, [R3,#0x34] ; Load from Memory
		LSLS		R0, R0,	#2 ; Logical Shift Left
		ADDS		R3, R3,	R0 ; Rd	= Op1 +	Op2
		LDR		R3, [R3] ; Load	from Memory
		MOVS		R0, R7	; Rd = Op2
		MOVS		R1, R5	; Rd = Op2
		BL		nullsub_1 ; Branch with	Link
; ---------------------------------------------------------------------------
		LDRB		R0, [R5] ; Load	from Memory
		CMP		R0, #0	; Set cond. codes on Op1 - Op2
		BEQ		loc_22B0 ; Branch
		B		loc_2254 ; Branch
; ---------------------------------------------------------------------------

loc_224A				; CODE XREF: ROM:00002228j
		LDR		R0, =unk_30D0 ;	Load from Memory
		SUBS		R1, #0x80 ; 'Ä'	; Rd = Op1 - Op2
		ADDS		R1, R1,	R0 ; Rd	= Op1 +	Op2
		LDRB		R0, [R1] ; Load	from Memory
		STRB		R0, [R5,#1] ; Store to Memory

loc_2254				; CODE XREF: ROM:000021DAj
					; ROM:000021F8j ...
		LDRB		R0, [R5,#1] ; Load from	Memory
		CMP		R0, #0	; Set cond. codes on Op1 - Op2
		BEQ		loc_21FA ; Branch
		SUBS		R0, R0,	#1 ; Rd	= Op1 -	Op2
		STRB		R0, [R5,#1] ; Store to Memory
		LDRB		R1, [R5,#0x19] ; Load from Memory
		CMP		R1, #0	; Set cond. codes on Op1 - Op2
		BEQ		loc_22B0 ; Branch
		LDRB		R0, [R5,#0x17] ; Load from Memory
		CMP		R0, #0	; Set cond. codes on Op1 - Op2
		BEQ		loc_22B0 ; Branch
		LDRB		R0, [R5,#0x1C] ; Load from Memory
		CMP		R0, #0	; Set cond. codes on Op1 - Op2
		BEQ		loc_2276 ; Branch
		SUBS		R0, R0,	#1 ; Rd	= Op1 -	Op2
		STRB		R0, [R5,#0x1C] ; Store to Memory
		B		loc_22B0 ; Branch
; ---------------------------------------------------------------------------

loc_2276				; CODE XREF: ROM:0000226Ej
		LDRB		R0, [R5,#0x1A] ; Load from Memory
		ADDS		R0, R0,	R1 ; Rd	= Op1 +	Op2
		STRB		R0, [R5,#0x1A] ; Store to Memory
		MOVS		R1, R0	; Rd = Op2
		SUBS		R0, #0x40 ; '@'	; Rd = Op1 - Op2
		LSLS		R0, R0,	#0x18 ;	Logical	Shift Left
		BPL		loc_228A ; Branch
		LSLS		R2, R1,	#0x18 ;	Logical	Shift Left
		ASRS		R2, R2,	#0x18 ;	Arithmetic Shift Right
		B		loc_228E ; Branch
; ---------------------------------------------------------------------------

loc_228A				; CODE XREF: ROM:00002282j
		MOVS		R0, #0x80 ; 'Ä'	; Rd = Op2
		SUBS		R2, R0,	R1 ; Rd	= Op1 -	Op2

loc_228E				; CODE XREF: ROM:00002288j
		LDRB		R0, [R5,#0x17] ; Load from Memory
		MULS		R0, R2	; Multiply
		ASRS		R2, R0,	#6 ; Arithmetic	Shift Right
		LDRB		R0, [R5,#0x16] ; Load from Memory
		EORS		R0, R2	; Rd = Op1 ^ Op2
		LSLS		R0, R0,	#0x18 ;	Logical	Shift Left
		BEQ		loc_22B0 ; Branch
		STRB		R2, [R5,#0x16] ; Store to Memory
		LDRB		R0, [R5] ; Load	from Memory
		LDRB		R1, [R5,#0x18] ; Load from Memory
		CMP		R1, #0	; Set cond. codes on Op1 - Op2
		BNE		loc_22AA ; Branch
		MOVS		R1, #0xC ; Rd =	Op2
		B		loc_22AC ; Branch
; ---------------------------------------------------------------------------

loc_22AA				; CODE XREF: ROM:000022A4j
		MOVS		R1, #3	; Rd = Op2

loc_22AC				; CODE XREF: ROM:000022A8j
		ORRS		R0, R1	; Rd = Op1 | Op2
		STRB		R0, [R5] ; Store to Memory

loc_22B0				; CODE XREF: ROM:00002246j
					; ROM:00002262j ...
		MOV		R2, R9	; Rd = Op2
		MOV		R3, R10	; Rd = Op2
		MOV		R4, R11	; Rd = Op2

loc_22B6				; CODE XREF: ROM:0000219Cj
		SUBS		R2, R2,	#1 ; Rd	= Op1 -	Op2
		BLE		loc_22C2 ; Branch
		MOVS		R0, #0x50 ; 'P'	; Rd = Op2
		ADDS		R5, R5,	R0 ; Rd	= Op1 +	Op2
		LSLS		R3, R3,	#1 ; Logical Shift Left
		B		loc_2194 ; Branch
; ---------------------------------------------------------------------------

loc_22C2				; CODE XREF: ROM:000022B8j
		MOV		R6, R11	; Rd = Op2
		CMP		R6, #0	; Set cond. codes on Op1 - Op2
		BNE		loc_22D0 ; Branch
		MOVS		R0, #0x80000000
		STR		R0, [R7,#4] ; Store to Memory
		B		loc_2392 ; Branch
; ---------------------------------------------------------------------------

loc_22D0				; CODE XREF: ROM:000022C6j
		STR		R6, [R7,#4] ; Store to Memory
		LDRH		R0, [R7,#0x22] ; Load from Memory
		SUBS		R0, #0x96 ; 'ñ'	; Rd = Op1 - Op2

loc_22D6				; CODE XREF: ROM:0000218Aj
		STRH		R0, [R7,#0x22] ; Store to Memory
		CMP		R0, #0x96 ; 'ñ'	; Set cond. codes on Op1 - Op2
		BCC		loc_22DE ; Branch
		B		loc_218C ; Branch
; ---------------------------------------------------------------------------

loc_22DE				; CODE XREF: ROM:000022DAj
		LDRB		R2, [R7,#8] ; Load from	Memory
		LDR		R5, [R7,#0x2C] ; Load from Memory

loc_22E2				; CODE XREF: ROM:00002390j
		LDRB		R0, [R5] ; Load	from Memory
		MOVS		R1, #0x80 ; 'Ä'	; Rd = Op2
		TST		R1, R0	; Set cond. codes on Op1 & Op2
		BEQ		loc_2388 ; Branch
		MOVS		R1, #0xF ; Rd =	Op2
		TST		R1, R0	; Set cond. codes on Op1 & Op2
		BEQ		loc_2388 ; Branch
		MOV		R9, R2	; Rd = Op2
		MOVS		R0, R7	; Rd = Op2
		MOVS		R1, R5	; Rd = Op2
		BL		sub_159C ; Branch with Link
		LDR		R4, [R5,#0x20] ; Load from Memory
		CMP		R4, #0	; Set cond. codes on Op1 - Op2
		BEQ		loc_237E ; Branch

loc_2300				; CODE XREF: ROM:0000237Cj
		LDRB		R1, [R4] ; Load	from Memory
		MOVS		R0, #0xC7 ; '«'	; Rd = Op2
		TST		R0, R1	; Set cond. codes on Op1 & Op2
		BNE		loc_2310 ; Branch
		MOVS		R0, R4	; Rd = Op2
		BL		sub_23C6 ; Branch with Link
		B		loc_2378 ; Branch
; ---------------------------------------------------------------------------

loc_2310				; CODE XREF: ROM:00002306j
		LDRB		R0, [R4,#1] ; Load from	Memory
		MOVS		R6, #7	; Rd = Op2
		ANDS		R6, R0	; Rd = Op1 & Op2
		LDRB		R3, [R5] ; Load	from Memory
		MOVS		R0, #3	; Rd = Op2
		TST		R0, R3	; Set cond. codes on Op1 & Op2
		BEQ		loc_233C ; Branch
		LDRB		R1, [R4,#0x12] ; Load from Memory
		LDRB		R0, [R5,#0x10] ; Load from Memory
		MULS		R0, R1	; Multiply
		ASRS		R0, R0,	#7 ; Arithmetic	Shift Right
		STRB		R0, [R4,#2] ; Store to Memory
		LDRB		R0, [R5,#0x11] ; Load from Memory
		MULS		R0, R1	; Multiply
		ASRS		R0, R0,	#7 ; Arithmetic	Shift Right
		STRB		R0, [R4,#3] ; Store to Memory
		CMP		R6, #0	; Set cond. codes on Op1 - Op2
		BEQ		loc_233C ; Branch
		LDRB		R0, [R4,#0x1D] ; Load from Memory
		MOVS		R1, #1	; Rd = Op2
		ORRS		R0, R1	; Rd = Op1 | Op2
		STRB		R0, [R4,#0x1D] ; Store to Memory

loc_233C				; CODE XREF: ROM:0000231Cj
					; ROM:00002332j
		MOVS		R0, #0xC ; Rd =	Op2
		TST		R0, R3	; Set cond. codes on Op1 & Op2
		BEQ		loc_2378 ; Branch
		LDRB		R1, [R4,#8] ; Load from	Memory
		MOVS		R0, #8	; Rd = Op2
		LDRSB		R0, [R5,R0] ; Load from	Memory
		ADDS		R2, R1,	R0 ; Rd	= Op1 +	Op2
		BPL		loc_234E ; Branch
		MOVS		R2, #0	; Rd = Op2

loc_234E				; CODE XREF: ROM:0000234Aj
		CMP		R6, #0	; Set cond. codes on Op1 - Op2
		BEQ		loc_236C ; Branch
		MOV		R0, R8	; Rd = Op2
		LDR		R3, [R0,#0x30] ; Load from Memory
		MOVS		R1, R2	; Rd = Op2
		LDRB		R2, [R5,#9] ; Load from	Memory
		MOVS		R0, R6	; Rd = Op2
		BL		nullsub_1 ; Branch with	Link
; ---------------------------------------------------------------------------
		STR		R0, [R4,#0x20] ; Store to Memory
		LDRB		R0, [R4,#0x1D] ; Load from Memory
		MOVS		R1, #2	; Rd = Op2
		ORRS		R0, R1	; Rd = Op1 | Op2
		STRB		R0, [R4,#0x1D] ; Store to Memory
		B		loc_2378 ; Branch
; ---------------------------------------------------------------------------

loc_236C				; CODE XREF: ROM:00002350j
		MOVS		R1, R2	; Rd = Op2
		LDRB		R2, [R5,#9] ; Load from	Memory
		LDR		R0, [R4,#0x24] ; Load from Memory
		BL		sub_18D8 ; Branch with Link
		STR		R0, [R4,#0x20] ; Store to Memory

loc_2378				; CODE XREF: ROM:0000230Ej
					; ROM:00002340j ...
		LDR		R4, [R4,#0x34] ; Load from Memory
		CMP		R4, #0	; Set cond. codes on Op1 - Op2
		BNE		loc_2300 ; Branch

loc_237E				; CODE XREF: ROM:000022FEj
		LDRB		R0, [R5] ; Load	from Memory
		MOVS		R1, #0xF0 ; ''	; Rd = Op2
		ANDS		R0, R1	; Rd = Op1 & Op2
		STRB		R0, [R5] ; Store to Memory
		MOV		R2, R9	; Rd = Op2

loc_2388				; CODE XREF: ROM:000022E8j
					; ROM:000022EEj
		SUBS		R2, R2,	#1 ; Rd	= Op1 -	Op2
		BLE		loc_2392 ; Branch
		MOVS		R0, #0x50 ; 'P'	; Rd = Op2
		ADDS		R5, R5,	R0 ; Rd	= Op1 +	Op2
		BGT		loc_22E2 ; Branch

loc_2392				; CODE XREF: ROM:00002176j
					; ROM:000022CEj ...
		LDR		R0, =0x68736D53	; Load from Memory
		STR		R0, [R7,#0x34] ; Store to Memory
		POP		{R0-R7}	; Pop registers
		MOV		R8, R0	; Rd = Op2
		MOV		R9, R1	; Rd = Op2
		MOV		R10, R2	; Rd = Op2
		MOV		R11, R3	; Rd = Op2
		POP		{R0}	; Pop registers
		BX		R0	; Branch to/from Thumb mode
; ---------------------------------------------------------------------------
off_23A4	DCD unk_30D0		; DATA XREF: ROM:loc_224Ar
dword_23A8	DCD 0x3007FF0		; DATA XREF: ROM:loc_2178r
dword_23AC	DCD 0x68736D53		; DATA XREF: ROM:loc_2148r
					; ROM:loc_2392r

; =============== S U B	R O U T	I N E =======================================


sub_23B0				; CODE XREF: sub_13C4+14p
					; ROM:000021DEp
					; DATA XREF: ...
		MOV		R12, R4	; Rd = Op2
		MOVS		R1, #0	; Rd = Op2
		MOVS		R2, #0	; Rd = Op2
		MOVS		R3, #0	; Rd = Op2
		MOVS		R4, #0	; Rd = Op2
		STMIA		R0!, {R1-R4} ; Store Block to Memory
		STMIA		R0!, {R1-R4} ; Store Block to Memory
		STMIA		R0!, {R1-R4} ; Store Block to Memory
		STMIA		R0!, {R1-R4} ; Store Block to Memory
		MOV		R4, R12	; Rd = Op2
		BX		LR	; Branch to/from Thumb mode
; End of function sub_23B0


; =============== S U B	R O U T	I N E =======================================


sub_23C6				; CODE XREF: ROM:000021CAp
					; ROM:0000230Ap ...
		LDR		R3, [R0,#0x2C] ; Load from Memory
		CMP		R3, #0	; Set cond. codes on Op1 - Op2
		BEQ		locret_23E4 ; Branch
		LDR		R1, [R0,#0x34] ; Load from Memory
		LDR		R2, [R0,#0x30] ; Load from Memory
		CMP		R2, #0	; Set cond. codes on Op1 - Op2
		BEQ		loc_23D8 ; Branch
		STR		R1, [R2,#0x34] ; Store to Memory
		B		loc_23DA ; Branch
; ---------------------------------------------------------------------------

loc_23D8				; CODE XREF: sub_23C6+Cj
		STR		R1, [R3,#0x20] ; Store to Memory

loc_23DA				; CODE XREF: sub_23C6+10j
		CMP		R1, #0	; Set cond. codes on Op1 - Op2
		BEQ		loc_23E0 ; Branch
		STR		R2, [R1,#0x30] ; Store to Memory

loc_23E0				; CODE XREF: sub_23C6+16j
		MOVS		R1, #0	; Rd = Op2
		STR		R1, [R0,#0x2C] ; Store to Memory

locret_23E4				; CODE XREF: sub_23C6+4j
		BX		LR	; Branch to/from Thumb mode
; End of function sub_23C6


; =============== S U B	R O U T	I N E =======================================


sub_23E6				; CODE XREF: sub_1434+3Ap sub_1434+60p ...
		PUSH		{R4-R6,LR} ; Push registers
		MOVS		R5, R1	; Rd = Op2
		LDRB		R1, [R5] ; Load	from Memory
		MOVS		R0, #0x80 ; 'Ä'	; Rd = Op2
		TST		R0, R1	; Set cond. codes on Op1 & Op2
		BEQ		loc_241E ; Branch
		LDR		R4, [R5,#0x20] ; Load from Memory
		CMP		R4, #0	; Set cond. codes on Op1 - Op2
		BEQ		loc_241C ; Branch
		MOVS		R6, #0	; Rd = Op2

loc_23FA				; CODE XREF: sub_23E6+34j
		LDRB		R0, [R4] ; Load	from Memory
		CMP		R0, #0	; Set cond. codes on Op1 - Op2
		BEQ		loc_2416 ; Branch
		LDRB		R0, [R4,#1] ; Load from	Memory
		MOVS		R3, #7	; Rd = Op2
		ANDS		R0, R3	; Rd = Op1 & Op2
		BEQ		loc_2412 ; Branch
		LDR		R3, =0x3007FF0 ; Load from Memory
		LDR		R3, [R3] ; Load	from Memory
		LDR		R3, [R3,#0x2C] ; Load from Memory
		BL		nullsub_1 ; Branch with	Link
; ---------------------------------------------------------------------------

loc_2412				; CODE XREF: sub_23E6+20j
		STRB		R6, [R4] ; Store to Memory
		STR		R6, [R4,#0x2C] ; Store to Memory

loc_2416				; CODE XREF: sub_23E6+18j
		LDR		R4, [R4,#0x34] ; Load from Memory
		CMP		R4, #0	; Set cond. codes on Op1 - Op2
		BNE		loc_23FA ; Branch

loc_241C				; CODE XREF: sub_23E6+10j
		STR		R4, [R5,#0x20] ; Store to Memory

loc_241E				; CODE XREF: sub_23E6+Aj
		POP		{R4-R6}	; Pop registers
		POP		{R0}	; Pop registers
		BX		R0	; Branch to/from Thumb mode
; End of function sub_23E6


; =============== S U B	R O U T	I N E =======================================


sub_2424				; DATA XREF: sub_1664+54o
					; ROM:off_16F8o

var_38		= -0x38
var_34		= -0x34
var_30		= -0x30
var_2C		= -0x2C
var_28		= -0x28

		PUSH		{R4-R7,LR} ; Push registers
		MOV		R4, R8	; Rd = Op2
		MOV		R5, R9	; Rd = Op2
		MOV		R6, R10	; Rd = Op2
		MOV		R7, R11	; Rd = Op2
		PUSH		{R4-R7}	; Push registers
		SUB		SP, SP,	#0x14 ;	Rd = Op1 - Op2
		STR		R1, [SP,#0x38+var_38] ;	Store to Memory
		MOVS		R5, R2	; Rd = Op2
		LDR		R1, =0x3007FF0 ; Load from Memory
		LDR		R1, [R1] ; Load	from Memory
		STR		R1, [SP,#0x38+var_34] ;	Store to Memory
		LDR		R1, =unk_30D0 ;	Load from Memory
		ADDS		R0, R0,	R1 ; Rd	= Op1 +	Op2
		LDRB		R0, [R0] ; Load	from Memory
		STRB		R0, [R5,#4] ; Store to Memory
		LDR		R3, [R5,#0x40] ; Load from Memory
		LDRB		R0, [R3] ; Load	from Memory
		CMP		R0, #0x80 ; 'Ä'	; Set cond. codes on Op1 - Op2
		BCS		loc_246A ; Branch
		STRB		R0, [R5,#5] ; Store to Memory
		ADDS		R3, R3,	#1 ; Rd	= Op1 +	Op2
		LDRB		R0, [R3] ; Load	from Memory
		CMP		R0, #0x80 ; 'Ä'	; Set cond. codes on Op1 - Op2
		BCS		loc_2468 ; Branch
		STRB		R0, [R5,#6] ; Store to Memory
		ADDS		R3, R3,	#1 ; Rd	= Op1 +	Op2
		LDRB		R0, [R3] ; Load	from Memory
		CMP		R0, #0x80 ; 'Ä'	; Set cond. codes on Op1 - Op2
		BCS		loc_2468 ; Branch
		LDRB		R1, [R5,#4] ; Load from	Memory
		ADDS		R1, R1,	R0 ; Rd	= Op1 +	Op2
		STRB		R1, [R5,#4] ; Store to Memory
		ADDS		R3, R3,	#1 ; Rd	= Op1 +	Op2

loc_2468				; CODE XREF: sub_2424+30j sub_2424+3Aj
		STR		R3, [R5,#0x40] ; Store to Memory

loc_246A				; CODE XREF: sub_2424+26j
		MOVS		R4, R5	; Rd = Op2
		ADDS		R4, #0x24 ; '$' ; Rd = Op1 + Op2
		LDRB		R2, [R4] ; Load	from Memory
		MOVS		R0, #0xC0 ; '¿'	; Rd = Op2
		TST		R0, R2	; Set cond. codes on Op1 & Op2
		BEQ		loc_24C0 ; Branch
		LDRB		R3, [R5,#5] ; Load from	Memory
		MOVS		R0, #0x40 ; '@'	; Rd = Op2
		TST		R0, R2	; Set cond. codes on Op1 & Op2
		BEQ		loc_2486 ; Branch
		LDR		R1, [R5,#0x2C] ; Load from Memory
		ADDS		R1, R1,	R3 ; Rd	= Op1 +	Op2
		LDRB		R0, [R1] ; Load	from Memory
		B		loc_2488 ; Branch
; ---------------------------------------------------------------------------

loc_2486				; CODE XREF: sub_2424+58j
		ADDS		R0, R3,	#0 ; Rd	= Op1 +	Op2

loc_2488				; CODE XREF: sub_2424+60j
		LSLS		R1, R0,	#1 ; Logical Shift Left
		ADDS		R1, R1,	R0 ; Rd	= Op1 +	Op2
		LSLS		R1, R1,	#2 ; Logical Shift Left
		LDR		R0, [R5,#0x28] ; Load from Memory
		ADDS		R1, R1,	R0 ; Rd	= Op1 +	Op2
		MOV		R9, R1	; Rd = Op2
		MOV		R6, R9	; Rd = Op2
		LDRB		R1, [R6] ; Load	from Memory
		MOVS		R0, #0xC0 ; '¿'	; Rd = Op2
		TST		R0, R1	; Set cond. codes on Op1 & Op2
		BEQ		loc_24A0 ; Branch
		B		loc_260E ; Branch
; ---------------------------------------------------------------------------

loc_24A0				; CODE XREF: sub_2424+78j
		MOVS		R0, #0x80 ; 'Ä'	; Rd = Op2
		TST		R0, R2	; Set cond. codes on Op1 & Op2
		BEQ		loc_24C4 ; Branch
		LDRB		R1, [R6,#3] ; Load from	Memory
		MOVS		R0, #0x80 ; 'Ä'	; Rd = Op2
		TST		R0, R1	; Set cond. codes on Op1 & Op2
		BEQ		loc_24BC ; Branch
		SUBS		R1, #0xC0 ; '¿'	; Rd = Op1 - Op2
		LSLS		R1, R1,	#1 ; Logical Shift Left
		STRB		R1, [R5,#0x15] ; Store to Memory
		LDRB		R0, [R5] ; Load	from Memory
		MOVS		R1, #3	; Rd = Op2
		ORRS		R0, R1	; Rd = Op1 | Op2
		STRB		R0, [R5] ; Store to Memory

loc_24BC				; CODE XREF: sub_2424+88j
		LDRB		R3, [R6,#1] ; Load from	Memory
		B		loc_24C4 ; Branch
; ---------------------------------------------------------------------------

loc_24C0				; CODE XREF: sub_2424+50j
		MOV		R9, R4	; Rd = Op2
		LDRB		R3, [R5,#5] ; Load from	Memory

loc_24C4				; CODE XREF: sub_2424+80j sub_2424+9Aj
		STR		R3, [SP,#0x38+var_30] ;	Store to Memory
		LDR		R6, [SP,#0x38+var_38] ;	Load from Memory
		LDRB		R1, [R6,#9] ; Load from	Memory
		LDRB		R0, [R5,#0x1D] ; Load from Memory
		ADDS		R0, R0,	R1 ; Rd	= Op1 +	Op2
		CMP		R0, #0xFF ; Set	cond. codes on Op1 - Op2
		BLS		loc_24D4 ; Branch
		MOVS		R0, #0xFF ; Rd = Op2

loc_24D4				; CODE XREF: sub_2424+ACj
		STR		R0, [SP,#0x38+var_28] ;	Store to Memory
		MOV		R6, R9	; Rd = Op2
		LDRB		R0, [R6] ; Load	from Memory
		MOVS		R6, #7	; Rd = Op2
		ANDS		R6, R0	; Rd = Op1 & Op2
		STR		R6, [SP,#0x38+var_2C] ;	Store to Memory
		BEQ		loc_2514 ; Branch
		LDR		R0, [SP,#0x38+var_34] ;	Load from Memory
		LDR		R4, [R0,#0x1C] ; Load from Memory
		CMP		R4, #0	; Set cond. codes on Op1 - Op2
		BNE		loc_24EC ; Branch
		B		loc_260E ; Branch
; ---------------------------------------------------------------------------

loc_24EC				; CODE XREF: sub_2424+C4j
		SUBS		R6, R6,	#1 ; Rd	= Op1 -	Op2
		LSLS		R0, R6,	#6 ; Logical Shift Left
		ADDS		R4, R4,	R0 ; Rd	= Op1 +	Op2
		LDRB		R1, [R4] ; Load	from Memory
		MOVS		R0, #0xC7 ; '«'	; Rd = Op2
		TST		R0, R1	; Set cond. codes on Op1 & Op2
		BEQ		loc_2568 ; Branch
		MOVS		R0, #0x40 ; '@'	; Rd = Op2
		TST		R0, R1	; Set cond. codes on Op1 & Op2
		BNE		loc_2568 ; Branch
		LDRB		R1, [R4,#0x13] ; Load from Memory
		LDR		R0, [SP,#0x38+var_28] ;	Load from Memory
		CMP		R1, R0	; Set cond. codes on Op1 - Op2
		BCC		loc_2568 ; Branch
		BEQ		loc_250C ; Branch
		B		loc_260E ; Branch
; ---------------------------------------------------------------------------

loc_250C				; CODE XREF: sub_2424+E4j
		LDR		R0, [R4,#0x2C] ; Load from Memory
		CMP		R0, R5	; Set cond. codes on Op1 - Op2
		BCS		loc_2568 ; Branch
		B		loc_260E ; Branch
; ---------------------------------------------------------------------------

loc_2514				; CODE XREF: sub_2424+BCj
		LDR		R6, [SP,#0x38+var_28] ;	Load from Memory
		MOVS		R7, R5	; Rd = Op2
		MOVS		R2, #0	; Rd = Op2
		MOV		R8, R2	; Rd = Op2
		LDR		R4, [SP,#0x38+var_34] ;	Load from Memory
		LDRB		R3, [R4,#6] ; Load from	Memory
		ADDS		R4, #0x50 ; 'P'	; Rd = Op1 + Op2

loc_2522				; CODE XREF: sub_2424+13Cj
		LDRB		R1, [R4] ; Load	from Memory
		MOVS		R0, #0xC7 ; '«'	; Rd = Op2
		TST		R0, R1	; Set cond. codes on Op1 & Op2
		BEQ		loc_2568 ; Branch
		MOVS		R0, #0x40 ; '@'	; Rd = Op2
		TST		R0, R1	; Set cond. codes on Op1 & Op2
		BEQ		loc_253C ; Branch
		CMP		R2, #0	; Set cond. codes on Op1 - Op2
		BNE		loc_2540 ; Branch
		ADDS		R2, R2,	#1 ; Rd	= Op1 +	Op2
		LDRB		R6, [R4,#0x13] ; Load from Memory
		LDR		R7, [R4,#0x2C] ; Load from Memory
		B		loc_255A ; Branch
; ---------------------------------------------------------------------------

loc_253C				; CODE XREF: sub_2424+10Aj
		CMP		R2, #0	; Set cond. codes on Op1 - Op2
		BNE		loc_255C ; Branch

loc_2540				; CODE XREF: sub_2424+10Ej
		LDRB		R0, [R4,#0x13] ; Load from Memory
		CMP		R0, R6	; Set cond. codes on Op1 - Op2
		BCS		loc_254C ; Branch
		MOVS		R6, R0	; Rd = Op2
		LDR		R7, [R4,#0x2C] ; Load from Memory
		B		loc_255A ; Branch
; ---------------------------------------------------------------------------

loc_254C				; CODE XREF: sub_2424+120j
		BHI		loc_255C ; Branch
		LDR		R0, [R4,#0x2C] ; Load from Memory
		CMP		R0, R7	; Set cond. codes on Op1 - Op2
		BLS		loc_2558 ; Branch
		MOVS		R7, R0	; Rd = Op2
		B		loc_255A ; Branch
; ---------------------------------------------------------------------------

loc_2558				; CODE XREF: sub_2424+12Ej
		BCC		loc_255C ; Branch

loc_255A				; CODE XREF: sub_2424+116j
					; sub_2424+126j ...
		MOV		R8, R4	; Rd = Op2

loc_255C				; CODE XREF: sub_2424+11Aj
					; sub_2424:loc_254Cj ...
		ADDS		R4, #0x40 ; '@'	; Rd = Op1 + Op2
		SUBS		R3, R3,	#1 ; Rd	= Op1 -	Op2
		BGT		loc_2522 ; Branch
		MOV		R4, R8	; Rd = Op2
		CMP		R4, #0	; Set cond. codes on Op1 - Op2
		BEQ		loc_260E ; Branch

loc_2568				; CODE XREF: sub_2424+D4j sub_2424+DAj ...
		MOVS		R0, R4	; Rd = Op2
		BL		sub_23C6 ; Branch with Link
		MOVS		R1, #0	; Rd = Op2
		STR		R1, [R4,#0x30] ; Store to Memory
		LDR		R3, [R5,#0x20] ; Load from Memory
		STR		R3, [R4,#0x34] ; Store to Memory
		CMP		R3, #0	; Set cond. codes on Op1 - Op2
		BEQ		loc_257C ; Branch
		STR		R4, [R3,#0x30] ; Store to Memory

loc_257C				; CODE XREF: sub_2424+154j
		STR		R4, [R5,#0x20] ; Store to Memory
		STR		R5, [R4,#0x2C] ; Store to Memory
		LDRB		R0, [R5,#0x1B] ; Load from Memory
		STRB		R0, [R5,#0x1C] ; Store to Memory
		CMP		R0, R1	; Set cond. codes on Op1 - Op2
		BEQ		loc_258C ; Branch
		STRB		R1, [R5,#0x1A] ; Store to Memory
		STRB		R1, [R5,#0x16] ; Store to Memory

loc_258C				; CODE XREF: sub_2424+162j
		LDR		R0, [SP,#0x38+var_38] ;	Load from Memory
		MOVS		R1, R5	; Rd = Op2
		BL		sub_159C ; Branch with Link
		LDR		R0, [R5,#4] ; Load from	Memory
		STR		R0, [R4,#0x10] ; Store to Memory
		LDR		R0, [SP,#0x38+var_28] ;	Load from Memory
		STRB		R0, [R4,#0x13] ; Store to Memory
		LDR		R0, [SP,#0x38+var_30] ;	Load from Memory
		STRB		R0, [R4,#8] ; Store to Memory
		MOV		R6, R9	; Rd = Op2
		LDRB		R0, [R6] ; Load	from Memory
		STRB		R0, [R4,#1] ; Store to Memory
		LDR		R7, [R6,#4] ; Load from	Memory
		STR		R7, [R4,#0x24] ; Store to Memory
		LDR		R0, [R6,#8] ; Load from	Memory
		STR		R0, [R4,#4] ; Store to Memory
		LDRH		R0, [R5,#0x1E] ; Load from Memory
		STRH		R0, [R4,#0xC] ;	Store to Memory
		LDRB		R1, [R4,#0x12] ; Load from Memory
		LDRB		R0, [R5,#0x10] ; Load from Memory
		MULS		R0, R1	; Multiply
		ASRS		R0, R0,	#7 ; Arithmetic	Shift Right
		STRB		R0, [R4,#2] ; Store to Memory
		LDRB		R0, [R5,#0x11] ; Load from Memory
		MULS		R0, R1	; Multiply
		ASRS		R0, R0,	#7 ; Arithmetic	Shift Right
		STRB		R0, [R4,#3] ; Store to Memory
		LDRB		R1, [R4,#8] ; Load from	Memory
		MOVS		R0, #8	; Rd = Op2
		LDRSB		R0, [R5,R0] ; Load from	Memory
		ADDS		R3, R1,	R0 ; Rd	= Op1 +	Op2
		BPL		loc_25D0 ; Branch
		MOVS		R3, #0	; Rd = Op2

loc_25D0				; CODE XREF: sub_2424+1A8j
		LDR		R6, [SP,#0x38+var_2C] ;	Load from Memory
		CMP		R6, #0	; Set cond. codes on Op1 - Op2
		BEQ		loc_25F6 ; Branch
		MOV		R6, R9	; Rd = Op2
		LDRB		R0, [R6,#2] ; Load from	Memory
		STRB		R0, [R4,#0x1E] ; Store to Memory
		LDRB		R1, [R6,#3] ; Load from	Memory
		MOVS		R0, #0x80 ; 'Ä'	; Rd = Op2
		TST		R0, R1	; Set cond. codes on Op1 & Op2
		BNE		loc_25E6 ; Branch
		STRB		R1, [R4,#0x1F] ; Store to Memory

loc_25E6				; CODE XREF: sub_2424+1BEj
		LDRB		R2, [R5,#9] ; Load from	Memory
		MOVS		R1, R3	; Rd = Op2
		LDR		R0, [SP,#0x38+var_2C] ;	Load from Memory
		LDR		R3, [SP,#0x38+var_34] ;	Load from Memory
		LDR		R3, [R3,#0x30] ; Load from Memory
		BL		nullsub_1 ; Branch with	Link
; ---------------------------------------------------------------------------
		B		loc_2600 ; Branch
; ---------------------------------------------------------------------------

loc_25F6				; CODE XREF: sub_2424+1B0j
		LDRB		R2, [R5,#9] ; Load from	Memory
		MOVS		R1, R3	; Rd = Op2
		MOVS		R0, R7	; Rd = Op2
		BL		sub_18D8 ; Branch with Link

loc_2600				; CODE XREF: sub_2424+1D0j
		STR		R0, [R4,#0x20] ; Store to Memory
		MOVS		R0, #0x80 ; 'Ä'	; Rd = Op2
		STRB		R0, [R4] ; Store to Memory
		LDRB		R1, [R5] ; Load	from Memory
		MOVS		R0, #0xF0 ; ''	; Rd = Op2
		ANDS		R0, R1	; Rd = Op1 & Op2
		STRB		R0, [R5] ; Store to Memory

loc_260E				; CODE XREF: sub_2424+7Aj sub_2424+C6j ...
		ADD		SP, SP,	#0x14 ;	Rd = Op1 + Op2
		POP		{R0-R7}	; Pop registers
		MOV		R8, R0	; Rd = Op2
		MOV		R9, R1	; Rd = Op2
		MOV		R10, R2	; Rd = Op2
		MOV		R11, R3	; Rd = Op2
		POP		{R0}	; Pop registers
		BX		R0	; Branch to/from Thumb mode
; End of function sub_2424

; ---------------------------------------------------------------------------
		ALIGN 0x10
dword_2620	DCD 0x3007FF0		; DATA XREF: sub_23E6+22r sub_2424+12r
off_2624	DCD unk_30D0		; DATA XREF: sub_2424+18r

; =============== S U B	R O U T	I N E =======================================


sub_2628				; DATA XREF: ROM:000037ACo
		PUSH		{R4,LR}	; Push registers
		LDR		R2, [R1,#0x40] ; Load from Memory
		LDRB		R3, [R2] ; Load	from Memory
		CMP		R3, #0x80 ; 'Ä'	; Set cond. codes on Op1 - Op2
		BCS		loc_263A ; Branch
		STRB		R3, [R1,#5] ; Store to Memory
		ADDS		R2, R2,	#1 ; Rd	= Op1 +	Op2
		STR		R2, [R1,#0x40] ; Store to Memory
		B		loc_263C ; Branch
; ---------------------------------------------------------------------------

loc_263A				; CODE XREF: sub_2628+8j
		LDRB		R3, [R1,#5] ; Load from	Memory

loc_263C				; CODE XREF: sub_2628+10j
		LDR		R1, [R1,#0x20] ; Load from Memory
		CMP		R1, #0	; Set cond. codes on Op1 - Op2
		BEQ		loc_265E ; Branch
		MOVS		R4, #0x83 ; 'É'	; Rd = Op2

loc_2644				; CODE XREF: sub_2628+34j
		LDRB		R2, [R1] ; Load	from Memory
		TST		R2, R4	; Set cond. codes on Op1 & Op2
		BEQ		loc_2658 ; Branch
		LDRB		R0, [R1,#0x11] ; Load from Memory
		CMP		R0, R3	; Set cond. codes on Op1 - Op2
		BNE		loc_2658 ; Branch
		MOVS		R0, #0x40 ; '@'	; Rd = Op2
		ORRS		R2, R0	; Rd = Op1 | Op2
		STRB		R2, [R1] ; Store to Memory
		B		loc_265E ; Branch
; ---------------------------------------------------------------------------

loc_2658				; CODE XREF: sub_2628+20j sub_2628+26j
		LDR		R1, [R1,#0x34] ; Load from Memory
		CMP		R1, #0	; Set cond. codes on Op1 - Op2
		BNE		loc_2644 ; Branch

loc_265E				; CODE XREF: sub_2628+18j sub_2628+2Ej
		POP		{R4}	; Pop registers
		POP		{R0}	; Pop registers
		BX		R0	; Branch to/from Thumb mode
; End of function sub_2628


; =============== S U B	R O U T	I N E =======================================


sub_2664				; CODE XREF: sub_26EE:loc_2706j
					; DATA XREF: ROM:0000374Co ...
		PUSH		{R4,R5,LR} ; Push registers
		MOVS		R5, R1	; Rd = Op2
		LDR		R4, [R5,#0x20] ; Load from Memory
		CMP		R4, #0	; Set cond. codes on Op1 - Op2
		BEQ		loc_2688 ; Branch

loc_266E				; CODE XREF: sub_2664+22j
		LDRB		R1, [R4] ; Load	from Memory
		MOVS		R0, #0xC7 ; '«'	; Rd = Op2
		TST		R0, R1	; Set cond. codes on Op1 & Op2
		BEQ		loc_267C ; Branch
		MOVS		R0, #0x40 ; '@'	; Rd = Op2
		ORRS		R1, R0	; Rd = Op1 | Op2
		STRB		R1, [R4] ; Store to Memory

loc_267C				; CODE XREF: sub_2664+10j
		MOVS		R0, R4	; Rd = Op2
		BL		sub_23C6 ; Branch with Link
		LDR		R4, [R4,#0x34] ; Load from Memory
		CMP		R4, #0	; Set cond. codes on Op1 - Op2
		BNE		loc_266E ; Branch

loc_2688				; CODE XREF: sub_2664+8j
		MOVS		R0, #0	; Rd = Op2
		STRB		R0, [R5] ; Store to Memory
		POP		{R4,R5}	; Pop registers
		POP		{R0}	; Pop registers
		BX		R0	; Branch to/from Thumb mode
; End of function sub_2664

; ---------------------------------------------------------------------------
		MOV		R12, LR	; Rd = Op2
		MOVS		R1, #0x24 ; '$' ; Rd = Op2
		LDR		R2, =dword_3738	; Load from Memory

loc_2698				; CODE XREF: ROM:000026A4j
		LDR		R3, [R2] ; Load	from Memory
		BL		sub_26AA ; Branch with Link
		STMIA		R0!, {R3} ; Store Block	to Memory
		ADDS		R2, R2,	#4 ; Rd	= Op1 +	Op2
		SUBS		R1, R1,	#1 ; Rd	= Op1 -	Op2
		BGT		loc_2698 ; Branch
		BX		R12	; Branch to/from Thumb mode

; =============== S U B	R O U T	I N E =======================================


sub_26A8				; CODE XREF: sub_26CE+14p
		LDRB		R3, [R2] ; Load	from Memory
; End of function sub_26A8


; =============== S U B	R O U T	I N E =======================================


sub_26AA				; CODE XREF: ROM:0000269Ap sub_26C4+8j ...
		PUSH		{R0}	; Push registers
		LSRS		R0, R2,	#0x19 ;	Logical	Shift Right
		BNE		loc_26BC ; Branch
		LDR		R0, =dword_3738	; Load from Memory
		CMP		R2, R0	; Set cond. codes on Op1 - Op2
		BCC		loc_26BA ; Branch
		LSRS		R0, R2,	#0xE ; Logical Shift Right
		BEQ		loc_26BC ; Branch

loc_26BA				; CODE XREF: sub_26AA+Aj
		MOVS		R3, #0	; Rd = Op2

loc_26BC				; CODE XREF: sub_26AA+4j sub_26AA+Ej
		POP		{R0}	; Pop registers
		BX		LR	; Branch to/from Thumb mode
; End of function sub_26AA

; ---------------------------------------------------------------------------
off_26C0	DCD dword_3738		; DATA XREF: ROM:00002696r sub_26AA+6r

; =============== S U B	R O U T	I N E =======================================


sub_26C4				; CODE XREF: sub_271C+18p sub_274A+2p	...
		LDR		R2, [R1,#0x40] ; Load from Memory

loc_26C6				; CODE XREF: sub_284A+Cj
		ADDS		R3, R2,	#1 ; Rd	= Op1 +	Op2
		STR		R3, [R1,#0x40] ; Store to Memory
		LDRB		R3, [R2] ; Load	from Memory
		B		sub_26AA ; Branch
; End of function sub_26C4


; =============== S U B	R O U T	I N E =======================================


sub_26CE				; CODE XREF: sub_26EE+16j
					; DATA XREF: ROM:0000373Co
		PUSH		{LR}	; Push registers

loc_26D0				; CODE XREF: sub_271C+Ej sub_271C+20j
		LDR		R2, [R1,#0x40] ; Load from Memory
		LDRB		R0, [R2,#3] ; Load from	Memory
		LSLS		R0, R0,	#8 ; Logical Shift Left
		LDRB		R3, [R2,#2] ; Load from	Memory
		ORRS		R0, R3	; Rd = Op1 | Op2
		LSLS		R0, R0,	#8 ; Logical Shift Left
		LDRB		R3, [R2,#1] ; Load from	Memory
		ORRS		R0, R3	; Rd = Op1 | Op2
		LSLS		R0, R0,	#8 ; Logical Shift Left
		BL		sub_26A8 ; Branch with Link
		ORRS		R0, R3	; Rd = Op1 | Op2
		STR		R0, [R1,#0x40] ; Store to Memory
		POP		{R0}	; Pop registers
		BX		R0	; Branch to/from Thumb mode
; End of function sub_26CE


; =============== S U B	R O U T	I N E =======================================


sub_26EE				; DATA XREF: ROM:00003740o
		LDRB		R2, [R1,#2] ; Load from	Memory
		CMP		R2, #3	; Set cond. codes on Op1 - Op2
		BCS		loc_2706 ; Branch
		LSLS		R2, R2,	#2 ; Logical Shift Left
		ADDS		R3, R1,	R2 ; Rd	= Op1 +	Op2
		LDR		R2, [R1,#0x40] ; Load from Memory
		ADDS		R2, R2,	#4 ; Rd	= Op1 +	Op2
		STR		R2, [R3,#0x44] ; Store to Memory
		LDRB		R2, [R1,#2] ; Load from	Memory
		ADDS		R2, R2,	#1 ; Rd	= Op1 +	Op2
		STRB		R2, [R1,#2] ; Store to Memory
		B		sub_26CE ; Branch
; ---------------------------------------------------------------------------

loc_2706				; CODE XREF: sub_26EE+4j
		B		sub_2664 ; Branch
; End of function sub_26EE


; =============== S U B	R O U T	I N E =======================================


sub_2708				; DATA XREF: ROM:00003744o
		LDRB		R2, [R1,#2] ; Load from	Memory
		CMP		R2, #0	; Set cond. codes on Op1 - Op2
		BEQ		locret_271A ; Branch
		SUBS		R2, R2,	#1 ; Rd	= Op1 -	Op2
		STRB		R2, [R1,#2] ; Store to Memory
		LSLS		R2, R2,	#2 ; Logical Shift Left
		ADDS		R3, R1,	R2 ; Rd	= Op1 +	Op2
		LDR		R2, [R3,#0x44] ; Load from Memory
		STR		R2, [R1,#0x40] ; Store to Memory

locret_271A				; CODE XREF: sub_2708+4j
		BX		LR	; Branch to/from Thumb mode
; End of function sub_2708


; =============== S U B	R O U T	I N E =======================================


sub_271C				; DATA XREF: ROM:00003748o
		PUSH		{LR}	; Push registers
		LDR		R2, [R1,#0x40] ; Load from Memory
		LDRB		R3, [R2] ; Load	from Memory
		CMP		R3, #0	; Set cond. codes on Op1 - Op2
		BNE		loc_272C ; Branch
		ADDS		R2, R2,	#1 ; Rd	= Op1 +	Op2
		STR		R2, [R1,#0x40] ; Store to Memory
		B		loc_26D0 ; Branch
; ---------------------------------------------------------------------------

loc_272C				; CODE XREF: sub_271C+8j
		LDRB		R3, [R1,#3] ; Load from	Memory
		ADDS		R3, R3,	#1 ; Rd	= Op1 +	Op2
		STRB		R3, [R1,#3] ; Store to Memory
		MOV		R12, R3	; Rd = Op2
		BL		sub_26C4 ; Branch with Link
		CMP		R12, R3	; Set cond. codes on Op1 - Op2
		BCS		loc_273E ; Branch
		B		loc_26D0 ; Branch
; ---------------------------------------------------------------------------

loc_273E				; CODE XREF: sub_271C+1Ej
		MOVS		R3, #0	; Rd = Op2
		STRB		R3, [R1,#3] ; Store to Memory
		ADDS		R2, R2,	#5 ; Rd	= Op1 +	Op2
		STR		R2, [R1,#0x40] ; Store to Memory
		POP		{R0}	; Pop registers
		BX		R0	; Branch to/from Thumb mode
; End of function sub_271C


; =============== S U B	R O U T	I N E =======================================


sub_274A				; DATA XREF: ROM:0000375Co
		MOV		R12, LR	; Rd = Op2
		BL		sub_26C4 ; Branch with Link
		STRB		R3, [R1,#0x1D] ; Store to Memory
		BX		R12	; Branch to/from Thumb mode
; End of function sub_274A


; =============== S U B	R O U T	I N E =======================================


sub_2754				; DATA XREF: ROM:00003760o
		MOV		R12, LR	; Rd = Op2
		BL		sub_26C4 ; Branch with Link
		LSLS		R3, R3,	#1 ; Logical Shift Left
		STRH		R3, [R0,#0x1C] ; Store to Memory
		LDRH		R2, [R0,#0x1E] ; Load from Memory
		MULS		R3, R2	; Multiply
		LSRS		R3, R3,	#8 ; Logical Shift Right
		STRH		R3, [R0,#0x20] ; Store to Memory
		BX		R12	; Branch to/from Thumb mode
; End of function sub_2754


; =============== S U B	R O U T	I N E =======================================


sub_2768				; DATA XREF: ROM:00003764o
		MOV		R12, LR	; Rd = Op2
		BL		sub_26C4 ; Branch with Link
		STRB		R3, [R1,#0xA] ;	Store to Memory
		LDRB		R3, [R1] ; Load	from Memory
		MOVS		R2, #0xC ; Rd =	Op2
		ORRS		R3, R2	; Rd = Op1 | Op2
		STRB		R3, [R1] ; Store to Memory
		BX		R12	; Branch to/from Thumb mode
; End of function sub_2768


; =============== S U B	R O U T	I N E =======================================


sub_277A				; DATA XREF: ROM:00003768o
		MOV		R12, LR	; Rd = Op2
		LDR		R2, [R1,#0x40] ; Load from Memory
		LDRB		R3, [R2] ; Load	from Memory
		ADDS		R2, R2,	#1 ; Rd	= Op1 +	Op2
		STR		R2, [R1,#0x40] ; Store to Memory
		LSLS		R2, R3,	#1 ; Logical Shift Left
		ADDS		R2, R2,	R3 ; Rd	= Op1 +	Op2
		LSLS		R2, R2,	#2 ; Logical Shift Left
		LDR		R3, [R0,#0x30] ; Load from Memory
		ADDS		R2, R2,	R3 ; Rd	= Op1 +	Op2
		LDR		R3, [R2] ; Load	from Memory
		BL		sub_26AA ; Branch with Link
		STR		R3, [R1,#0x24] ; Store to Memory
		LDR		R3, [R2,#4] ; Load from	Memory
		BL		sub_26AA ; Branch with Link
		STR		R3, [R1,#0x28] ; Store to Memory
		LDR		R3, [R2,#8] ; Load from	Memory
		BL		sub_26AA ; Branch with Link
		STR		R3, [R1,#0x2C] ; Store to Memory
		BX		R12	; Branch to/from Thumb mode
; End of function sub_277A


; =============== S U B	R O U T	I N E =======================================


sub_27A8				; DATA XREF: ROM:0000376Co
		MOV		R12, LR	; Rd = Op2
		BL		sub_26C4 ; Branch with Link
		STRB		R3, [R1,#0x12] ; Store to Memory
		LDRB		R3, [R1] ; Load	from Memory
		MOVS		R2, #3	; Rd = Op2
		ORRS		R3, R2	; Rd = Op1 | Op2
		STRB		R3, [R1] ; Store to Memory
		BX		R12	; Branch to/from Thumb mode
; End of function sub_27A8


; =============== S U B	R O U T	I N E =======================================


sub_27BA				; DATA XREF: ROM:00003770o
		MOV		R12, LR	; Rd = Op2
		BL		sub_26C4 ; Branch with Link
		SUBS		R3, #0x40 ; '@'	; Rd = Op1 - Op2
		STRB		R3, [R1,#0x14] ; Store to Memory
		LDRB		R3, [R1] ; Load	from Memory
		MOVS		R2, #3	; Rd = Op2
		ORRS		R3, R2	; Rd = Op1 | Op2
		STRB		R3, [R1] ; Store to Memory
		BX		R12	; Branch to/from Thumb mode
; End of function sub_27BA


; =============== S U B	R O U T	I N E =======================================


sub_27CE				; DATA XREF: ROM:00003774o
		MOV		R12, LR	; Rd = Op2
		BL		sub_26C4 ; Branch with Link
		SUBS		R3, #0x40 ; '@'	; Rd = Op1 - Op2
		STRB		R3, [R1,#0xE] ;	Store to Memory
		LDRB		R3, [R1] ; Load	from Memory
		MOVS		R2, #0xC ; Rd =	Op2
		ORRS		R3, R2	; Rd = Op1 | Op2
		STRB		R3, [R1] ; Store to Memory
		BX		R12	; Branch to/from Thumb mode
; End of function sub_27CE


; =============== S U B	R O U T	I N E =======================================


sub_27E2				; DATA XREF: ROM:00003778o
		MOV		R12, LR	; Rd = Op2
		BL		sub_26C4 ; Branch with Link
		STRB		R3, [R1,#0xF] ;	Store to Memory
		LDRB		R3, [R1] ; Load	from Memory
		MOVS		R2, #0xC ; Rd =	Op2
		ORRS		R3, R2	; Rd = Op1 | Op2
		STRB		R3, [R1] ; Store to Memory
		BX		R12	; Branch to/from Thumb mode
; End of function sub_27E2


; =============== S U B	R O U T	I N E =======================================


sub_27F4				; DATA XREF: ROM:0000377Co
		MOV		R12, LR	; Rd = Op2
		BL		sub_26C4 ; Branch with Link
		STRB		R3, [R1,#0x19] ; Store to Memory
		CMP		R3, #0	; Set cond. codes on Op1 - Op2
		BNE		loc_2802 ; Branch
		STRB		R3, [R1,#0x16] ; Store to Memory

loc_2802				; CODE XREF: sub_27F4+Aj
		BX		R12	; Branch to/from Thumb mode
; End of function sub_27F4


; =============== S U B	R O U T	I N E =======================================


sub_2804				; DATA XREF: ROM:00003780o
		MOV		R12, LR	; Rd = Op2
		BL		sub_26C4 ; Branch with Link
		STRB		R3, [R1,#0x1B] ; Store to Memory
		BX		R12	; Branch to/from Thumb mode
; End of function sub_2804


; =============== S U B	R O U T	I N E =======================================


sub_280E				; DATA XREF: ROM:00003784o
		MOV		R12, LR	; Rd = Op2
		BL		sub_26C4 ; Branch with Link
		STRB		R3, [R1,#0x17] ; Store to Memory
		CMP		R3, #0	; Set cond. codes on Op1 - Op2
		BNE		loc_281C ; Branch
		STRB		R3, [R1,#0x16] ; Store to Memory

loc_281C				; CODE XREF: sub_280E+Aj
		BX		R12	; Branch to/from Thumb mode
; End of function sub_280E


; =============== S U B	R O U T	I N E =======================================


sub_281E				; DATA XREF: ROM:00003788o
		MOV		R12, LR	; Rd = Op2
		BL		sub_26C4 ; Branch with Link
		LDRB		R0, [R1,#0x18] ; Load from Memory
		CMP		R0, R3	; Set cond. codes on Op1 - Op2
		BEQ		loc_2834 ; Branch
		STRB		R3, [R1,#0x18] ; Store to Memory
		LDRB		R3, [R1] ; Load	from Memory
		MOVS		R2, #0xF ; Rd =	Op2
		ORRS		R3, R2	; Rd = Op1 | Op2
		STRB		R3, [R1] ; Store to Memory

loc_2834				; CODE XREF: sub_281E+Aj
		BX		R12	; Branch to/from Thumb mode
; End of function sub_281E


; =============== S U B	R O U T	I N E =======================================


sub_2836				; DATA XREF: ROM:00003794o
		MOV		R12, LR	; Rd = Op2
		BL		sub_26C4 ; Branch with Link
		SUBS		R3, #0x40 ; '@'	; Rd = Op1 - Op2
		STRB		R3, [R1,#0xC] ;	Store to Memory
		LDRB		R3, [R1] ; Load	from Memory
		MOVS		R2, #0xC ; Rd =	Op2
		ORRS		R3, R2	; Rd = Op1 | Op2
		STRB		R3, [R1] ; Store to Memory
		BX		R12	; Branch to/from Thumb mode
; End of function sub_2836


; =============== S U B	R O U T	I N E =======================================


sub_284A				; DATA XREF: ROM:000037A4o
		MOV		R12, LR	; Rd = Op2
		LDR		R2, [R1,#0x40] ; Load from Memory
		LDRB		R3, [R2] ; Load	from Memory
		ADDS		R2, R2,	#1 ; Rd	= Op1 +	Op2
		LDR		R0, =0x4000060 ; Load from Memory
		ADDS		R0, R0,	R3 ; Rd	= Op1 +	Op2
		BL		loc_26C6 ; Branch with Link
; End of function sub_284A

; ---------------------------------------------------------------------------
		STRB		R3, [R0] ; Store to Memory
		BX		R12	; Branch to/from Thumb mode
; ---------------------------------------------------------------------------
		ALIGN 0x10
dword_2860	DCD 0x4000060		; DATA XREF: sub_284A+8r

; =============== S U B	R O U T	I N E =======================================


sub_2864				; CODE XREF: sub_287A+32p
					; ROM:000029B4p ...
		MOVS		R6, #0x20 ; ' '	; Rd = Op2

loc_2866				; CODE XREF: sub_2864+12j
		MOVS		R1, R5	; Rd = Op2
		EORS		R1, R2	; Rd = Op1 ^ Op2
		LSRS		R5, R5,	#1 ; Logical Shift Right
		LSRS		R1, R1,	#1 ; Logical Shift Right
		BCC		loc_2872 ; Branch
		EORS		R5, R0	; Rd = Op1 ^ Op2

loc_2872				; CODE XREF: sub_2864+Aj
		LSRS		R2, R2,	#1 ; Logical Shift Right
		SUBS		R6, R6,	#1 ; Rd	= Op1 -	Op2
		BNE		loc_2866 ; Branch
		BX		LR	; Branch to/from Thumb mode
; End of function sub_2864


; =============== S U B	R O U T	I N E =======================================


sub_287A				; CODE XREF: sub_2B34+16Ep
					; sub_2B34+1D0p
		PUSH		{R2,R4,R6,LR} ;	Push registers
		MOV		R12, R1	; Rd = Op2
		STR		R3, [R7,#0x54] ; Store to Memory
		LDR		R3, [R7,#0x44] ; Load from Memory
		LDR		R1, [R7,#0x38] ; Load from Memory
		SUBS		R1, R1,	R3 ; Rd	= Op1 -	Op2
		ASRS		R1, R1,	#2 ; Arithmetic	Shift Right
		BLE		locret_28BA ; Branch
		CMP		R1, #0x89 ; 'â'	; Set cond. codes on Op1 - Op2
		BLE		loc_2890 ; Branch
		MOVS		R1, #0x89 ; 'â'	; Rd = Op2

loc_2890				; CODE XREF: sub_287A+12j
		LDR		R4, [R7,#4] ; Load from	Memory
		LDRH		R5, [R7,#0x20] ; Load from Memory

loc_2894				; CODE XREF: sub_287A+3Aj
		STR		R1, [R7,#0x50] ; Store to Memory
		MOV		R1, R12	; Rd = Op2
		MULS		R4, R1	; Multiply
		ADDS		R4, R4,	#1 ; Rd	= Op1 +	Op2
		LDR		R2, [R3] ; Load	from Memory
		EORS		R2, R4	; Rd = Op1 ^ Op2
		NEGS		R1, R3	; Negate
		EORS		R2, R1	; Rd = Op1 ^ Op2
		LDR		R1, [R7,#0x54] ; Load from Memory
		EORS		R2, R1	; Rd = Op1 ^ Op2
		STMIA		R3!, {R2} ; Store Block	to Memory
		STRH		R5, [R7,#0x22] ; Store to Memory
		BL		sub_2864 ; Branch with Link
		LDR		R1, [R7,#0x50] ; Load from Memory
		SUBS		R1, R1,	#1 ; Rd	= Op1 -	Op2
		BNE		loc_2894 ; Branch
		STRH		R5, [R7,#0x20] ; Store to Memory
		STR		R4, [R7,#4] ; Store to Memory

locret_28BA				; CODE XREF: sub_287A+Ej
		POP		{R2,R4,R6,PC} ;	Pop registers
; End of function sub_287A


; =============== S U B	R O U T	I N E =======================================


sub_28BC				; CODE XREF: ROM:00002984p
					; ROM:00002A82p
		PUSH		{LR}	; Push registers
		BL		sub_2AA6 ; Branch with Link
		POP		{R1}	; Pop registers
		MOV		LR, R1	; Rd = Op2
; End of function sub_28BC


; =============== S U B	R O U T	I N E =======================================


sub_28C6				; CODE XREF: sub_28C6+4j ROM:loc_29DEp ...
		LDRH		R1, [R6,#8] ; Load from	Memory
		LSRS		R1, R1,	#8 ; Logical Shift Right
		BCS		sub_28C6 ; Branch
		BX		LR	; Branch to/from Thumb mode
; End of function sub_28C6

; ---------------------------------------------------------------------------
		PUSH		{R1,R3-R7,LR} ;	Push registers
		MOVS		R3, #0xDF ; 'ﬂ'	; Rd = Op2
		ADR		R2, dword_2C00 ; Load address
		BL		nullsub_2 ; Branch with	Link
; ---------------------------------------------------------------------------
		MOVS		R7, R0	; Rd = Op2
		MOVS		R4, #0xFF ; Rd = Op2
		BL		sub_B9C	; Branch with Link
		BEQ		loc_296E ; Branch
		LSRS		R4, R7,	#0x14 ;	Logical	Shift Right
		MOVS		R3, #0xE8 ; 'Ë'	; Rd = Op2
		ANDS		R3, R4	; Rd = Op1 & Op2
		CMP		R3, #0x20 ; ' '	; Set cond. codes on Op1 - Op2
		BNE		loc_296E ; Branch
		MOVS		R4, #0	; Rd = Op2
		CMP		R1, #1	; Set cond. codes on Op1 - Op2
		BEQ		loc_28FA ; Branch
		CMP		R1, #2	; Set cond. codes on Op1 - Op2
		BGT		loc_296E ; Branch
		LDR		R4, =0xC3871089	; Load from Memory
		ORRS		R4, R1	; Rd = Op1 | Op2

loc_28FA				; CODE XREF: ROM:000028F0j
		STRH		R4, [R7,#0x3A] ; Store to Memory
		LDR		R0, [R7,#0x20] ; Load from Memory
		STR		R0, [R7,#0x10] ; Store to Memory
		LDR		R4, [R7,#0x24] ; Load from Memory
		SUBS		R4, R4,	R0 ; Rd	= Op1 -	Op2
		LDR		R3, =0x3FFF8 ; Load from Memory
		ANDS		R4, R3	; Rd = Op1 & Op2
		STR		R4, [R7,#0xC] ;	Store to Memory
		BL		sub_B9C	; Branch with Link
		BEQ		loc_296E ; Branch
		LDR		R4, =0x40000B0 ; Load from Memory
		LDRH		R0, [R4,#0xA] ;	Load from Memory
		LDRH		R2, [R4,#0x16] ; Load from Memory
		ORRS		R0, R2	; Rd = Op1 | Op2
		LDRH		R2, [R4,#0x22] ; Load from Memory
		ORRS		R0, R2	; Rd = Op1 | Op2
		LDRH		R2, [R4,#0x2E] ; Load from Memory
		ORRS		R0, R2	; Rd = Op1 | Op2
		LSRS		R0, R0,	#0x10 ;	Logical	Shift Right
		BCS		loc_296E ; Branch
		LDR		R6, =0x4000120 ; Load from Memory
		LDRB		R0, [R7,#0x1E] ; Load from Memory
		LSLS		R0, R0,	#0x1C ;	Logical	Shift Left
		LSRS		R0, R0,	#0x1D ;	Logical	Shift Right
		LDRH		R1, [R6] ; Load	from Memory
		LDRH		R2, [R7,#0x3A] ; Load from Memory
		CMP		R2, #0	; Set cond. codes on Op1 - Op2
		BEQ		loc_293A ; Branch
		LSLS		R0, R0,	#0x1F ;	Logical	Shift Left
		LSRS		R0, R0,	#0x1F ;	Logical	Shift Right
		LDRB		R1, [R7,#0x14] ; Load from Memory

loc_293A				; CODE XREF: ROM:00002932j
		STRB		R0, [R7,#8] ; Store to Memory
		STRB		R1, [R7,#4] ; Store to Memory
		LDR		R3, =0xC3871089	; Load from Memory
		LSRS		R3, R3,	#0x10 ;	Logical	Shift Right
		LDR		R1, =0xC37B ; Load from	Memory
		CMP		R2, #0	; Set cond. codes on Op1 - Op2
		LDR		R4, =0x43202F2F	; Load from Memory
		BNE		loc_2950 ; Branch
		LDR		R1, =0xA517 ; Load from	Memory
		LDR		R3, =0x3FFF8 ; Load from Memory
		LDR		R4, =0x6465646F	; Load from Memory

loc_2950				; CODE XREF: ROM:00002948j
		STRH		R1, [R7,#0x3E] ; Store to Memory
		STRH		R3, [R7,#0x38] ; Store to Memory
		STR		R4, [R7,#0x40] ; Store to Memory
		LDR		R1, [R7,#0x18] ; Load from Memory
		STR		R1, [R7] ; Store to Memory
		LDRB		R1, [R7,#0x1C] ; Load from Memory
		STRB		R1, [R7] ; Store to Memory
		ADDS		R4, R6,	#0 ; Rd	= Op1 +	Op2

loc_2960				; CODE XREF: ROM:0000296Cj
		LSRS		R0, R0,	#1 ; Logical Shift Right
		BCC		loc_2970 ; Branch
		LDRB		R1, [R4,#3] ; Load from	Memory
		CMP		R1, #0x73 ; 's'	; Set cond. codes on Op1 - Op2
		BNE		loc_296E ; Branch

loc_296A				; CODE XREF: ROM:loc_2970j
		ADDS		R4, R4,	#2 ; Rd	= Op1 +	Op2
		B		loc_2960 ; Branch
; ---------------------------------------------------------------------------

loc_296E				; CODE XREF: ROM:000028E0j
					; ROM:000028EAj ...
		B		loc_2A8E ; Branch
; ---------------------------------------------------------------------------

loc_2970				; CODE XREF: ROM:00002962j
		BNE		loc_296A ; Branch
		LDR		R5, [R7,#0xC] ;	Load from Memory
		LSRS		R0, R5,	#2 ; Logical Shift Right
		SUBS		R0, #0x34 ; '4'	; Rd = Op1 - Op2
		LDR		R1, [R7,#0x10] ; Load from Memory
		ADDS		R1, R1,	R5 ; Rd	= Op1 +	Op2
		STR		R1, [R7,#0xC] ;	Store to Memory
		LDR		R1, =0x3FFF8 ; Load from Memory

loc_2980				; CODE XREF: ROM:00002982j
		SUBS		R1, R1,	#1 ; Rd	= Op1 -	Op2
		BNE		loc_2980 ; Branch
		BL		sub_28BC ; Branch with Link
		LDRH		R1, [R6,#2] ; Load from	Memory
		STRB		R1, [R7,#5] ; Store to Memory
		LDRH		R1, [R6,#4] ; Load from	Memory
		LDRH		R2, [R6,#6] ; Load from	Memory
		LDRH		R3, [R7,#0x3A] ; Load from Memory
		CMP		R3, #0	; Set cond. codes on Op1 - Op2
		BEQ		loc_299A ; Branch
		MOVS		R1, #0xFF ; Rd = Op2
		MOVS		R2, #0xFF ; Rd = Op2

loc_299A				; CODE XREF: ROM:00002994j
		STRB		R1, [R7,#6] ; Store to Memory
		STRB		R2, [R7,#7] ; Store to Memory
		MOVS		R4, #2	; Rd = Op2
		MOV		R12, R4	; Rd = Op2
		LDR		R3, [R7,#0x10] ; Load from Memory

loc_29A4				; CODE XREF: ROM:00002A34j
		LDR		R1, [R7,#0x20] ; Load from Memory
		SUBS		R1, R1,	R3 ; Rd	= Op1 -	Op2
		LSRS		R1, R1,	#2 ; Logical Shift Right
		LDRH		R0, [R7,#0x3C] ; Load from Memory
		BCS		loc_29DE ; Branch
		LDR		R2, [R3] ; Load	from Memory
		LDRH		R0, [R7,#0x3E] ; Load from Memory
		LDRH		R5, [R7,#0x38] ; Load from Memory
		BL		sub_2864 ; Branch with Link
		STRH		R5, [R7,#0x38] ; Store to Memory
		LDR		R1, [R7] ; Load	from Memory
		LDR		R0, =0x6F646573	; Load from Memory
		MULS		R1, R0	; Multiply
		ADDS		R1, R1,	#1 ; Rd	= Op1 +	Op2
		STR		R1, [R7] ; Store to Memory
		LDR		R0, [R3] ; Load	from Memory
		EORS		R0, R1	; Rd = Op1 ^ Op2
		LDR		R1, [R7,#0x20] ; Load from Memory
		SUBS		R2, R3,	R1 ; Rd	= Op1 -	Op2
		LDR		R1, =0x20000C0 ; Load from Memory
		ADDS		R2, R2,	R1 ; Rd	= Op1 +	Op2
		NEGS		R1, R2	; Negate
		LDR		R2, [R7,#0x40] ; Load from Memory
		EORS		R1, R2	; Rd = Op1 ^ Op2
		EORS		R0, R1	; Rd = Op1 ^ Op2
		LSRS		R2, R0,	#0x10 ;	Logical	Shift Right
		STRH		R2, [R7,#0x3C] ; Store to Memory
		LDR		R6, =0x4000120 ; Load from Memory

loc_29DE				; CODE XREF: ROM:000029ACj
					; ROM:00002A3Aj
		BL		sub_28C6 ; Branch with Link
		LDR		R1, [R7,#0x20] ; Load from Memory
		CMP		R1, R3	; Set cond. codes on Op1 - Op2
		BEQ		loc_2A1A ; Branch
		MOV		LR, R4	; Rd = Op2
		SUBS		R4, R3,	R1 ; Rd	= Op1 -	Op2
		SUBS		R4, R4,	#2 ; Rd	= Op1 -	Op2
		LDRH		R1, [R7,#0x3A] ; Load from Memory
		CMP		R1, #0	; Set cond. codes on Op1 - Op2
		BEQ		loc_29F6 ; Branch
		SUBS		R4, R4,	#2 ; Rd	= Op1 -	Op2

loc_29F6				; CODE XREF: ROM:000029F2j
		LDR		R1, =0x20000C0 ; Load from Memory
		ADDS		R4, R4,	R1 ; Rd	= Op1 +	Op2

loc_29FA				; CODE XREF: ROM:00002A8Cj
		LDRB		R2, [R7,#8] ; Load from	Memory
		ADDS		R5, R6,	#0 ; Rd	= Op1 +	Op2

loc_29FE				; CODE XREF: ROM:00002A0Cj
		LSRS		R2, R2,	#1 ; Logical Shift Right
		BCC		loc_2A0E ; Branch
		LDRH		R1, [R5,#2] ; Load from	Memory
		EORS		R1, R4	; Rd = Op1 ^ Op2
		LSLS		R1, R1,	#0x10 ;	Logical	Shift Left
		BNE		loc_2A8E ; Branch

loc_2A0A				; CODE XREF: ROM:loc_2A0Ej
		ADDS		R5, R5,	#2 ; Rd	= Op1 +	Op2
		B		loc_29FE ; Branch
; ---------------------------------------------------------------------------

loc_2A0E				; CODE XREF: ROM:00002A00j
		BNE		loc_2A0A ; Branch
		MOV		R4, LR	; Rd = Op2
		CMP		R2, R12	; Set cond. codes on Op1 - Op2
		BNE		loc_2A1A ; Branch
		MOVS		R0, #0	; Rd = Op2
		B		loc_2A90 ; Branch
; ---------------------------------------------------------------------------

loc_2A1A				; CODE XREF: ROM:000029E6j
					; ROM:00002A14j
		BL		sub_2AA6 ; Branch with Link
		CMP		R4, #0	; Set cond. codes on Op1 - Op2
		BEQ		loc_2A3C ; Branch
		ADDS		R3, R3,	#2 ; Rd	= Op1 +	Op2
		LDRH		R1, [R7,#0x3A] ; Load from Memory
		CMP		R1, #0	; Set cond. codes on Op1 - Op2
		BEQ		loc_2A2C ; Branch
		ADDS		R3, R3,	#2 ; Rd	= Op1 +	Op2

loc_2A2C				; CODE XREF: ROM:00002A28j
		CMP		R4, #2	; Set cond. codes on Op1 - Op2
		BNE		loc_2A36 ; Branch
		LDR		R1, [R7,#0xC] ;	Load from Memory
		CMP		R1, R3	; Set cond. codes on Op1 - Op2
		BNE		loc_29A4 ; Branch

loc_2A36				; CODE XREF: ROM:00002A2Ej
		MOVS		R0, #0x65 ; 'e'	; Rd = Op2
		SUBS		R4, R4,	#1 ; Rd	= Op1 -	Op2
		B		loc_29DE ; Branch
; ---------------------------------------------------------------------------

loc_2A3C				; CODE XREF: ROM:00002A20j
					; ROM:00002A6Ej
		MOVS		R4, #1	; Rd = Op2
		BL		sub_28C6 ; Branch with Link
		LDRB		R2, [R7,#8] ; Load from	Memory
		ADDS		R3, R6,	#0 ; Rd	= Op1 +	Op2

loc_2A46				; CODE XREF: ROM:00002A5Cj
		LSRS		R2, R2,	#1 ; Logical Shift Right
		BCC		loc_2A5E ; Branch
		LDRH		R1, [R3,#2] ; Load from	Memory
		CMP		R1, #0x75 ; 'u'	; Set cond. codes on Op1 - Op2
		BEQ		loc_2A5A ; Branch
		CMP		R0, #0x65 ; 'e'	; Set cond. codes on Op1 - Op2
		BNE		loc_2A8E ; Branch
		CMP		R1, #0x74 ; 't'	; Set cond. codes on Op1 - Op2
		BNE		loc_2A8E ; Branch
		MOVS		R4, #0	; Rd = Op2

loc_2A5A				; CODE XREF: ROM:00002A4Ej
					; ROM:loc_2A5Ej
		ADDS		R3, R3,	#2 ; Rd	= Op1 +	Op2
		B		loc_2A46 ; Branch
; ---------------------------------------------------------------------------

loc_2A5E				; CODE XREF: ROM:00002A48j
		BNE		loc_2A5A ; Branch
		CMP		R0, #0x66 ; 'f'	; Set cond. codes on Op1 - Op2
		BEQ		loc_2A70 ; Branch
		CMP		R4, #0	; Set cond. codes on Op1 - Op2
		BEQ		loc_2A6A ; Branch
		MOVS		R0, #0x66 ; 'f'	; Rd = Op2

loc_2A6A				; CODE XREF: ROM:00002A66j
		BL		sub_2AA6 ; Branch with Link
		B		loc_2A3C ; Branch
; ---------------------------------------------------------------------------

loc_2A70				; CODE XREF: ROM:00002A62j
		CMP		R4, #0	; Set cond. codes on Op1 - Op2
		BEQ		loc_2A8E ; Branch
		LDRH		R0, [R7,#0x3E] ; Load from Memory
		LDRH		R5, [R7,#0x38] ; Load from Memory
		LDR		R2, [R7,#4] ; Load from	Memory
		BL		sub_2864 ; Branch with Link
		LDR		R6, =0x4000120 ; Load from Memory
		MOVS		R0, R5	; Rd = Op2
		BL		sub_28BC ; Branch with Link
		MOVS		R1, #0	; Rd = Op2
		MOV		R12, R1	; Rd = Op2
		MOVS		R4, R0	; Rd = Op2
		B		loc_29FA ; Branch
; ---------------------------------------------------------------------------

loc_2A8E				; CODE XREF: ROM:loc_296Ej
					; ROM:00002A08j ...
		MOVS		R0, #1	; Rd = Op2

loc_2A90				; CODE XREF: ROM:00002A18j
		STR		R0, [R7,#0x38] ; Store to Memory
		STR		R0, [R7,#0x3C] ; Store to Memory
		STR		R0, [R7,#0x40] ; Store to Memory
		MOVS		R1, R7	; Rd = Op2
		ADDS		R1, #0x14 ; Rd = Op1 + Op2

loc_2A9A				; CODE XREF: ROM:00002A9Ej
		STMIA		R7!, {R0} ; Store Block	to Memory
		CMP		R1, R7	; Set cond. codes on Op1 - Op2
		BNE		loc_2A9A ; Branch
		POP		{R1,R3-R7} ; Pop registers
		POP		{R2}	; Pop registers

nullsub_2				; CODE XREF: ROM:000028D4j
		BX		R2	; Branch to/from Thumb mode

; =============== S U B	R O U T	I N E =======================================


sub_2AA6				; CODE XREF: sub_28BC+2p ROM:loc_2A1Ap ...
		MOVS		R1, #0x96 ; 'ñ'	; Rd = Op2

loc_2AA8				; CODE XREF: sub_2AA6+4j
		SUBS		R1, R1,	#1 ; Rd	= Op1 -	Op2
		BNE		loc_2AA8 ; Branch
		STR		R0, [R6] ; Store to Memory
		STRH		R0, [R6,#0xA] ;	Store to Memory
		LDRH		R1, [R7,#0x3A] ; Load from Memory
		CMP		R1, #0	; Set cond. codes on Op1 - Op2
		BNE		loc_2AB8 ; Branch
		LDR		R1, =0xA1C12083	; Load from Memory

loc_2AB8				; CODE XREF: sub_2AA6+Ej
		STRH		R1, [R6,#8] ; Store to Memory
		BX		LR	; Branch to/from Thumb mode
; End of function sub_2AA6


; =============== S U B	R O U T	I N E =======================================


sub_2ABC				; CODE XREF: sub_2B34:loc_2C5Ep

; FUNCTION CHUNK AT 00003038 SIZE 00000012 BYTES

		PUSH		{LR}	; Push registers
		LDR		R0, =0x3007FFB ; Load from Memory
		LDRB		R1, [R0] ; Load	from Memory
		CMP		R1, #1	; Set cond. codes on Op1 - Op2
		BNE		loc_2AE4 ; Branch
		LDRB		R0, [R7,#0xA] ;	Load from Memory
		LSLS		R0, R0,	#0x19 ;	Logical	Shift Left
		BCC		loc_2AE4 ; Branch
		LDRB		R0, [R7,#0x12] ; Load from Memory
		LDRB		R1, [R7,#0x13] ; Load from Memory
		ORRS		R0, R1	; Rd = Op1 | Op2
		BNE		loc_2AE8 ; Branch
		LDR		R0, [R7,#0x38] ; Load from Memory
		LDR		R1, =0x20000C0 ; Load from Memory
		SUBS		R1, R1,	R0 ; Rd	= Op1 -	Op2
		BGE		loc_2AE4 ; Branch
		MOVS		R0, #0x78 ; 'x'	; Rd = Op2
		STRB		R0, [R7,#0x12] ; Store to Memory
		LDR		R0, =0x2000000 ; Load from Memory
		B		loc_3038 ; Branch
; ---------------------------------------------------------------------------

loc_2AE4				; CODE XREF: sub_2ABC+8j sub_2ABC+Ej ...
		MOVS		R0, #0	; Rd = Op2
		POP		{PC}	; Pop registers
; ---------------------------------------------------------------------------

loc_2AE8				; CODE XREF: sub_2ABC+16j
					; sub_2ABC:loc_3048j
		LDR		R2, [R7,#8] ; Load from	Memory
		LSLS		R1, R2,	#0xD ; Logical Shift Left
		LSRS		R1, R1,	#0x1E ;	Logical	Shift Right
		LDRB		R0, [R7,#0x14] ; Load from Memory

loc_2AF0				; CODE XREF: sub_2ABC+38j
		ADDS		R0, R0,	#3 ; Rd	= Op1 +	Op2
		SUBS		R1, R1,	#1 ; Rd	= Op1 -	Op2
		BPL		loc_2AF0 ; Branch
		STRB		R0, [R7,#0x14] ; Store to Memory
		LSRS		R0, R0,	#2 ; Logical Shift Right
		LSLS		R1, R0,	#0x1A ;	Logical	Shift Left
		LSLS		R2, R2,	#0xC ; Logical Shift Left
		EORS		R1, R2	; Rd = Op1 ^ Op2
		ASRS		R1, R1,	#0x1F ;	Arithmetic Shift Right
		EORS		R0, R1	; Rd = Op1 ^ Op2
		MOVS		R1, #0x1F ; Rd = Op2
		ANDS		R1, R0	; Rd = Op1 & Op2
		LDR		R2, [R7,#8] ; Load from	Memory
		LSLS		R0, R2,	#9 ; Logical Shift Left
		LSRS		R0, R0,	#0x1D ;	Logical	Shift Right
		CMP		R0, #7	; Set cond. codes on Op1 - Op2
		BLT		loc_2B1E ; Branch
		MOVS		R1, #0	; Rd = Op2
		LSLS		R0, R2,	#0xC ; Logical Shift Left
		LSRS		R0, R0,	#0x1D ;	Logical	Shift Right
		CMP		R0, #7	; Set cond. codes on Op1 - Op2
		BLT		loc_2B1E ; Branch
		MOVS		R0, #0	; Rd = Op2

loc_2B1E				; CODE XREF: sub_2ABC+54j sub_2ABC+5Ej
		MOVS		R2, #0x1F ; Rd = Op2
		BL		sub_7BC	; Branch with Link
		LDRB		R0, [R7,#0x12] ; Load from Memory
		SUBS		R0, R0,	#1 ; Rd	= Op1 -	Op2
		BLT		loc_2B2E ; Branch
		STRB		R0, [R7,#0x12] ; Store to Memory
		BNE		loc_2AE4 ; Branch

loc_2B2E				; CODE XREF: sub_2ABC+6Cj
		MOVS		R0, #5	; Rd = Op2
		STRB		R0, [R7,#0x13] ; Store to Memory
		POP		{PC}	; Pop registers
; End of function sub_2ABC


; =============== S U B	R O U T	I N E =======================================


sub_2B34				; CODE XREF: sub_1928:loc_1C3Cp
					; sub_1928:loc_1C86p

; FUNCTION CHUNK AT 00002C20 SIZE 0000010A BYTES
; FUNCTION CHUNK AT 00002D50 SIZE 0000000C BYTES
; FUNCTION CHUNK AT 0000304A SIZE 0000002C BYTES

		PUSH		{R4-R7}	; Push registers
		PUSH		{LR}	; Push registers
		LDR		R7, =0x300000C ; Load from Memory
		LDR		R4, =0x4000120 ; Load from Memory
		LDR		R0, [R7,#0x4C] ; Load from Memory
		LDR		R1, =0x6177614B	; Load from Memory
		MULS		R0, R1	; Multiply
		ADDS		R0, R0,	#1 ; Rd	= Op1 +	Op2
		STR		R0, [R7,#0x4C] ; Store to Memory
		B		loc_304A ; Branch
; ---------------------------------------------------------------------------

loc_2B48				; CODE XREF: sub_2B34:loc_3074j
		LDR		R0, [R7,#0x4C] ; Load from Memory
		MOVS		R1, #0xE0 ; '‡'	; Rd = Op2
		BICS		R0, R1	; Rd = Op1 & ~Op2
		MOVS		R1, #0xA0 ; '†'	; Rd = Op2
		EORS		R0, R1	; Rd = Op1 ^ Op2
		MOVS		R3, #0x8000
		BICS		R0, R3	; Rd = Op1 & ~Op2
		LDR		R1, =0x3007FFB ; Load from Memory
		LDRB		R2, [R1] ; Load	from Memory
		CMP		R2, #1	; Set cond. codes on Op1 - Op2
		BEQ		loc_2B68 ; Branch
		LDR		R1, =0x3000064 ; Load from Memory
		LDR		R2, [R1,#0x24] ; Load from Memory
		ADDS		R2, R2,	#1 ; Rd	= Op1 +	Op2
		BNE		loc_2B6A ; Branch

loc_2B68				; CODE XREF: sub_2B34+2Aj
		ORRS		R0, R3	; Rd = Op1 | Op2

loc_2B6A				; CODE XREF: sub_2B34+32j
		STR		R0, [R7] ; Store to Memory
		LDRB		R5, [R7,#0xF] ;	Load from Memory
		LDRB		R6, [R7,#0xE] ;	Load from Memory
		LDRB		R0, [R7,#0xD] ;	Load from Memory
		CMP		R0, #0	; Set cond. codes on Op1 - Op2
		BNE		loc_2BAE ; Branch
		BL		sub_2D5C ; Branch with Link
		LDRB		R3, [R7,#0xC] ;	Load from Memory
		LDRH		R0, [R4,#0x10] ; Load from Memory
		CMP		R6, #2	; Set cond. codes on Op1 - Op2
		BNE		loc_2B8C ; Branch
		SUBS		R3, R3,	#1 ; Rd	= Op1 -	Op2
		BPL		loc_2BA8 ; Branch

loc_2B86				; CODE XREF: sub_2B34+14Ej
		MOVS		R6, #0	; Rd = Op2
		MOVS		R3, #6	; Rd = Op2
		B		loc_2BA2 ; Branch
; ---------------------------------------------------------------------------

loc_2B8C				; CODE XREF: sub_2B34+4Cj
		CMP		R6, #1	; Set cond. codes on Op1 - Op2
		BNE		loc_2B9A ; Branch
		SUBS		R3, R3,	#1 ; Rd	= Op1 -	Op2
		BPL		loc_2BA8 ; Branch

loc_2B94				; CODE XREF: sub_2B34+152j
		MOVS		R6, #2	; Rd = Op2
		MOVS		R3, #6	; Rd = Op2
		B		loc_2BA2 ; Branch
; ---------------------------------------------------------------------------

loc_2B9A				; CODE XREF: sub_2B34+5Aj
		SUBS		R3, R3,	#1 ; Rd	= Op1 -	Op2
		BPL		loc_2BA8 ; Branch

loc_2B9E				; CODE XREF: sub_2B34+154j
		MOVS		R6, #1	; Rd = Op2
		MOVS		R3, #0x1E ; Rd = Op2

loc_2BA2				; CODE XREF: sub_2B34+56j sub_2B34+64j
		LDR		R1, =(locret_301C+1) ; Load from Memory
		STR		R1, [R7,#0x34] ; Store to Memory
		MOVS		R5, #0	; Rd = Op2

loc_2BA8				; CODE XREF: sub_2B34+50j sub_2B34+5Ej ...
		STRB		R3, [R7,#0xC] ;	Store to Memory
		BL		sub_2D64 ; Branch with Link

loc_2BAE				; CODE XREF: sub_2B34+40j
		CMP		R5, #0	; Set cond. codes on Op1 - Op2
		BNE		loc_2C20 ; Branch
		STR		R5, [R7,#0x10] ; Store to Memory
		STRB		R5, [R7,#0xA] ;	Store to Memory
		LDR		R2, =0x2000000 ; Load from Memory
		STR		R2, [R7,#0x38] ; Store to Memory
		LDR		R2, =0x20000C0 ; Load from Memory
		STR		R2, [R7,#0x3C] ; Store to Memory
		STR		R2, [R7,#0x44] ; Store to Memory
		MOVS		R2, #1	; Rd = Op2
		STRB		R2, [R7,#0xF] ;	Store to Memory
		STRB		R6, [R7,#0xE] ;	Store to Memory
		CMP		R6, #0	; Set cond. codes on Op1 - Op2
		BNE		loc_2BE2 ; Branch
		MOVS		R2, #0xC000
		STRH		R2, [R4,#0x14] ; Store to Memory
		LDR		R1, [R4,#0x30] ; Load from Memory
		STR		R5, [R4,#0x34] ; Store to Memory
		STRH		R5, [R4,#0x38] ; Store to Memory
		MOVS		R1, #7	; Rd = Op2
		STRH		R1, [R4,#0x20] ; Store to Memory
		MOVS		R1, #0x15A0

loc_2BDE				; CODE XREF: sub_2B34+BEj
		STRH		R1, [R7,#0x20] ; Store to Memory
		B		loc_2D56 ; Branch
; ---------------------------------------------------------------------------

loc_2BE2				; CODE XREF: sub_2B34+94j
		CMP		R6, #1	; Set cond. codes on Op1 - Op2
		BNE		loc_2BF4 ; Branch
		STRH		R5, [R4,#0x14] ; Store to Memory
		LDR		R2, =0x60032003	; Load from Memory
		LDR		R1, =0x3FFF8 ; Load from Memory

loc_2BEC				; CODE XREF: sub_2B34+CAj
		STRH		R2, [R4,#8] ; Store to Memory
		STRH		R5, [R4,#0xA] ;	Store to Memory
		STR		R5, [R4] ; Store to Memory
		B		loc_2BDE ; Branch
; ---------------------------------------------------------------------------

loc_2BF4				; CODE XREF: sub_2B34+B0j
		STRH		R5, [R4,#0x14] ; Store to Memory
		LDR		R2, =0x10085088	; Load from Memory
		LSRS		R2, R2,	#0x10 ;	Logical	Shift Right
		LDR		R1, =0xC3871089	; Load from Memory
		LSRS		R1, R1,	#0x10 ;	Logical	Shift Right
		B		loc_2BEC ; Branch
; End of function sub_2B34

; ---------------------------------------------------------------------------
dword_2C00	DCD 0xE129F003,	0xE12FFF1E ; DATA XREF:	ROM:000028D2o
dword_2C08	DCD 0x3FFF8		; DATA XREF: ROM:00002904r
					; ROM:0000294Cr ...
dword_2C0C	DCD 0x40000B0		; DATA XREF: ROM:00002910r
dword_2C10	DCD 0x4000120		; DATA XREF: ROM:00002924r
					; ROM:000029DCr ...
off_2C14	DCD locret_301C+1	; DATA XREF: sub_2B34:loc_2BA2r
dword_2C18	DCD 0xC3871089		; DATA XREF: ROM:000028F6r
					; ROM:0000293Er ...
dword_2C1C	DCD 0x3000064		; DATA XREF: sub_2B34+2Cr
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_2B34

loc_2C20				; CODE XREF: sub_2B34+7Cj
		CMP		R5, #1	; Set cond. codes on Op1 - Op2
		BNE		loc_2C58 ; Branch
		BL		sub_2D5C ; Branch with Link
		MOVS		R1, #0x80 ; 'Ä'	; Rd = Op2
		STRH		R1, [R3,#2] ; Store to Memory
		LDRH		R2, [R3] ; Load	from Memory
		ORRS		R2, R1	; Rd = Op1 | Op2
		STRH		R2, [R3] ; Store to Memory
		STRH		R5, [R3,#8] ; Store to Memory
		CMP		R6, #0	; Set cond. codes on Op1 - Op2
		BNE		loc_2C44 ; Branch
		MOVS		R1, #0x47 ; 'G'	; Rd = Op2
		STRH		R1, [R4,#0x20] ; Store to Memory
		ADR		R2, loc_2F64 ; Load address
		B		loc_2C50 ; Branch
; ---------------------------------------------------------------------------

loc_2C40				; CODE XREF: sub_2B34+112j
		LDR		R1, =0x10085088	; Load from Memory
		B		loc_2C4C ; Branch
; ---------------------------------------------------------------------------

loc_2C44				; CODE XREF: sub_2B34+102j
		CMP		R6, #1	; Set cond. codes on Op1 - Op2
		BNE		loc_2C40 ; Branch
		LDR		R1, =0x60032003	; Load from Memory
		LSRS		R1, R1,	#0x10 ;	Logical	Shift Right

loc_2C4C				; CODE XREF: sub_2B34+10Ej
		STRH		R1, [R4,#8] ; Store to Memory
		ADR		R2, loc_2DA4 ; Load address

loc_2C50				; CODE XREF: sub_2B34+10Aj
		MOVS		R1, #2	; Rd = Op2
		STRB		R1, [R7,#0xF] ;	Store to Memory
		STR		R2, [R7,#0x34] ; Store to Memory
		B		loc_2D56 ; Branch
; ---------------------------------------------------------------------------

loc_2C58				; CODE XREF: sub_2B34+EEj
		CMP		R5, #2	; Set cond. codes on Op1 - Op2
		BNE		loc_2C5E ; Branch
		B		loc_2D56 ; Branch
; ---------------------------------------------------------------------------

loc_2C5E				; CODE XREF: sub_2B34+126j
		BL		sub_2ABC ; Branch with Link
		CMP		R5, #3	; Set cond. codes on Op1 - Op2
		BEQ		loc_2C6C ; Branch
		CMP		R0, #0	; Set cond. codes on Op1 - Op2
		BEQ		loc_2D56 ; Branch
		B		loc_2D58 ; Branch
; ---------------------------------------------------------------------------

loc_2C6C				; CODE XREF: sub_2B34+130j
		BL		sub_2D5C ; Branch with Link
		LDR		R0, [R7,#0x30] ; Load from Memory
		SUBS		R0, R0,	#1 ; Rd	= Op1 -	Op2
		BPL		loc_2C8A ; Branch
		CMP		R6, #0	; Set cond. codes on Op1 - Op2
		BNE		loc_2C84 ; Branch
		LDRH		R1, [R4,#0x38] ; Load from Memory
		MOVS		R2, #0x30 ; '0'	; Rd = Op2
		ANDS		R1, R2	; Rd = Op1 & Op2
		BEQ		loc_2C8C ; Branch
		B		loc_2B86 ; Branch
; ---------------------------------------------------------------------------

loc_2C84				; CODE XREF: sub_2B34+144j
		CMP		R6, #1	; Set cond. codes on Op1 - Op2
		BNE		loc_2B94 ; Branch
		B		loc_2B9E ; Branch
; ---------------------------------------------------------------------------

loc_2C8A				; CODE XREF: sub_2B34+140j
		STR		R0, [R7,#0x30] ; Store to Memory

loc_2C8C				; CODE XREF: sub_2B34+14Cj
		MOVS		R0, #1	; Rd = Op2
		STRH		R0, [R3,#8] ; Store to Memory
		LDRB		R0, [R7,#0x11] ; Load from Memory
		CMP		R0, #0	; Set cond. codes on Op1 - Op2
		BNE		loc_2D50 ; Branch
		CMP		R6, #0	; Set cond. codes on Op1 - Op2
		BNE		loc_2CEE ; Branch
		LDR		R0, =0xA1C12083	; Load from Memory
		LSRS		R0, R0,	#0x10 ;	Logical	Shift Right
		LDR		R1, =0x6177614B	; Load from Memory
		LDR		R3, =0x20796220	; Load from Memory
		BL		sub_287A ; Branch with Link
		STR		R3, [R7,#0x44] ; Store to Memory
		LDR		R1, [R7,#0x3C] ; Load from Memory
		CMP		R3, R1	; Set cond. codes on Op1 - Op2
		BNE		loc_2D56 ; Branch
		LDR		R0, [R7,#0x38] ; Load from Memory
		EORS		R0, R3	; Rd = Op1 ^ Op2
		BNE		loc_2D56 ; Branch
		SUBS		R1, R1,	#4 ; Rd	= Op1 -	Op2
		LDRH		R2, [R1] ; Load	from Memory
		LDRH		R3, [R7,#0x22] ; Load from Memory
		CMP		R3, R2	; Set cond. codes on Op1 - Op2
		BNE		loc_2CE8 ; Branch
		STR		R0, [R1] ; Store to Memory
		LDR		R1, [R7,#8] ; Load from	Memory
		LDR		R2, =0x80808080	; Load from Memory
		ANDS		R1, R2	; Rd = Op1 & Op2
		CMP		R1, R2	; Set cond. codes on Op1 - Op2
		BNE		loc_2CE8 ; Branch
		LDRB		R1, [R7,#0xA] ;	Load from Memory
		LDRB		R2, [R7,#8] ; Load from	Memory
		ADDS		R1, R1,	R2 ; Rd	= Op1 +	Op2
		LDRB		R2, [R7,#9] ; Load from	Memory
		ADDS		R1, R1,	R2 ; Rd	= Op1 +	Op2

loc_2CD4				; CODE XREF: ROM:00003108j
		LDRB		R2, [R7,#0xB] ;	Load from Memory
		SUBS		R1, R1,	R2 ; Rd	= Op1 -	Op2
		LSLS		R1, R1,	#0x19 ;	Logical	Shift Left
		BNE		loc_2CE8 ; Branch
		LDR		R0, =0xEA000036	; Load from Memory
		MOVS		R1, #1	; Rd = Op2
		BL		sub_301E ; Branch with Link
		CMP		R0, #0	; Set cond. codes on Op1 - Op2
		BEQ		loc_2D50 ; Branch

loc_2CE8				; CODE XREF: sub_2B34+188j
					; sub_2B34+194j ...
		MOVS		R0, #0	; Rd = Op2
		STRB		R0, [R7,#0xF] ;	Store to Memory
		B		loc_2D56 ; Branch
; ---------------------------------------------------------------------------

loc_2CEE				; CODE XREF: sub_2B34+164j
		LDR		R2, [R7,#0x3C] ; Load from Memory
		LDR		R3, [R7,#0x44] ; Load from Memory
		CMP		R3, R2	; Set cond. codes on Op1 - Op2
		BEQ		loc_2D56 ; Branch
		LDR		R0, =0xA517 ; Load from	Memory
		LDR		R3, =0x6465646F	; Load from Memory
		CMP		R6, #2	; Set cond. codes on Op1 - Op2
		BNE		loc_2D02 ; Branch
		LDR		R0, =0xC37B ; Load from	Memory
		LDR		R3, =0x43202F2F	; Load from Memory

loc_2D02				; CODE XREF: sub_2B34+1C8j
		LDR		R1, =0x6F646573	; Load from Memory
		BL		sub_287A ; Branch with Link
		CMP		R2, R3	; Set cond. codes on Op1 - Op2
		BNE		loc_2D26 ; Branch
		LDR		R2, [R7,#0x1C] ; Load from Memory
		BL		sub_2864 ; Branch with Link
		STRH		R5, [R7,#0x20] ; Store to Memory
		LDR		R0, =0xEA00002E	; Load from Memory
		MOVS		R1, #4	; Rd = Op2
		LDRB		R6, [R7,#0xE] ;	Load from Memory
		SUBS		R1, R1,	R6 ; Rd	= Op1 -	Op2
		BL		sub_301E ; Branch with Link
		CMP		R0, #0	; Set cond. codes on Op1 - Op2
		BNE		loc_2CE8 ; Branch
		LDR		R3, [R7,#0x3C] ; Load from Memory

loc_2D26				; CODE XREF: sub_2B34+1D6j
		STR		R3, [R7,#0x44] ; Store to Memory
		B		loc_2D56 ; Branch
; END OF FUNCTION CHUNK	FOR sub_2B34
; ---------------------------------------------------------------------------
		ALIGN 4
dword_2D2C	DCD 0xC37B		; DATA XREF: ROM:00002942r
					; sub_2B34+1CAr
dword_2D30	DCD 0xA517		; DATA XREF: ROM:0000294Ar
					; sub_2B34+1C2r
dword_2D34	DCD 0x43202F2F		; DATA XREF: ROM:00002946r
					; sub_2B34+1CCr
dword_2D38	DCD 0x6465646F		; DATA XREF: ROM:0000294Er
					; sub_2B34+1C4r
dword_2D3C	DCD 0x20796220		; DATA XREF: sub_2B34+16Cr
dword_2D40	DCD 0x6177614B		; DATA XREF: sub_2B34+Ar
dword_2D44	DCD 0x6F646573		; DATA XREF: ROM:000029BCr
					; sub_2B34:loc_2D02r
dword_2D48	DCD 0x2000000		; DATA XREF: sub_2ABC+24r sub_2B34+82r
dword_2D4C	DCD 0x60032003		; DATA XREF: sub_2B34+B4r
					; sub_2B34+114r
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_2B34

loc_2D50				; CODE XREF: sub_2B34+160j
					; sub_2B34+1B2j
		MOVS		R0, #4	; Rd = Op2
		STRB		R0, [R7,#0x11] ; Store to Memory
		STRB		R0, [R7,#0xF] ;	Store to Memory

loc_2D56				; CODE XREF: sub_2B34+ACj
					; sub_2B34+122j ...
		MOVS		R0, #0	; Rd = Op2

loc_2D58				; CODE XREF: sub_2B34+136j
		POP		{R3-R7}	; Pop registers
		BX		R3	; Branch to/from Thumb mode
; END OF FUNCTION CHUNK	FOR sub_2B34

; =============== S U B	R O U T	I N E =======================================


sub_2D5C				; CODE XREF: sub_2B34+42p sub_2B34+F0p ...
		MOVS		R0, #0	; Rd = Op2

loc_2D5E				; CODE XREF: sub_2D64+2j
		LDR		R3, =0x4000200 ; Load from Memory
		STRH		R0, [R3,#8] ; Store to Memory
		BX		LR	; Branch to/from Thumb mode
; End of function sub_2D5C


; =============== S U B	R O U T	I N E =======================================


sub_2D64				; CODE XREF: sub_2B34+76p
		MOVS		R0, #1	; Rd = Op2
		B		loc_2D5E ; Branch
; End of function sub_2D64


; =============== S U B	R O U T	I N E =======================================


sub_2D68				; CODE XREF: sub_1928+66p
		LDR		R3, =0x300000C ; Load from Memory
		MOVS		R1, #0	; Rd = Op2
		STRB		R1, [R3,#0xF] ;	Store to Memory
		BX		LR	; Branch to/from Thumb mode
; End of function sub_2D68


; =============== S U B	R O U T	I N E =======================================


sub_2D70				; DATA XREF: ROM:00000310o
					; ROM:off_AB8o
		LDR		R2, =0x4000120 ; Load from Memory
		LDRH		R1, [R2] ; Load	from Memory
		LDR		R3, =0x300000C ; Load from Memory
		LDRB		R0, [R3,#0xE] ;	Load from Memory
		CMP		R0, #1	; Set cond. codes on Op1 - Op2
		BNE		loc_2D86 ; Branch
		LDRH		R0, [R2,#8] ; Load from	Memory
		LSRS		R0, R0,	#7 ; Logical Shift Right
		BCS		loc_2E62 ; Branch

loc_2D82				; CODE XREF: sub_2D70+18j sub_2D70+22j
		LDR		R0, [R3,#0x34] ; Load from Memory
		MOV		PC, R0	; Rd = Op2
; ---------------------------------------------------------------------------

loc_2D86				; CODE XREF: sub_2D70+Aj
		CMP		R0, #2	; Set cond. codes on Op1 - Op2
		BEQ		loc_2D82 ; Branch
		LDRH		R1, [R2,#0x20] ; Load from Memory
		STRH		R1, [R2,#0x20] ; Store to Memory
		MOVS		R0, #7	; Rd = Op2
		ANDS		R1, R0	; Rd = Op1 & Op2
		B		loc_2D82 ; Branch
; ---------------------------------------------------------------------------
dword_2D94	DCD 0x20000C0		; DATA XREF: ROM:000029CCr
					; ROM:loc_29F6r ...
dword_2D98	DCD 0xA1C12083		; DATA XREF: sub_2AA6+10r
					; sub_2B34+166r
dword_2D9C	DCD 0x3007FFB		; DATA XREF: sub_2ABC+2r sub_2B34+24r
dword_2DA0	DCD 0x300000C		; DATA XREF: sub_2B34+4r
; ---------------------------------------------------------------------------

loc_2DA4				; DATA XREF: sub_2B34+11Ao
		LSRS		R0, R1,	#8 ; Logical Shift Right
		CMP		R0, #0x62 ; 'b'	; Set cond. codes on Op1 - Op2
		BNE		loc_2E84 ; Branch
		LDRB		R0, [R3,#0xE] ;	Load from Memory
		CMP		R0, #2	; Set cond. codes on Op1 - Op2
		BNE		loc_2DB4 ; Branch
		MOVS		R0, #1	; Rd = Op2
		B		loc_2DBA ; Branch
; ---------------------------------------------------------------------------

loc_2DB4				; CODE XREF: sub_2D70+3Ej
		LDRH		R0, [R2,#8] ; Load from	Memory
		LSLS		R0, R0,	#0x1A ;	Logical	Shift Left
		LSRS		R0, R0,	#0x1E ;	Logical	Shift Right

loc_2DBA				; CODE XREF: sub_2D70+42j
		STRB		R0, [R3,#0x16] ; Store to Memory
		BEQ		loc_2E62 ; Branch
		MOVS		R1, #1	; Rd = Op2
		LSLS		R1, R0	; Logical Shift	Left
		STRB		R1, [R3,#0x15] ; Store to Memory
		LDRH		R1, [R2] ; Load	from Memory
		ADR		R0, loc_2DF0 ; Load address
		STR		R0, [R3,#0x34] ; Store to Memory

loc_2DCA				; CODE XREF: sub_2D70+84j
		STRB		R1, [R3,#0x10] ; Store to Memory
		MOVS		R0, #0xB ; Rd =	Op2
		STRB		R0, [R3,#0xC] ;	Store to Memory
		MOVS		R0, #0x11 ; Rd = Op2
		ANDS		R0, R1	; Rd = Op1 & Op2
		BNE		loc_2E62 ; Branch
		LSRS		R0, R1,	#4 ; Logical Shift Right
		ORRS		R0, R1	; Rd = Op1 | Op2
		LSRS		R2, R1,	#4 ; Logical Shift Right
		EORS		R2, R1	; Rd = Op1 ^ Op2
		EORS		R2, R0	; Rd = Op1 ^ Op2
		LSLS		R2, R2,	#0x1C ;	Logical	Shift Left
		BNE		loc_2E62 ; Branch
		MOVS		R0, #0x7200
		LDRB		R1, [R3,#0x15] ; Load from Memory
		ORRS		R1, R0	; Rd = Op1 | Op2
		B		loc_2F3E ; Branch
; ---------------------------------------------------------------------------
		ALIGN 0x10

loc_2DF0				; DATA XREF: sub_2D70+56o
		LSRS		R0, R1,	#8 ; Logical Shift Right

loc_2DF2				; CODE XREF: sub_2D70+BCj
		CMP		R0, #0x62 ; 'b'	; Set cond. codes on Op1 - Op2
		BEQ		loc_2DCA ; Branch
		CMP		R0, #0x61 ; 'a'	; Set cond. codes on Op1 - Op2
		BNE		loc_2E62 ; Branch
		MOVS		R0, #3	; Rd = Op2
		STRB		R0, [R3,#0xF] ;	Store to Memory
		STRB		R0, [R3,#0xD] ;	Store to Memory
		LDR		R2, =0x2000000 ; Load from Memory
		STR		R2, [R3,#0x38] ; Store to Memory
		MOVS		R2, #0x60 ; '`'	; Rd = Op2
		ADR		R0, loc_2E0C ; Load address
		B		loc_2E1C ; Branch
; ---------------------------------------------------------------------------
		ALIGN 4

loc_2E0C				; DATA XREF: sub_2D70+96o
		LDR		R2, [R3,#0x38] ; Load from Memory
		STRH		R1, [R2] ; Store to Memory
		ADDS		R2, R2,	#2 ; Rd	= Op1 +	Op2
		STR		R2, [R3,#0x38] ; Store to Memory
		LDR		R2, [R3,#0x48] ; Load from Memory
		SUBS		R2, R2,	#1 ; Rd	= Op1 -	Op2
		BNE		loc_2E1C ; Branch
		ADR		R0, loc_2E28 ; Load address

loc_2E1C				; CODE XREF: sub_2D70+98j sub_2D70+A8j
		STR		R2, [R3,#0x48] ; Store to Memory
		LSLS		R2, R2,	#8 ; Logical Shift Left
		LDRB		R1, [R3,#0x15] ; Load from Memory
		ORRS		R1, R2	; Rd = Op1 | Op2
		B		loc_2F3C ; Branch
; ---------------------------------------------------------------------------
		ALIGN 4

loc_2E28				; DATA XREF: sub_2D70+AAo
		LSRS		R0, R1,	#8 ; Logical Shift Right
		CMP		R0, #0x63 ; 'c'	; Set cond. codes on Op1 - Op2
		BNE		loc_2DF2 ; Branch
		MOVS		R0, #0xFF ; Rd = Op2
		STRB		R0, [R3,#0x1A] ; Store to Memory
		STRB		R0, [R3,#0x1B] ; Store to Memory

loc_2E34				; CODE XREF: sub_2D70+F8j
		STRB		R1, [R3,#0xA] ;	Store to Memory
		STRB		R1, [R3,#0x18] ; Store to Memory
		LDRB		R0, [R3,#0xE] ;	Load from Memory
		CMP		R0, #2	; Set cond. codes on Op1 - Op2
		BNE		loc_2E44 ; Branch
		LDRB		R0, [R3,#0x17] ; Load from Memory
		STRB		R0, [R3,#0x19] ; Store to Memory
		B		loc_2E50 ; Branch
; ---------------------------------------------------------------------------

loc_2E44				; CODE XREF: sub_2D70+CCj
		LDRH		R0, [R2,#2] ; Load from	Memory
		STRB		R0, [R3,#0x19] ; Store to Memory
		LDRH		R0, [R2,#4] ; Load from	Memory
		STRB		R0, [R3,#0x1A] ; Store to Memory
		LDRH		R0, [R2,#6] ; Load from	Memory
		STRB		R0, [R3,#0x1B] ; Store to Memory

loc_2E50				; CODE XREF: sub_2D70+D2j
		LDR		R0, [R3,#0x18] ; Load from Memory
		STR		R0, [R3,#4] ; Store to Memory
		LDRB		R2, [R3,#1] ; Load from	Memory
		STRB		R2, [R3,#0x17] ; Store to Memory
		ADR		R0, loc_2E64 ; Load address

loc_2E5A				; CODE XREF: sub_2D70+112j
		MOVS		R1, #0x7300
		ORRS		R1, R2	; Rd = Op1 | Op2
		B		loc_2F3C ; Branch
; ---------------------------------------------------------------------------

loc_2E62				; CODE XREF: sub_2D70+10j sub_2D70+4Cj ...
		B		loc_2F56 ; Branch
; ---------------------------------------------------------------------------

loc_2E64				; DATA XREF: sub_2D70+E8o
		LSRS		R0, R1,	#8 ; Logical Shift Right
		CMP		R0, #0x63 ; 'c'	; Set cond. codes on Op1 - Op2
		BEQ		loc_2E34 ; Branch
		CMP		R0, #0x64 ; 'd'	; Set cond. codes on Op1 - Op2
		BNE		loc_2F56 ; Branch
		STRB		R1, [R3,#0x1C] ; Store to Memory
		LDRB		R2, [R3,#2] ; Load from	Memory
		LDRB		R0, [R3,#0xE] ;	Load from Memory
		CMP		R0, #2	; Set cond. codes on Op1 - Op2
		BNE		loc_2E80 ; Branch
		STRB		R2, [R3,#0x1D] ; Store to Memory
		MOVS		R0, #0xFF ; Rd = Op2
		STRB		R0, [R3,#0x1E] ; Store to Memory
		STRB		R0, [R3,#0x1F] ; Store to Memory

loc_2E80				; CODE XREF: sub_2D70+106j
		ADR		R0, loc_2E88 ; Load address
		B		loc_2E5A ; Branch
; ---------------------------------------------------------------------------

loc_2E84				; CODE XREF: sub_2D70+38j
		B		loc_2F44 ; Branch
; ---------------------------------------------------------------------------
		ALIGN 4

loc_2E88				; DATA XREF: sub_2D70:loc_2E80o
		LDRB		R0, [R3,#0xE] ;	Load from Memory
		CMP		R0, #2	; Set cond. codes on Op1 - Op2
		BEQ		loc_2E9A ; Branch
		LDRH		R0, [R2,#2] ; Load from	Memory
		STRB		R0, [R3,#0x1D] ; Store to Memory
		LDRH		R0, [R2,#4] ; Load from	Memory
		STRB		R0, [R3,#0x1E] ; Store to Memory
		LDRH		R0, [R2,#6] ; Load from	Memory
		STRB		R0, [R3,#0x1F] ; Store to Memory

loc_2E9A				; CODE XREF: sub_2D70+11Cj
		LSLS		R1, R1,	#2 ; Logical Shift Left
		ADDS		R1, #0xC8 ; '»'	; Rd = Op1 + Op2
		LDR		R0, =0x3FFF8 ; Load from Memory
		ANDS		R0, R1	; Rd = Op1 & Op2
		EORS		R1, R0	; Rd = Op1 ^ Op2
		BNE		loc_2F56 ; Branch
		LDR		R1, =0x20000C0 ; Load from Memory
		ADDS		R2, R1,	R0 ; Rd	= Op1 +	Op2
		ADDS		R2, #8	; Rd = Op1 + Op2
		STR		R2, [R3,#0x3C] ; Store to Memory
		ADR		R0, loc_2EB4 ; Load address
		B		loc_2F3C ; Branch
; ---------------------------------------------------------------------------
		ALIGN 4

loc_2EB4				; DATA XREF: sub_2D70+13Eo
		LDRB		R0, [R3,#0xE] ;	Load from Memory
		CMP		R0, #2	; Set cond. codes on Op1 - Op2
		LDR		R0, [R3,#0x38] ; Load from Memory
		STRH		R1, [R0] ; Store to Memory
		BNE		loc_2EC4 ; Branch
		LDR		R1, [R2] ; Load	from Memory
		STR		R1, [R0] ; Store to Memory
		ADDS		R0, R0,	#2 ; Rd	= Op1 +	Op2

loc_2EC4				; CODE XREF: sub_2D70+14Cj
		ADDS		R1, R0,	#2 ; Rd	= Op1 +	Op2
		STR		R1, [R3,#0x38] ; Store to Memory
		LDR		R0, [R3,#0x3C] ; Load from Memory
		CMP		R0, R1	; Set cond. codes on Op1 - Op2
		BNE		loc_2F3E ; Branch
		ADR		R0, loc_2ED4 ; Load address
		B		loc_2F3C ; Branch
; ---------------------------------------------------------------------------
		ALIGN 4

loc_2ED4				; DATA XREF: sub_2D70+15Eo
		CMP		R1, #0x65 ; 'e'	; Set cond. codes on Op1 - Op2
		BNE		loc_2F56 ; Branch
		LDR		R1, [R3,#0x44] ; Load from Memory
		LDR		R2, [R3,#0x3C] ; Load from Memory
		CMP		R1, R2	; Set cond. codes on Op1 - Op2
		BEQ		loc_2EE4 ; Branch
		MOVS		R1, #0x74 ; 't'	; Rd = Op2
		B		loc_2F3E ; Branch
; ---------------------------------------------------------------------------

loc_2EE4				; CODE XREF: sub_2D70+16Ej
					; sub_2D70+17Ej
		MOVS		R1, #0x75 ; 'u'	; Rd = Op2
		ADR		R0, loc_2EEC ; Load address
		B		loc_2F3C ; Branch
; ---------------------------------------------------------------------------
		ALIGN 4

loc_2EEC				; DATA XREF: sub_2D70+176o
		CMP		R1, #0x65 ; 'e'	; Set cond. codes on Op1 - Op2
		BEQ		loc_2EE4 ; Branch
		CMP		R1, #0x66 ; 'f'	; Set cond. codes on Op1 - Op2
		BNE		loc_2F56 ; Branch
		LDRH		R1, [R3,#0x20] ; Load from Memory
		ADR		R0, loc_2EFC ; Load address
		B		loc_2F3C ; Branch
; ---------------------------------------------------------------------------
		ALIGN 4

loc_2EFC				; DATA XREF: sub_2D70+186o
		LDRH		R0, [R3,#0x20] ; Load from Memory
		CMP		R0, R1	; Set cond. codes on Op1 - Op2
		BNE		loc_2F56 ; Branch
		LDRB		R1, [R3,#0xE] ;	Load from Memory
		CMP		R1, #1	; Set cond. codes on Op1 - Op2
		BNE		loc_2F22 ; Branch
		LDRB		R3, [R3,#0x10] ; Load from Memory
		LSLS		R3, R3,	#0x1C ;	Logical	Shift Left
		LSRS		R3, R3,	#0x1D ;	Logical	Shift Right

loc_2F0E				; CODE XREF: sub_2D70+1AAj
		LSRS		R3, R3,	#1 ; Logical Shift Right
		BCC		loc_2F1C ; Branch
		LDRH		R1, [R2,#2] ; Load from	Memory
		CMP		R0, R1	; Set cond. codes on Op1 - Op2
		BNE		loc_2F1E ; Branch

loc_2F18				; CODE XREF: sub_2D70:loc_2F1Cj
		ADDS		R2, R2,	#2 ; Rd	= Op1 +	Op2
		B		loc_2F0E ; Branch
; ---------------------------------------------------------------------------

loc_2F1C				; CODE XREF: sub_2D70+1A0j
		BNE		loc_2F18 ; Branch

loc_2F1E				; CODE XREF: sub_2D70+1A6j
		LDR		R3, =0x300000C ; Load from Memory
		BNE		loc_2F56 ; Branch

loc_2F22				; CODE XREF: sub_2D70+196j
		LDR		R0, [R3,#0x1C] ; Load from Memory
		LDRB		R1, [R3,#0x19] ; Load from Memory
		SUBS		R0, R0,	R1 ; Rd	= Op1 -	Op2
		LDRB		R1, [R3,#0x1A] ; Load from Memory
		SUBS		R0, R0,	R1 ; Rd	= Op1 -	Op2
		LDRB		R1, [R3,#0x1B] ; Load from Memory
		SUBS		R0, R0,	R1 ; Rd	= Op1 -	Op2
		SUBS		R0, #0x11 ; Rd = Op1 - Op2
		LSLS		R0, R0,	#0x18 ;	Logical	Shift Left
		BNE		loc_2F56 ; Branch
		MOVS		R1, #0xFF ; Rd = Op2
		STRB		R1, [R3,#0x11] ; Store to Memory
		ADR		R0, locret_301C	; Load address

loc_2F3C				; CODE XREF: sub_2D70+B4j sub_2D70+F0j ...
		STR		R0, [R3,#0x34] ; Store to Memory

loc_2F3E				; CODE XREF: sub_2D70+7Cj
					; sub_2D70+15Cj ...
		LDR		R2, =0x4000120 ; Load from Memory
		STRH		R1, [R2,#0xA] ;	Store to Memory
		STRH		R1, [R2,#2] ; Store to Memory

loc_2F44				; CODE XREF: sub_2D70:loc_2E84j
					; ROM:00002FF8j ...
		LDRB		R0, [R3,#0xE] ;	Load from Memory
		CMP		R0, #2	; Set cond. codes on Op1 - Op2
		BNE		loc_2F50 ; Branch
		LDR		R2, =0x4000120 ; Load from Memory
		LDR		R0, =0x10085088	; Load from Memory
		STRH		R0, [R2,#8] ; Store to Memory

loc_2F50				; CODE XREF: sub_2D70+1D8j
		MOVS		R0, #0xB ; Rd =	Op2
		STR		R0, [R3,#0x30] ; Store to Memory
		BX		LR	; Branch to/from Thumb mode
; ---------------------------------------------------------------------------

loc_2F56				; CODE XREF: sub_2D70:loc_2E62j
					; sub_2D70+FCj	...
		MOVS		R1, #0	; Rd = Op2
		STRB		R1, [R3,#0xF] ;	Store to Memory
		ADR		R0, locret_301C	; Load address
		B		loc_2F3C ; Branch
; End of function sub_2D70

; ---------------------------------------------------------------------------
		ALIGN 0x10
dword_2F60	DCD 0x10085088		; DATA XREF: sub_2B34+C2r
					; sub_2B34:loc_2C40r ...
; ---------------------------------------------------------------------------

loc_2F64				; DATA XREF: sub_2B34+108o
		CMP		R1, #1	; Set cond. codes on Op1 - Op2
		BNE		loc_2F56 ; Branch
		LDR		R0, [R3] ; Load	from Memory
		STR		R0, [R3,#4] ; Store to Memory
		LDR		R1, =0x6F646573	; Load from Memory
		EORS		R0, R1	; Rd = Op1 ^ Op2
		STR		R0, [R2,#0x34] ; Store to Memory
		MOVS		R0, #0xB ; Rd =	Op2
		STRB		R0, [R3,#0xC] ;	Store to Memory
		MOVS		R1, #0x10 ; Rd = Op2
		ADR		R0, 0x2F7C ; Load address
		B		loc_3014 ; Branch
; ---------------------------------------------------------------------------
		CMP		R1, #4	; Set cond. codes on Op1 - Op2
		BNE		loc_2F56 ; Branch
		MOVS		R0, #3	; Rd = Op2
		STRB		R0, [R3,#0xF] ;	Store to Memory
		STRB		R0, [R3,#0xD] ;	Store to Memory
		ADR		R0, loc_2F8C ; Load address
		B		loc_3018 ; Branch
; ---------------------------------------------------------------------------
		ALIGN 4

loc_2F8C				; DATA XREF: ROM:00002F86o
		CMP		R1, #2	; Set cond. codes on Op1 - Op2
		BNE		loc_2F56 ; Branch
		LDR		R0, [R2,#0x30] ; Load from Memory
		MOVS		R1, #0x200
		ANDS		R1, R0	; Rd = Op1 & Op2
		LSRS		R1, R1,	#7 ; Logical Shift Right
		ADR		R2, dword_3080 ; Load address
		ADDS		R2, R2,	R1 ; Rd	= Op1 +	Op2
		LDR		R1, [R2] ; Load	from Memory
		EORS		R0, R1	; Rd = Op1 ^ Op2
		STR		R0, [R3,#8] ; Store to Memory
		LSRS		R1, R0,	#8 ; Logical Shift Right
		MOVS		R2, #0x7F ; ''	; Rd = Op2
		ANDS		R1, R2	; Rd = Op1 & Op2
		LSLS		R0, R0,	#0x10 ;	Logical	Shift Left
		BCC		loc_2FB0 ; Branch
		ADDS		R1, #0x80 ; 'Ä'	; Rd = Op1 + Op2

loc_2FB0				; CODE XREF: ROM:00002FACj
		LSRS		R0, R0,	#0x10 ;	Logical	Shift Right
		ANDS		R0, R2	; Rd = Op1 & Op2
		LSLS		R1, R1,	#7 ; Logical Shift Left
		ORRS		R1, R0	; Rd = Op1 | Op2
		ADDS		R1, #0x3F ; '?'	; Rd = Op1 + Op2
		LSLS		R1, R1,	#3 ; Logical Shift Left
		LDR		R0, =0x3FFF8 ; Load from Memory
		ANDS		R0, R1	; Rd = Op1 & Op2
		CMP		R0, R1	; Set cond. codes on Op1 - Op2
		BEQ		loc_2FD0 ; Branch
		LDRB		R0, [R3,#0xA] ;	Load from Memory
		LSLS		R0, R0,	#0x19 ;	Logical	Shift Left
		LSRS		R0, R0,	#0x19 ;	Logical	Shift Right
		STRB		R0, [R3,#0xA] ;	Store to Memory
		MOVS		R0, #0x4480

loc_2FD0				; CODE XREF: ROM:00002FC2j
		ADDS		R0, #0xC ; Rd =	Op1 + Op2
		LDR		R1, =0x2000000 ; Load from Memory
		ADDS		R1, R1,	R0 ; Rd	= Op1 +	Op2
		STR		R1, [R3,#0x40] ; Store to Memory
		MOVS		R1, #0x20 ; ' '	; Rd = Op2
		ADR		R0, loc_2FE0 ; Load address
		B		loc_3014 ; Branch
; ---------------------------------------------------------------------------
		ALIGN 0x10

loc_2FE0				; DATA XREF: ROM:00002FDAo
		CMP		R1, #2	; Set cond. codes on Op1 - Op2
		BNE		loc_2F56 ; Branch
		LDRH		R0, [R2,#0x38] ; Load from Memory
		MOVS		R1, #0x10 ; Rd = Op2
		EORS		R1, R0	; Rd = Op1 ^ Op2
		LDR		R0, [R2,#0x30] ; Load from Memory
		STRH		R1, [R2,#0x38] ; Store to Memory
		LDR		R1, [R3,#0x38] ; Load from Memory
		STMIA		R1!, {R0} ; Store Block	to Memory
		STR		R1, [R3,#0x38] ; Store to Memory
		LDR		R0, [R3,#0x3C] ; Load from Memory
		CMP		R0, R1	; Set cond. codes on Op1 - Op2
		BNE		loc_2F44 ; Branch
		LDR		R1, =0x20000C0 ; Load from Memory
		CMP		R0, R1	; Set cond. codes on Op1 - Op2
		BNE		loc_3006 ; Branch
		LDR		R0, [R3,#0x40] ; Load from Memory
		STR		R0, [R3,#0x3C] ; Store to Memory
		B		loc_2F44 ; Branch
; ---------------------------------------------------------------------------

loc_3006				; CODE XREF: ROM:00002FFEj
		LDR		R0, =0x20001F8 ; Load from Memory
		LDR		R1, [R0,#4] ; Load from	Memory
		LDR		R0, [R0] ; Load	from Memory
		MULS		R0, R1	; Multiply
		STR		R0, [R2,#0x34] ; Store to Memory
		MOVS		R1, #0	; Rd = Op2
		ADR		R0, locret_301C	; Load address

loc_3014				; CODE XREF: ROM:00002F7Aj
					; ROM:00002FDCj
		LDR		R2, =0x4000120 ; Load from Memory
		STRH		R1, [R2,#0x38] ; Store to Memory

loc_3018				; CODE XREF: ROM:00002F88j
		STR		R0, [R3,#0x34] ; Store to Memory
		B		loc_2F44 ; Branch
; ---------------------------------------------------------------------------

locret_301C				; DATA XREF: sub_2D70+1CAo
					; sub_2D70+1EAo ...
		BX		LR	; Branch to/from Thumb mode

; =============== S U B	R O U T	I N E =======================================


sub_301E				; CODE XREF: sub_2B34+1ACp
					; sub_2B34+1E8p
		PUSH		{LR}	; Push registers
		LDR		R2, =0x2000000 ; Load from Memory
		STR		R0, [R2] ; Store to Memory
		LDR		R3, =0x20000C0 ; Load from Memory
		STRB		R1, [R3,#4] ; Store to Memory
		CMP		R1, #1	; Set cond. codes on Op1 - Op2
		BEQ		loc_3030 ; Branch
		LDRB		R0, [R7,#0x16] ; Load from Memory
		STRB		R0, [R3,#5] ; Store to Memory

loc_3030				; CODE XREF: sub_301E+Cj
		ADDS		R0, R2,	#4 ; Rd	= Op1 +	Op2
		BL		sub_6E8	; Branch with Link
		POP		{PC}	; Pop registers
; End of function sub_301E

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_2ABC

loc_3038				; CODE XREF: sub_2ABC+26j
		ADDS		R0, R0,	#4 ; Rd	= Op1 +	Op2
		BL		sub_94A	; Branch with Link

loc_303E				; CODE XREF: ROM:00003606j
		LDRH		R0, [R7,#0x24] ; Load from Memory
		CMP		R0, #0	; Set cond. codes on Op1 - Op2
		BNE		loc_3048 ; Branch
		MOVS		R0, #0x3C ; '<'	; Rd = Op2
		STRH		R0, [R7,#0x24] ; Store to Memory

loc_3048				; CODE XREF: sub_2ABC+586j
		B		loc_2AE8 ; Branch
; END OF FUNCTION CHUNK	FOR sub_2ABC
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_2B34

loc_304A				; CODE XREF: sub_2B34+12j
		LDRB		R0, [R7,#0x12] ; Load from Memory
		CMP		R0, #0x77 ; 'w'	; Set cond. codes on Op1 - Op2
		BNE		loc_3056 ; Branch
		BL		sub_974	; Branch with Link
		B		loc_305E ; Branch
; ---------------------------------------------------------------------------

loc_3056				; CODE XREF: sub_2B34+51Aj
		CMP		R0, #0x76 ; 'v'	; Set cond. codes on Op1 - Op2
		BNE		loc_305E ; Branch
		BL		sub_982	; Branch with Link

loc_305E				; CODE XREF: sub_2B34+520j
					; sub_2B34+524j
		LDRH		R0, [R7,#0x24] ; Load from Memory
		CMP		R0, #0	; Set cond. codes on Op1 - Op2
		BEQ		loc_3074 ; Branch
		SUBS		R0, R0,	#1 ; Rd	= Op1 -	Op2
		STRH		R0, [R7,#0x24] ; Store to Memory
		CMP		R0, #0x39 ; '9'	; Set cond. codes on Op1 - Op2
		BNE		loc_3074 ; Branch
		LDR		R0, =0x300390C ; Load from Memory
		LDR		R1, =(dword_382C+0x154)	; Load from Memory
		BL		sub_1434 ; Branch with Link

loc_3074				; CODE XREF: sub_2B34+52Ej
					; sub_2B34+536j
		B		loc_2B48 ; Branch
; END OF FUNCTION CHUNK	FOR sub_2B34
; ---------------------------------------------------------------------------
		ALIGN 4
dword_3078	DCD 0x4000120		; DATA XREF: sub_2D70r
					; sub_2D70:loc_2F3Er ...
dword_307C	DCD 0x3FFF8		; DATA XREF: sub_2D70+12Er
					; ROM:00002FBCr
dword_3080	DCD 0x6177614B		; DATA XREF: sub_2B34+16Ar
					; ROM:00002F9Ao
dword_3084	DCD 0x6F646573		; DATA XREF: ROM:00002F6Cr
dword_3088	DCD 0x4000200		; DATA XREF: sub_2D5C:loc_2D5Er
dword_308C	DCD 0x20000C0		; DATA XREF: sub_2D70+136r
					; ROM:00002FFAr ...
dword_3090	DCD 0x20001F8		; DATA XREF: ROM:loc_3006r
dword_3094	DCD 0x2000000		; DATA XREF: sub_2D70+90r
					; ROM:00002FD2r ...
dword_3098	DCD 0x300000C		; DATA XREF: sub_2D68r	sub_2D70+4r ...
dword_309C	DCD 0x80808080		; DATA XREF: sub_2B34+18Er
dword_30A0	DCD 0xEA000036		; DATA XREF: sub_2B34+1A8r
dword_30A4	DCD 0xEA00002E		; DATA XREF: sub_2B34+1E0r
dword_30A8	DCD 0x300390C		; DATA XREF: sub_2B34+538r
off_30AC	DCD dword_382C+0x154	; DATA XREF: sub_2B34+53Ar
asc_30B0	DCW 0x22		; DATA XREF: sub_874+7Co ROM:off_B0Co
		unicode	0, <(>
		DCW 0x82
		DCB 0x88 ; à
		DCB 0
		DCD 0xE800E2, 0x1480142
dword_30C0	DCD 0x8020200, 0	; DATA XREF: sub_874+4o sub_874+6o ...
unk_30C8	DCB 0xC0 ; ¿		; DATA XREF: sub_974+6o ROM:off_B2Co
		DCB 1, 1, 8
		DCD 0x1E
unk_30D0	DCB    0		; DATA XREF: ROM:loc_224Ao
					; ROM:off_23A4o ...
		DCB 1, 2, 3
		DCB    4
		DCB 5, 6, 7
		DCB    8
		DCB    9
		DCB  0xA
		DCB  0xB
		DCB  0xC
		DCB 0xD, 0xE, 0xF
		DCB 0x10
		DCB 0x11, 0x12,	0x13
		DCB 0x14
		DCB 0x15, 0x16,	0x17
		DCB 0x18
		DCB 0x1C, 0x1E,	0x20
a0468Bdhlnptxz	DCB 0x24,"(*,0468<@BDHLNPTXZ\`",0
		ALIGN 4
unk_3104	DCB 0xE0 ; ‡		; DATA XREF: sub_18D8:loc_18E6o
					; ROM:off_1924o
		DCB 0xE1, 0xE2,	0xE3
; ---------------------------------------------------------------------------
		B		loc_2CD4 ; Branch
; ---------------------------------------------------------------------------
		DCB 0xE6 ; Ê
		DCB 0xE7
		DCB 0xE8 ; Ë
		DCB 0xE9, 0xEA,	0xEB
		DCB 0xD0 ; –
		DCB 0xD1, 0xD2,	0xD3
		DCB 0xD4 ; ‘
		DCB 0xD5, 0xD6,	0xD7
		DCB 0xD8 ; ÿ
		DCB 0xD9, 0xDA,	0xDB
		DCB 0xC0 ; ¿
		DCB 0xC1, 0xC2,	0xC3
		DCD 0xC7C6C5C4,	0xCBCAC9C8, 0xB3B2B1B0,	0xB7B6B5B4, 0xBBBAB9B8
		DCD 0xA3A2A1A0,	0xA7A6A5A4, 0xABAAA9A8,	0x93929190, 0x97969594
		DCD 0x9B9A9998,	0x83828180, 0x87868584,	0x8B8A8988, 0x73727170
		DCD 0x77767574,	0x7B7A7978, 0x63626160,	0x67666564, 0x6B6A6968
		DCD 0x53525150,	0x57565554, 0x5B5A5958,	0x43424140, 0x47464544
		DCD 0x4B4A4948,	0x33323130, 0x37363534,	0x3B3A3938, 0x23222120
		DCD 0x27262524,	0x2B2A2928, 0x13121110,	0x17161514, 0x1B1A1918
		DCD 0x3020100, 0x7060504, 0xB0A0908, 0x80000000, 0x879C7C97
		DCD 0x8FACD61E,	0x9837F052, 0xA14517CC,	0xAADC0848, 0xB504F334
		DCD 0xBFC886BB,	0xCB2FF52A, 0xD744FCCB,	0xE411F03A, 0xF1A1BF39
unk_31E8	DCB 0x60 ; `		; DATA XREF: sub_170A+10o
					; ROM:off_1788o
		DCB 0, 0x84, 0
		DCD 0xE000B0, 0x1300108, 0x1C00160, 0x2600210, 0x2C002A0
dword_3200	DCD 0xFFFFFFFF,	0x1F0001F, 0x1F0281F, 0x1F0581F, 0x1F00000
					; DATA XREF: sub_7BC:loc_7C0o
					; sub_84A:loc_85Co ...
		DCD 0x1F0280A, 0x1F05816
		DCD 0x1F07C00
		DCB  0xA
		DCB 0x7C, 0xF0,	1
		DCD 0x1F07C16, 0x7C00, 0xA07C0A, 0x1607C16, 0x7C1F, 0xA07C1F
		DCD 0x1607C1F, 0x1F, 0xA0281F, 0x160581F, 0x1F0001F, 0x1F0281F
		DCD 0x1F0581F, 0x1F07C1F, 0x1F07C1F, 0x1F07C1F
unk_3264	DCB    0		; DATA XREF: sub_84A+Co ROM:off_AECo
		DCB 0x7C, 0x1F,	0xFF
		DCD 0x7C1FFD5F
unk_326C	DCB 0x24 ; $            ; DATA XREF: sub_838+4o ROM:off_AE0o
		DCB 0xD4, 0, 0
		DCB  0xF
		DCB 0x40, 0, 0
; ---------------------------------------------------------------------------
		LSLS		R0, R0,	#4 ; Logical Shift Left
		STRH		R1, [R0,#0x14] ; Store to Memory
		STRH		R2, [R0,#0x1C] ; Store to Memory
		STRH		R7, [R1,#0x18] ; Store to Memory
		STMIA		R3, {R2,R3} ; Store Block to Memory
		STRH		R3, [R0,#0x18] ; Store to Memory
		STRH		R1, [R0,#0x18] ; Store to Memory
		STMIA		R3!, {R2} ; Store Block	to Memory
		LSRS		R0, R1,	#0x18 ;	Logical	Shift Right
		STMIA		R2!, {R1} ; Store Block	to Memory
		STMIA		R2, {R0,R2,R3} ; Store Block to	Memory
		LSRS		R7, R0,	#0xC ; Logical Shift Right
		LSRS		R6, R0,	#8 ; Logical Shift Right
		LSRS		R5, R0,	#4 ; Logical Shift Right

loc_3290				; DATA XREF: sub_6E8+2o ROM:off_AC4o
		VRHADD.U32	D5, D20, D30 ; Vector Rounding Halving Add
		LDR		R2, [SP,#0x1A4]	; Load from Memory
		MOVS		R1, #0xA2 ; '¢'	; Rd = Op2
		STRH		R5, [R7,#0x20] ; Store to Memory
		LSRS		R2, R0,	#0xA ; Logical Shift Right
		B		loc_2BA8 ; Branch
; ---------------------------------------------------------------------------
		DCB    9
		DCB 0xAD
		DCD 0x988B2411,	0x217F81C0, 0x19BE52A3,	0x20CE0993, 0x4A4A4610
		DCD 0xEC3127F8,	0x33E8C758, 0xBFCEE382,	0x94DFF485, 0xC1094BCE
		DCD 0xC08A5694,	0xFCA77213, 0x734D849F,	0x619ACAA3, 0x27A39758
		DCD 0x769803FC,	0x61C71D23, 0x56AE0403,	0x8438BF, 0xFD0EA740
		DCD 0x3FE52FF, 0xF130956F, 0x85C0FB97, 0x2580D660, 0x3BE63A9
		DCD 0xE2384E01,	0xFF34A2F9, 0x44033EBB,	0xCB900078, 0x943A1188
		DCD 0x637CC065,	0xAF3CF087, 0x8BE425D6,	0x72AC0A38, 0x7F8D421
unk_332C	DCB 0x24 ; $            ; DATA XREF: sub_82E+6o ROM:off_ADCo
		DCB 0xC0, 3, 0
		DCD 0x180000F, 0x42014100, 0x43C20502, 0xC4430143, 0x3C30F0A
		DCD 0x9C302C3, 0x807040B, 0xE0C0D06, 0x38540300, 0x481C0C02
		DCD 0x9956C0C3,	0x756D8008, 0x441AA6D9,	0x80844021, 0x1035B7A6
		DCD 0xF1DB6C98,	0x66D415A2, 0x2C0A07, 0xB1AC0418, 0x55E19DEB
		DCD 0x45B048DE,	0x46EC6C1A, 0x6004D858,	0x292E0104, 0xE2AF60C7
		DCD 0x1061D661,	0xE40FC69D, 0x40381379,	0x1B775617, 0x5AB06E8D
		DCD 0xBC36E230,	0xC33D6C28, 0xC1F0E1E7,	0xB49A9D14, 0xAA08094
		DCD 0x56746946,	0xDA0DB505, 0x5B043079
		DCD 0x220D1268
		DCB 0x90 ; ê
		DCB 0x19, 0xA5,	0x46
		DCB 0xD0 ; –
		DCB 0xE3, 0xF0,	0x91
		DCB 0x4D ; M
		DCB 0x72, 0x25,	0xE2
		DCB 0x66 ; f
		DCB 0x18, 0x40,	0xC9
		DCD 0xA0AC0618
		DCB 0x85 ; Ö
		DCB 0x4C, 0xC8,	0x83
		DCD 0xB486F181,	0xE5D9286D, 0x6A280AB6,	0x2F94B1B7, 0x57A34D5B
		DCD 0xCD1BF87E,	0xD3AF430D, 0xFA379A37,	0x95B69BDA, 0xB69112C4
		DCD 0xA85A1D, 0x79B4A013, 0x928110D2, 0xA86DA46, 0x88DC30A3
		DCD 0x306CD6C0,	0xE686F19C, 0xC300F4, 0x161E82C6, 0x6ABBD060
		DCD 0x24056320,	0x2BFBA50A, 0x1B9E5438,	0x5A909790, 0x3890DE7F
		DCD 0xA328283, 0x8012B5B0, 0x98C37904, 0xD03862E3, 0xDF465D5F
		DCD 0xD91F29C3,	0x54A1E55F, 0xCA480069,	0x6C16ECA3, 0xB30C3506
		DCD 0xF6ADF5B7,	0xF0DA065B, 0x6DBC9BC0,	0x4B4B69AE, 0x21870F2A
		DCD 0x100CA45B,	0x6510AFDA, 0x5B86DCF2,	0xB8D11BC3, 0xE6987A51
		DCD 0xD8B69675,	0xADE739DD, 0xCE37DBE7,	0x28CFCE74, 0x5066DCD8
		DCD 0xB6DADB4A,	0xDBC826A1, 0xF620D542,	0xDEE14B19, 0xAA8D37BA
		DCD 0xBCCCF29C,	0xB479EEC7, 0xCF202C02,	0xD25B4CCE, 0x8D7ABB63
		DCD 0x364DAFA, 0xF999FE70, 0x7520AA9F, 0x836F272E, 0x39F55052
		DCD 0x6EB2587E,	0x9AF255B9, 0x8A05DA0D,	0xBAB079AB, 0x7EADF5B7
		DCD 0xE8E68F99,	0x77EE9248, 0x18851954,	0x8485CDE, 0x73685A4C
		DCD 0x8441E67D,	0xF0D44883, 0x36BC37B7,	0xE53A726A, 0x90999EAE
		DCD 0x2403190A,	0xF0AE8574, 0xECC5AD35,	0x61BC48DF, 0x3F4A628F
		DCD 0x93325CCD,	0x99B3CCAD, 0x8E650C2A,	0xBBAA4950, 0x306D29CB
		DCD 0x5F4E9FA3,	0x5333746D, 0x386B15A5,	0xC62D0996, 0x8A31F64E
		DCD 0x7EA53DE2,	0xA8485C24, 0x31086895,	0x8B99421C, 0x18B5C3BB
		DCD 0x9A3BD91C,	0xCDA2B5DE, 0xAA776D38,	0x6F438ED0, 0xEF4AE4F1
		DCD 0x9C2FA805,	0x65A50651, 0xA766EA6C,	0xFFB3F0D9, 0x86EE4C37
		DCD 0xB46FAD09,	0xD069D293, 0xA4CC2219,	0x7BBE7CCD, 0x107CBA0B
		DCD 0xFF2AAB4E,	0x81079132, 0x5265A550,	0xB1733016, 0xAD046645
		DCD 0x825BAB5A,	0xED4884D2, 0x6429185E,	0x4BEACB32, 0x25FBB58
		DCD 0x5AEFDB5C,	0xAE6D77DA, 0x4FEBC4DB,	0x76517466, 0x156DCB58
		DCD 0x955EF43F,	0x73A2FA52, 0x484CE119
		DCD 0x1FCD1934
		DCB 0x98 ; ò
		DCB 0x39, 0x14,	0xD1
; ---------------------------------------------------------------------------
		LDRB		R0, [R4,#0x1E] ; Load from Memory
		STRB		R5, [R2,#0x1F] ; Store to Memory
		LDR		R2, =0x81742268	; Load from Memory
		B		loc_303E ; Branch
; ---------------------------------------------------------------------------
		DCB 0xF6 ; ˆ
		DCB 0x2A, 0x6D,	0x21
		DCD 0xA531EC87,	0xE79F2600, 0x502100A, 0x8108815C, 0x88222098
		DCD 0x854440B0,	0x68051581, 0xD2488844,	0x5A2442C4, 0x135AFD91
		DCD 0x1022E832,	0x22C88044, 0x88810888,	0xAC461514, 0x21AA21C4
		DCD 0x6197C5AA,	0x64900888, 0xB4C46B88,	0x45C4235B, 0x69882F83
		DCD 0xA59ED758,	0x8C21159B, 0xAA70487D,	0x5A02E967, 0xB5A62362
		DCD 0x3EC5900D,	0x421100A8, 0xE8298AB, 0xB9986158, 0x2FA95019
		DCD 0x4199BEDC,	0xB448804, 0xA1244400, 0xD45D9088, 0x74294E00
		DCD 0
unk_369C	DCB 0x20		; DATA XREF: sub_840+6o ROM:off_AE4o ...
		DCB 0x26, 0xAD,	0xC2
		DCD 0x1000A40, 0xC4962620, 0x40098C, 0xC67F2620, 0x980
		DCD 0xC8682620,	0x8CC, 0xCA502620, 0x8C0, 0xCC392620, 0x80C
		DCD 0xCE222620,	0x800, 0xC0376466, 0x5B40, 0xC0776466
		DCD 0x5B50
dword_36E4	DCD 0x81742268		; DATA XREF: ROM:00003604r
		DCB 0x90 ; ê
		DCB 2, 0, 0
unk_36EC	DCB 0xFE ; ˛		; DATA XREF: sub_1928+1A4o
					; sub_1928:off_1D6Co
		DCB 0xFE, 0xFE,	0xFF
		DCD 0xFF00FFFF,	0x10000, 0x2010101, 0xFFFF0202,	0xFF00
		DCD 0x1010001, 0xFF00, 1

; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

sub_3710				; CODE XREF: sub_1928-165Cp
		BX		PC	; Branch to/from Thumb mode
; ---------------------------------------------------------------------------
		ALIGN 4
		CODE32

loc_3714				; CODE XREF: sub_3710j
		B		loc_1A0	; Branch
; End of function sub_3710

		CODE16

; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

sub_3718				; CODE XREF: sub_1928-163Cp
		BX		PC	; Branch to/from Thumb mode
; ---------------------------------------------------------------------------
		ALIGN 4
		CODE32

loc_371C				; CODE XREF: sub_3718j
		B		sub_18C	; Branch
; End of function sub_3718

		CODE16

; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

sub_3720				; CODE XREF: sub_170A+22p sub_170A+32p ...
		BX		PC	; Branch to/from Thumb mode
; ---------------------------------------------------------------------------
		ALIGN 4
		CODE32

loc_3724				; CODE XREF: sub_3720j
		B		loc_3A8	; Branch
; End of function sub_3720

		CODE16

; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

sub_3728				; CODE XREF: sub_1928+31Ep
					; sub_1928+36Ep ...
		BX		PC	; Branch to/from Thumb mode
; ---------------------------------------------------------------------------
		ALIGN 4
		CODE32

loc_372C				; CODE XREF: sub_3728j
		B		sub_328	; Branch
; End of function sub_3728

		CODE16

; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

sub_3730				; CODE XREF: sub_1928+FCp
		BX		PC	; Branch to/from Thumb mode
; ---------------------------------------------------------------------------
		ALIGN 4
		CODE32

loc_3734				; CODE XREF: sub_3730j
		B		sub_CE0	; Branch
; End of function sub_3730

; ---------------------------------------------------------------------------
dword_3738	DCD 0x2665		; DATA XREF: sub_1664+62o
					; ROM:off_1700o ...
		DCD sub_26CE+1
		DCD sub_26EE+1
		DCD sub_2708+1
		DCD sub_271C+1
		DCD sub_2664+1
		DCD sub_2664+1
		DCD sub_2664+1
		DCD sub_2664+1
		DCD sub_274A+1
		DCD sub_2754+1
		DCD sub_2768+1
		DCD sub_277A+1
		DCD sub_27A8+1
		DCD sub_27BA+1
		DCD sub_27CE+1
		DCD sub_27E2+1
		DCD sub_27F4+1
		DCD sub_2804+1
		DCD sub_280E+1
		DCD sub_281E+1
		DCD sub_2664+1
		DCD sub_2664+1
		DCD sub_2836+1
		DCD sub_2664+1
		DCD sub_2664+1
		DCD sub_2664+1
		DCD sub_284A+1
		DCD sub_2664+1
		DCD sub_2628+1
		DCD sub_170A+1
		DCD sub_23E6+1
		DCD sub_1534+1
		DCD sub_159C+1
		DCD sub_23C6+1
		DCD sub_23B0+1
		DCD unk_3C00
		DCD dword_382C
		DCD 0xBC4D00FF,	0x3C00,	0x39D0,	0xF99AA5FF, 0x3C00, 0x382C
		DCD 0xF680A5FF,	0x5FBB00BC, 0x4BBE00BD,	0xD58F40BF, 0xB186705B
		DCD 0xBD00BC, 0x40BF4BBE, 0x7056D58A
		DCD 0xBCB186
dword_380C	DCD 0x4BBE00BD,	0xD58540BF, 0xB1867053,	0xBC000003, 0x37C8
					; DATA XREF: sub_1928+38Eo
					; sub_1928:off_1D9Co
		DCD 0x37EC, 0x37FC, 0x380A
dword_382C	DCD 0x40000000,	0x82B495, 1, 0x21, 0x47311900, 0x7D756A5A
					; DATA XREF: ROM:000037CCo
		DCD 0x6A757D7F,	0x1931475A, 0xB9CFE700,	0x838B96A6, 0x968B8381
		DCD 0xE7CFB9A6,	0x1900,	0x54BB00BC, 0x55BE00BD,	0xD58F40BF
		DCD 0xB1867056,	0xBD00BC, 0x40BF55BE, 0x705BD58A, 0xBCB186
		DCD 0x55BE00BD,	0xD58540BF, 0xB1867056,	0xBD00BC, 0x40BF55BE
		DCD 0x86705BD5,	0xB1, 0xB7000004, 0x37C8, 0x3860, 0x3870
		DCD 0x387E, 0x388C, 0x4ABB00BC,	0x78BE01BD, 0x41E740BF
		DCD 0xBCB19860,	0xBE01BD00, 0xE740BF78,	0xB1987048, 0x1BD00BC
		DCD 0x40BF78BE,	0x6C4CE782, 0xBCB198, 0x78BE01BD, 0xE78440BF
		DCD 0xB1986C4F,	0x1BD00BC, 0x40BF78BE, 0x6C53E786, 0xBCB198
		DCD 0x78BE01BD,	0xE78A40BF, 0xB1986056,	0xD0000006, 0x37C8
		DCD 0x38B4, 0x38C3, 0x38D0, 0x38DE, 0x38EC, 0x38FA, 0x63BB00BC
		DCD 0x5EBE00BD,	0xD58F40BF, 0xB1867864,	0xBD00BC, 0x40BF5EBE
		DCD 0x7862D58A,	0xBCB186, 0x5EBE00BD, 0xD58540BF, 0xB1867860
		DCD 0xBD00BC, 0x40BF5EBE, 0x86505FD5, 0xBD00BCB1, 0xBF5EBE00
		DCD 0x66D59440,	0xBCB18678, 0xBE00BD00,	0x9840BF5E, 0x7867DB81
		DCD 0xB18C, 0xB2000006,	0x37C8,	0x3928,	0x3938,	0x3946
		DCD 0x3954, 0x3961, 0x396F, 0x4ABB00BC,	0x55BE02BD, 0xD38440BF
		DCD 0xB185786C,	0x2BD00BC, 0x40BF55BE, 0x847060D3, 0xB1
		DCD 0xD0000002,	0x37C8,	0x39A0,	0x39B0,	0x40000000, 0x2F5658
		DCD 0
		DCD dword_470+0xB0
		DCB  0xB
		DCB 0x3B, 0x48,	0x3E
		DCD 0xC6C3EB24,	0x37350FDF, 0xADC0FF2A,	0x321AE2BD, 0xB0D61027
		DCD 0x440DD9BD,	0xD10D3346, 0x32F4D1BE,	0x53E5258, 0xF6C9B5C4
		DCD 0x1B3B4431,	0xC9ACA5D4, 0x23353503,	0xC7AEB3F3, 0x415134F1
		DCD 0xC4BAE927,	0x5C5115DF, 0xB0DB264D,	0x4619DDBB, 0xB1F63045
		DCD 0x26E5B8A2,	0xCB0E2F3D, 0x15D8B8A6,	0x8374D4E, 0xF8CFB7C6
		DCD 0x3D58603A,	0xCAAFBBFF, 0x3E4E39FC,	0xA9A0CE15, 0x3C3C09CD
		DCD 0xA9AEEC22,	0x5639F6C7, 0xB4E32244,	0x561AE2BE, 0xD61E4C64
		DCD 0x1DE2B8AA,	0xF02A4C4D, 0xECBA9DAF,	0x6314529, 0xDFB5A3C9
		DCD 0x32535019,	0xCFB1C501, 0x5B663BFF,	0xA9B7FA34, 0x563A00CE
		DCD 0x9DCE0C3C,	0x400CD5A8, 0xB0E71A41,	0x38FECAA4, 0xE217435B
		DCD 0x1DE9BAB2,	0x15466A57, 0xEBBAA6D7,	0x1F4F521C, 0xC19AB2EE
		DCD 0x2D4B28F2,	0xB3A2CDFD, 0x564F19E9,	0xACC8FD29, 0x6A3805D3
		DCD 0xB9F9275B,	0x3902D7A7, 0xD403345C,	0x9DFAA9C, 0xE70D4341
		DCD 0x3D2A1B7, 0xC3E5C33, 0xF3BAB3E7, 0x3A6B541C, 0xBFA5DB0E
		DCD 0x4D5319F2,	0x9AB7F113, 0x4D24F5CA,	0xA4D6F625, 0x4B17F2B6
		DCD 0xCDFB1D53,	0x340ADAAB, 0xFB1C5369,	0x3E0ABBB, 0x295B37
		DCD 0xE6B19FDB,	0x33E3E06, 0xDAA3BEEB, 0x35582D05, 0xBFB6EC06
		DCD 0x66501AFA,	0xAAE00B2F, 0x5117F5C7,	0xBDF50B44, 0x20F5D2A0
		DCD 0xDEF51B47,	0x14F8BCAA, 0xFD154B44,	0xBE1B1D4, 0x1649622F
		DCD 0xE4B4C3FC,	0x20513302, 0xBAA9E100,	0x333704E9, 0xACC6F000
		DCD 0x4C2705E0,	0xBEF0052C, 0x4919FDC7,	0xE40A2858, 0x15F5CFB6
		DCD 0xF80A3847,	0xF6D7ADC6, 0xF914391B,	0xF8C5B5E4, 0x123D3911
		DCD 0xE5BEDBFF,	0x3D522C0A, 0xC1CFFD15,	0x412C02E4, 0xB8E7021D
		DCD 0x2A04E8C2,	0xD1F50227, 0x2004E1BA,	0xF308253A, 0x18FAD1CD
		DCD 0x927483C, 0xF4D3C9EB, 0xE2E3514, 0xD6BDD5FA, 0x132612F6
		DCD 0xCCC7EAFF,	0x2F280FF5, 0xCEE50016,	0x3E2609E6, 0xDFFE1736
		DCD 0x2002E2CE,	0xEE051F2F, 0x1E6C7CD, 0xF90B1C16, 0x2DFCADF
unk_3C00	DCB 0x15		; DATA XREF: ROM:000037C8o
		DCB 0x25, 0x24,	0xC
		DCD 0xF7D9DEF7,	0x28372B16, 0xD5DBF50A,	0x27210FF2
		DCD 0xCBE5FD15
		DCB 0xD3 ; ”
		DCB 0xF5, 5, 0x14
		DCB 0x17
		DCB 4, 0xF1, 0xDA
		DCB 0xD2 ; “
		DCB 0xF1, 9, 0x13
		DCD 0xF1021B23,	0x1B06E4DE, 0x11A3229, 0xE0D9F1, 0x9231F10
		DCD 0xE3CCE0F8,	0x131603FB, 0xDDD8EFFE,	0x241306FD, 0xE0F0FE11
		DCD 0x2B180FF3,	0xEC000D2A, 0xF04EFD9, 0xF7021A24, 0xF7EFD2D8
		DCD 0xFC0B1B06,	0xFFEBD6EB, 0x8201B01, 0xE5EBFE, 0x1E2D180C
		DCD 0xDFE3000A,	0x251500F8, 0xD0EF0310,	0x13F4EEDE, 0xE3FC061A
		DCD 0x7F6F2DC, 0xFC071823, 0x802EFE6, 0xB162A21, 0xF7E8DDF7
		DCD 0xD202002, 0xE3D2E102, 0x151EFFE8, 0xE3DDF607, 0x2315F6ED
		DCD 0xE7F30814,	0x270EFEF4, 0xEB071624,	0xEF5EADE, 0xF80E1C26
		DCD 0xEDDED5D7,	0x5142110, 0xE9E1DCEC, 0x13222001, 0xF1E9EE01
		DCD 0x242A1800,	0xDDE3FD13, 0x291BFEE8,	0xD2EB081C, 0x1EFDDFD1
		DCD 0xE4FC1123,	0x10F0DBD6, 0xFA0D2327,	0x8F1E3E9, 0xA222F21
		DCD 0xF0D9DBF4,	0x162C270A, 0xD0C7DFFE,	0x232A0EEC, 0xCCD9F408
		DCD 0x301DFFE1,	0xDDF5031D, 0x2D11FBDF,	0xE8011734, 0x18FDDECE
		DCD 0xF40A2A35,	0xFCDCBFCD, 0xFF19341F,	0xF1CCC6EA, 0xE322E0B
		DCD 0xE9D0E8FF,	0x2C3E1D04, 0xCAD4FB0A,	0x3D2A08EE, 0xB9E3001A
		DCD 0x340CEFC7,	0xD3F90930, 0x1DFEDFB9,	0xF804233F, 0xCF9D2D0
		DCD 0x4184133, 0xFDD8C0E8, 0xA334116, 0xDEB2C6F8, 0x1D4224FE
		DCD 0xC4B6EA00,	0x3D3809F2, 0xC1E1000F,	0x493B0BE5, 0xB9E30319
		DCD 0x4B1BFFD6,	0xBEF70B39, 0x2B00E0AC,	0xE300204A, 0xDF2C0AB
		DCD 0xFC10423F,	0xE1BBD7, 0x9334F24, 0xEFC0C6F5, 0x1F4E390B
		DCD 0xC4A8DA00,	0x3C4615F6, 0xAABFF30A,	0x4D2900DC, 0xBFE90029
		DCD 0x4111F4C8,	0xDBFD1A4A, 0x2400D7BA,	0xED0A3B4E, 0x8E2AEB9
		DCD 0xFB224C33,	0xF4C0A9D6, 0x10424316,	0xDDBBCEF1, 0x354F2D05
		DCD 0xC3C5E904,	0x4E3F15EF, 0xABD1F820,	0x4821FCC8, 0xB8E4093D
		DCD 0x3109DCAD,	0xDAF92A4B, 0x1DF4C7BF,	0xF0194944, 0x7D7C0D4
		DCD 0x63C4E2F, 0xE5B4BADF, 0x244A3914, 0xC1ADC8F0, 0x404322F8
		DCD 0xBFC9E00D,	0x4C350EDB, 0xCADBFC34,	0x4322F2C9, 0xC9EA204B
		DCD 0x2D03CCB4,	0xD3043C47, 0x14DDB3B7,	0xED294636, 0xF8C8C3CD
		DCD 0x15454229,	0xDCC9D1E0, 0x3A4A3811,	0xBDBFD2FE, 0x463D21EC
		DCD 0xB4BFE121,	0x402C00C5, 0xC7D0053E,	0x3919DEC3, 0xD1EF3047
		DCD 0x2DFBD0D0,	0xDC1A4743, 0xFD5BFC6, 0xFA384435, 0xE4BABAC5
		DCD 0x2242381F,	0xCDC6C6DE, 0x40403101,	0xD2D1D40A, 0x473C1DE6
		DCD 0xC5C9F133,	0x3E2BF8C9, 0xBBD21741,	0x320ACEBA, 0xC6F8363D
		DCD 0x22E9C9C7,	0xE3234039, 0x7DED7CF, 0xC3C3E31, 0xE6CECCD6
		DCD 0x293A3318,	0xCBC5C5ED, 0x333121F2,	0xD1CBD810, 0x332B0BDE
		DCD 0xDBD7FC2C,	0x301EF8E1, 0xD5EB1E35,	0x2504E1D7, 0xD7052C2F
		DCD 0xDE6D2CE, 0xEF1C2A24, 0xFADED7D4, 0xB, 0, 0, 0, 0
		DCD 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
		DCD 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
		DCD 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
		DCD 0, 0, 0, 0,	0, 0, 0, 0
; ROM		ends

		END
